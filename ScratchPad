let 
strRangeStart = DateTime.ToText(RangeStart,[Format="yyyy-MM-dd'T'HH:mm:ss'Z'", Culture="en-US"]),
strRangeEnd = DateTime.ToText(RangeEnd,[Format="yyyy-MM-dd'T'HH:mm:ss'Z'", Culture="en-US"]),
AnalyticsQuery =
let Source = Json.Document(Web.Contents("https://api.loganalytics.io/v1/workspaces/ce4e1e84-3765-4cfe-ac40-5de8d7633df4/query", 
[Query=[#"query"="WVDErrors
| join kind=leftouter (    
    WVDConnections
    | where State == ""Completed""
    | extend Protocol = iff(UdpUse in (""0"", ""<>""), ""TCP"", ""UDP"")
    )
    on CorrelationId
| extend ClientType = iff(
                          ClientType == ""com.microsoft.rdc.windows.msrdc.x64"",
                          ""Windows RD Client x64 (MSI)"",
                          iff(
    ClientType == ""com.igel.rdc.linux"",
    ""IGEL"",
    iff(
    ClientType == ""com.microsoft.rdc.windows.store"",
    ""Windows RD Client Store App"",
    iff(
    ClientType == ""com.microsoft.rdc.html"",
    ""Web Browser (HTML5)"",
    iff(
    ClientType == ""com.microsoft.rdc.macos"",
    ""MAC OS"",
    iff(
    ClientType == ""com.microsoft.rdc.windows.msrdc.arm64"",
    ""Windows RD Client ARM 64 (MSI)"",
    iff(
    ClientType == ""com.microsoft.rdc.ios"",
    ""iOS"",
    iff(
    ClientType == ""com.microsoft.rdc.windows.msrdc.msix.x64"", 
    ""Windows RD Client x64 (MSIX)"",
    iff(ClientType == ""com.microsoft.rdc.windows.wa.msrdc.msix.arm64"", ""Windows App x64 (MSIX)"", ""Other"")
)
)
)
)
)
)
)
                      )
| order by TimeGenerated desc
",#"x-ms-app"="OmsAnalyticsPBI",#"timespan"="strRangeStart/strRangeEnd",#"prefer"="ai.response-thinning=true"],Timeout=#duration(0,0,4,0)])),
TypeMap = #table(
{ "AnalyticsTypes", "Type" }, 
{ 
{ "string",   Text.Type },
{ "int",      Int32.Type },
{ "long",     Int64.Type },
{ "real",     Double.Type },
{ "timespan", Duration.Type },
{ "datetime", DateTimeZone.Type },
{ "bool",     Logical.Type },
{ "guid",     Text.Type },
{ "dynamic",  Text.Type }
}),
DataTable = Source[tables]{0},
Columns = Table.FromRecords(DataTable[columns]),
ColumnsWithType = Table.Join(Columns, {"type"}, TypeMap , {"AnalyticsTypes"}),
Rows = Table.FromRows(DataTable[rows], Columns[name]), 
Table = Table.TransformColumnTypes(Rows, Table.ToList(ColumnsWithType, (c) => { c{0}, c{3}}))
in
Table
in AnalyticsQuery
