Heartbeat
| where TimeGenerated >= ago(30d)
| extend 
    Hostpool = case(
        Computer startswith "M09PSSPG", "CUS_PRD_SSPersistent",
        Computer startswith "M13PMSNI", "EAS_PRD_MSPooled",
        Computer startswith "M13PSSPI", "EAS_PRD_SSPersistent",
        Computer startswith "M06PSSPG", "EUS2_PRD_SSPersistent",
        Computer startswith "M06USSPG", "EUS2_UAT_SSPersistent",
        Computer startswith "M01DDEVT", "NEU_DEV_SSPersistent",
        Computer startswith "M01DVLDT", "NEU_DEV_SSPersistent",
        Computer startswith "M01NACRI", "NEU_NPA_CRIMS_RMPooled",
        Computer startswith "M01NBCRI", "NEU_NPB_CRIMS_RMPooled",
        Computer startswith "M01OHCRI", "NEU_OAT_High_CRIMS_RMPooled",
        Computer startswith "M01OLCRI", "NEU_OAT_Low_CRIMS_RMPooled",
        Computer startswith "M01OMCRI", "NEU_OAT_Med_CRIMS_RMPooled",
        Computer startswith "M01PADM", "NEU_PRD_ADM_RMPooled",
        Computer startswith "M01PHCRI", "NEU_PRD_High_CRIMS_RMPooled",
        Computer startswith "M01PLCRI", "NEU_PRD_Low_CRIMS_RMPooled",
        Computer startswith "M01PMCRI", "NEU_PRD_Med_CRIMS_RMPooled",
        Computer startswith "M01PMSNI", "NEU_PRD_MSPooled",
        Computer startswith "M01PSSPI", "NEU_PRD_SSPersistent",
        Computer startswith "M01PQNT", "NEU_Prod_Quantum_RMPooled",
        Computer startswith "M01TMSNI", "NEU_TST_MSPooled",
        Computer startswith "M01TSSPI", "NEU_TST_SSPersistent",
        Computer startswith "M01UMSNI", "NEU_UAT_MULTISESSION",
        Computer startswith "M01UQNT", "NEU_UAT_Quantum_RMPooled",
        Computer startswith "M01USSPI", "NEU_UAT_SSPersistent",
        Computer startswith "M14PMSNI", "SEA_PRD_MSPooled",
        Computer startswith "M14PSSPI", "SEA_PRD_SSPersistent",
        Computer startswith "M14UMSNI", "SEA_UAT_MSPooled",
        Computer startswith "M14USSPI", "SEA_UAT_SSPersistent",
        Computer startswith "M04PHCRI", "WEU_PRD_High_CRIMS_RMPooled",
        Computer startswith "M04PLCRI", "WEU_PRD_Low_CRIMS_RMPooled",
        Computer startswith "M04PMCRI", "WEU_PRD_Med_CRIMS_RMPooled",
        Computer startswith "M04PMSNI", "WEU_PRD_MSPooled",
        Computer startswith "M04PSSPI", "WEU_PRD_SSPersistent",
        "Other"
    )
| summarize
    CUS_PRD_SSPersistent = dcountif(Computer, Hostpool == "CUS_PRD_SSPersistent"),
    EAS_PRD_MSPooled = dcountif(Computer, Hostpool == "EAS_PRD_MSPooled"),
    EAS_PRD_SSPersistent = dcountif(Computer, Hostpool == "EAS_PRD_SSPersistent"),
    EUS2_PRD_SSPersistent = dcountif(Computer, Hostpool == "EUS2_PRD_SSPersistent"),
    EUS2_UAT_SSPersistent = dcountif(Computer, Hostpool == "EUS2_UAT_SSPersistent"),
    NEU_DEV_SSPersistent = dcountif(Computer, Hostpool == "NEU_DEV_SSPersistent"),
    NEU_NPA_CRIMS_RMPooled = dcountif(Computer, Hostpool == "NEU_NPA_CRIMS_RMPooled"),
    NEU_NPB_CRIMS_RMPooled = dcountif(Computer, Hostpool == "NEU_NPB_CRIMS_RMPooled"),
    NEU_OAT_High_CRIMS_RMPooled = dcountif(Computer, Hostpool == "NEU_OAT_High_CRIMS_RMPooled"),
    NEU_OAT_Low_CRIMS_RMPooled = dcountif(Computer, Hostpool == "NEU_OAT_Low_CRIMS_RMPooled"),
    NEU_OAT_Med_CRIMS_RMPooled = dcountif(Computer, Hostpool == "NEU_OAT_Med_CRIMS_RMPooled"),
    NEU_PRD_ADM_RMPooled = dcountif(Computer, Hostpool == "NEU_PRD_ADM_RMPooled"),
    NEU_PRD_High_CRIMS_RMPooled = dcountif(Computer, Hostpool == "NEU_PRD_High_CRIMS_RMPooled"),
    NEU_PRD_Low_CRIMS_RMPooled = dcountif(Computer, Hostpool == "NEU_PRD_Low_CRIMS_RMPooled"),
    NEU_PRD_Med_CRIMS_RMPooled = dcountif(Computer, Hostpool == "NEU_PRD_Med_CRIMS_RMPooled"),
    NEU_PRD_MSPooled = dcountif(Computer, Hostpool == "NEU_PRD_MSPooled"),
    NEU_PRD_SSPersistent = dcountif(Computer, Hostpool == "NEU_PRD_SSPersistent"),
    NEU_Prod_Quantum_RMPooled = dcountif(Computer, Hostpool == "NEU_Prod_Quantum_RMPooled"),
    NEU_TST_MSPooled = dcountif(Computer, Hostpool == "NEU_TST_MSPooled"),
    NEU_TST_SSPersistent = dcountif(Computer, Hostpool == "NEU_TST_SSPersistent"),
    NEU_UAT_MULTISESSION = dcountif(Computer, Hostpool == "NEU_UAT_MULTISESSION"),
    NEU_UAT_Quantum_RMPooled = dcountif(Computer, Hostpool == "NEU_UAT_Quantum_RMPooled"),
    NEU_UAT_SSPersistent = dcountif(Computer, Hostpool == "NEU_UAT_SSPersistent"),
    SEA_PRD_MSPooled = dcountif(Computer, Hostpool == "SEA_PRD_MSPooled"),
    SEA_PRD_SSPersistent = dcountif(Computer, Hostpool == "SEA_PRD_SSPersistent"),
    SEA_UAT_MSPooled = dcountif(Computer, Hostpool == "SEA_UAT_MSPooled"),
    SEA_UAT_SSPersistent = dcountif(Computer, Hostpool == "SEA_UAT_SSPersistent"),
    WEU_PRD_High_CRIMS_RMPooled = dcountif(Computer, Hostpool == "WEU_PRD_High_CRIMS_RMPooled"),
    WEU_PRD_Low_CRIMS_RMPooled = dcountif(Computer, Hostpool == "WEU_PRD_Low_CRIMS_RMPooled"),
    WEU_PRD_Med_CRIMS_RMPooled = dcountif(Computer, Hostpool == "WEU_PRD_Med_CRIMS_RMPooled"),
    WEU_PRD_MSPooled = dcountif(Computer, Hostpool == "WEU_PRD_MSPooled"),
    WEU_PRD_SSPersistent = dcountif(Computer, Hostpool == "WEU_PRD_SSPersistent"),
    Others = dcountif(Computer, Hostpool == "Other")
    by bin(TimeGenerated, 1h)
| sort by TimeGenerated desc



let AnalyticsQuery =
let Source = Json.Document(Web.Contents("https://api.loganalytics.io/v1/workspaces/ce4e1e84-3765-4cfe-ac40-5de8d7633df4/query", 
[Query=[#"query"="Heartbeat
| where TimeGenerated >= ago(30d)
| extend 
    Hostpool = case(
        Computer startswith ""M09PSSPG"", ""CUS_PRD_SSPersistent"",
        Computer startswith ""M13PMSNI"", ""EAS_PRD_MSPooled"",
        Computer startswith ""M13PSSPI"", ""EAS_PRD_SSPersistent"",
        Computer startswith ""M06PSSPG"", ""EUS2_PRD_SSPersistent"",
        Computer startswith ""M06USSPG"", ""EUS2_UAT_SSPersistent"",
        Computer startswith ""M01DDEVT"", ""NEU_DEV_SSPersistent"",
        Computer startswith ""M01DVLDT"", ""NEU_DEV_SSPersistent"",
        Computer startswith ""M01NACRI"", ""NEU_NPA_CRIMS_RMPooled"",
        Computer startswith ""M01NBCRI"", ""NEU_NPB_CRIMS_RMPooled"",
        Computer startswith ""M01OHCRI"", ""NEU_OAT_High_CRIMS_RMPooled"",
        Computer startswith ""M01OLCRI"", ""NEU_OAT_Low_CRIMS_RMPooled"",
        Computer startswith ""M01OMCRI"", ""NEU_OAT_Med_CRIMS_RMPooled"",
        Computer startswith ""M01PADM"", ""NEU_PRD_ADM_RMPooled"",
        Computer startswith ""M01PHCRI"", ""NEU_PRD_High_CRIMS_RMPooled"",
        Computer startswith ""M01PLCRI"", ""NEU_PRD_Low_CRIMS_RMPooled"",
        Computer startswith ""M01PMCRI"", ""NEU_PRD_Med_CRIMS_RMPooled"",
        Computer startswith ""M01PMSNI"", ""NEU_PRD_MSPooled"",
        Computer startswith ""M01PSSPI"", ""NEU_PRD_SSPersistent"",
        Computer startswith ""M01PQNT"", ""NEU_Prod_Quantum_RMPooled"",
        Computer startswith ""M01TMSNI"", ""NEU_TST_MSPooled"",
        Computer startswith ""M01TSSPI"", ""NEU_TST_SSPersistent"",
        Computer startswith ""M01UMSNI"", ""NEU_UAT_MULTISESSION"",
        Computer startswith ""M01UQNT"", ""NEU_UAT_Quantum_RMPooled"",
        Computer startswith ""M01USSPI"", ""NEU_UAT_SSPersistent"",
        Computer startswith ""M14PMSNI"", ""SEA_PRD_MSPooled"",
        Computer startswith ""M14PSSPI"", ""SEA_PRD_SSPersistent"",
        Computer startswith ""M14UMSNI"", ""SEA_UAT_MSPooled"",
        Computer startswith ""M14USSPI"", ""SEA_UAT_SSPersistent"",
        Computer startswith ""M04PHCRI"", ""WEU_PRD_High_CRIMS_RMPooled"",
        Computer startswith ""M04PLCRI"", ""WEU_PRD_Low_CRIMS_RMPooled"",
        Computer startswith ""M04PMCRI"", ""WEU_PRD_Med_CRIMS_RMPooled"",
        Computer startswith ""M04PMSNI"", ""WEU_PRD_MSPooled"",
        Computer startswith ""M04PSSPI"", ""WEU_PRD_SSPersistent"",
        ""Other""
    )
| summarize
    CUS_PRD_SSPersistent = dcountif(Computer, Hostpool == ""CUS_PRD_SSPersistent""),
    EAS_PRD_MSPooled = dcountif(Computer, Hostpool == ""EAS_PRD_MSPooled""),
    EAS_PRD_SSPersistent = dcountif(Computer, Hostpool == ""EAS_PRD_SSPersistent""),
    EUS2_PRD_SSPersistent = dcountif(Computer, Hostpool == ""EUS2_PRD_SSPersistent""),
    EUS2_UAT_SSPersistent = dcountif(Computer, Hostpool == ""EUS2_UAT_SSPersistent""),
    NEU_DEV_SSPersistent = dcountif(Computer, Hostpool == ""NEU_DEV_SSPersistent""),
    NEU_NPA_CRIMS_RMPooled = dcountif(Computer, Hostpool == ""NEU_NPA_CRIMS_RMPooled""),
    NEU_NPB_CRIMS_RMPooled = dcountif(Computer, Hostpool == ""NEU_NPB_CRIMS_RMPooled""),
    NEU_OAT_High_CRIMS_RMPooled = dcountif(Computer, Hostpool == ""NEU_OAT_High_CRIMS_RMPooled""),
    NEU_OAT_Low_CRIMS_RMPooled = dcountif(Computer, Hostpool == ""NEU_OAT_Low_CRIMS_RMPooled""),
    NEU_OAT_Med_CRIMS_RMPooled = dcountif(Computer, Hostpool == ""NEU_OAT_Med_CRIMS_RMPooled""),
    NEU_PRD_ADM_RMPooled = dcountif(Computer, Hostpool == ""NEU_PRD_ADM_RMPooled""),
    NEU_PRD_High_CRIMS_RMPooled = dcountif(Computer, Hostpool == ""NEU_PRD_High_CRIMS_RMPooled""),
    NEU_PRD_Low_CRIMS_RMPooled = dcountif(Computer, Hostpool == ""NEU_PRD_Low_CRIMS_RMPooled""),
    NEU_PRD_Med_CRIMS_RMPooled = dcountif(Computer, Hostpool == ""NEU_PRD_Med_CRIMS_RMPooled""),
    NEU_PRD_MSPooled = dcountif(Computer, Hostpool == ""NEU_PRD_MSPooled""),
    NEU_PRD_SSPersistent = dcountif(Computer, Hostpool == ""NEU_PRD_SSPersistent""),
    NEU_Prod_Quantum_RMPooled = dcountif(Computer, Hostpool == ""NEU_Prod_Quantum_RMPooled""),
    NEU_TST_MSPooled = dcountif(Computer, Hostpool == ""NEU_TST_MSPooled""),
    NEU_TST_SSPersistent = dcountif(Computer, Hostpool == ""NEU_TST_SSPersistent""),
    NEU_UAT_MULTISESSION = dcountif(Computer, Hostpool == ""NEU_UAT_MULTISESSION""),
    NEU_UAT_Quantum_RMPooled = dcountif(Computer, Hostpool == ""NEU_UAT_Quantum_RMPooled""),
    NEU_UAT_SSPersistent = dcountif(Computer, Hostpool == ""NEU_UAT_SSPersistent""),
    SEA_PRD_MSPooled = dcountif(Computer, Hostpool == ""SEA_PRD_MSPooled""),
    SEA_PRD_SSPersistent = dcountif(Computer, Hostpool == ""SEA_PRD_SSPersistent""),
    SEA_UAT_MSPooled = dcountif(Computer, Hostpool == ""SEA_UAT_MSPooled""),
    SEA_UAT_SSPersistent = dcountif(Computer, Hostpool == ""SEA_UAT_SSPersistent""),
    WEU_PRD_High_CRIMS_RMPooled = dcountif(Computer, Hostpool == ""WEU_PRD_High_CRIMS_RMPooled""),
    WEU_PRD_Low_CRIMS_RMPooled = dcountif(Computer, Hostpool == ""WEU_PRD_Low_CRIMS_RMPooled""),
    WEU_PRD_Med_CRIMS_RMPooled = dcountif(Computer, Hostpool == ""WEU_PRD_Med_CRIMS_RMPooled""),
    WEU_PRD_MSPooled = dcountif(Computer, Hostpool == ""WEU_PRD_MSPooled""),
    WEU_PRD_SSPersistent = dcountif(Computer, Hostpool == ""WEU_PRD_SSPersistent""),
    Others = dcountif(Computer, Hostpool == ""Other"")
    by bin(TimeGenerated, 1h)
| sort by TimeGenerated desc
",#"x-ms-app"="OmsAnalyticsPBI",#"prefer"="ai.response-thinning=true"],Timeout=#duration(0,0,4,0)])),
TypeMap = #table(
{ "AnalyticsTypes", "Type" }, 
{ 
{ "string",   Text.Type },
{ "int",      Int32.Type },
{ "long",     Int64.Type },
{ "real",     Double.Type },
{ "timespan", Duration.Type },
{ "datetime", DateTimeZone.Type },
{ "bool",     Logical.Type },
{ "guid",     Text.Type },
{ "dynamic",  Text.Type }
}),
DataTable = Source[tables]{0},
Columns = Table.FromRecords(DataTable[columns]),
ColumnsWithType = Table.Join(Columns, {"type"}, TypeMap , {"AnalyticsTypes"}),
Rows = Table.FromRows(DataTable[rows], Columns[name]), 
Table = Table.TransformColumnTypes(Rows, Table.ToList(ColumnsWithType, (c) => { c{0}, c{3}}))
in
Table
in AnalyticsQuery


(device.manufacturer -eq "Microsoft Corporation") and (device.model -eq "Virtual Machine") and (device.operatingSystemSKU -eq "ServerRdsh")





resources
| where ['type'] == "microsoft.compute/virtualmachines"
| extend 
    Hostpool = case(
        name contains "IMG", "Gold Images",
        name startswith "M04PCRIMS", "Crims Images",
        name startswith "M04CRIMS1", "Crims Images",
        name startswith "NMW-", "Nerdio Helper VM",
        "Other"
    )
// Filter by subscription IDs with placeholder comments for each
| where subscriptionId in (
    // Subscription for Production Environment
    "35ad321e-e46e-4c1c-a919-38b0fafbacdd",
    // Subscription for Development and Testing
    "58cb357e-51af-4f62-8982-a8c2b9059362",
    // Subscription for Azure Virtual Desktop (AVD)
    "031f411c-34a6-49ea-a4fe-0be328271783",
    // Subscription for Backup and Recovery
    "6c05505a-2a53-46a1-a54c-d463f021bcdc",
    // Subscription for Networking and Security
    "23bcd608-7846-4fe2-a900-fd2220458d84",
    // Subscription for Shared Services
    "5e0dd0c1-0273-41f3-8a68-63a549fc300e",
    // Subscription for Application Hosting
    "d0440ed0-d440-456e-bf57-e6514e3dab37",
    // Subscription for End User Devices
    "01f03a19-5500-482a-b480-3bb664e0ebc2",
    // Subscription for Legacy Systems
    "8d14bfce-8436-4954-8bbd-e5ffc4eae668"
)
// Exclude VMs with the tag NMW_ARM_HOST_POOL
| where Hostpool == "Other"
| where not(todynamic(tags) has "NMW_ARM_HOST_POOL")




let
    // Set the start date to 365 days ago and the end date to today
    StartDate = Date.AddDays(DateTime.Date(DateTime.LocalNow()), -365), 
    EndDate = DateTime.Date(DateTime.LocalNow()), 
    
    // Generate a list of dates from the StartDate to EndDate
    DatesList = List.Dates(StartDate, Duration.Days(EndDate - StartDate) + 1, #duration(1,0,0,0)),
    
    // Convert the list to a table
    #"Converted to Table" = Table.FromList(DatesList, Splitter.SplitByNothing(), {"Date"}, null, ExtraValues.Error),
    
    // Change column type to date
    #"Changed Type" = Table.TransformColumnTypes(#"Converted to Table", {{"Date", type date}}),
    
    // Add columns for Day of Week (Name and Number)
    #"Inserted Day of Week Name" = Table.AddColumn(#"Changed Type", "Day of Week Name", each Date.ToText([Date], "dddd"), type text),
    #"Inserted Day of Week Number" = Table.AddColumn(#"Inserted Day of Week Name", "Day of Week Number", each Date.DayOfWeek([Date], Day.Monday) + 1, Int64.Type),
    
    // Add column for Start of Week (starting from Monday)
    #"Inserted Start of Week" = Table.AddColumn(#"Inserted Day of Week Number", "Start of Week", each Date.StartOfWeek([Date], Day.Monday), type date),
    
    // Add columns for Month Name
    #"Inserted Month Name" = Table.AddColumn(#"Inserted Start of Week", "Month Name", each Date.MonthName([Date]), type text),
    
    // Add column for Day of Month
    #"Inserted Day of Month" = Table.AddColumn(#"Inserted Month Name", "Day of Month", each Date.Day([Date]), Int64.Type),
    
    // Add column for Is Weekday (True if Monday-Friday, False otherwise)
    #"Inserted Is Weekday" = Table.AddColumn(#"Inserted Day of Month", "Is Weekday", each if Date.DayOfWeek([Date], Day.Monday) < 5 then true else false, type logical),
    
    // Add column for Is Weekend (True if Saturday or Sunday, False otherwise)
    #"Inserted Is Weekend" = Table.AddColumn(#"Inserted Is Weekday", "Is Weekend", each not [Is Weekday], type logical),
    
    // Add column for Relative Day (from today, 0 = today, -1 = yesterday, etc.)
    #"Inserted Relative Day" = Table.AddColumn(#"Inserted Is Weekend", "Relative Day", each Duration.Days(Duration.From([Date] - EndDate)), Int64.Type),
    
    // Add column for Week of the Month
    #"Inserted Week of Month" = Table.AddColumn(#"Inserted Relative Day", "Week of Month", 
        each Number.RoundUp((Date.Day([Date]) + Date.DayOfWeek(Date.StartOfMonth([Date]), Day.Monday)) / 7), Int64.Type),
    
    // Reorder columns for better readability
    #"Reordered Columns" = Table.ReorderColumns(#"Inserted Week of Month", 
        {"Date", "Day of Week Name", "Day of Week Number", "Start of Week", 
         "Month Name", "Day of Month", "Week of Month", "Is Weekday", "Is Weekend", "Relative Day"})
in
    #"Reordered Columns"






let
    // Set the start date to 365 days ago and the end date to today
    StartDate = Date.AddDays(DateTime.Date(DateTime.LocalNow()), -365), 
    EndDate = DateTime.Date(DateTime.LocalNow()), 
    
    // Generate a list of dates from the StartDate to EndDate
    DatesList = List.Dates(StartDate, Duration.Days(EndDate - StartDate) + 1, #duration(1,0,0,0)),
    
    // Convert the list to a table
    #"Converted to Table" = Table.FromList(DatesList, Splitter.SplitByNothing(), {"Date"}, null, ExtraValues.Error),
    
    // Change column type to date
    #"Changed Type" = Table.TransformColumnTypes(#"Converted to Table", {{"Date", type date}}),
    
    // Add columns for Day of Week (Name and Number)
    #"Inserted Day of Week Name" = Table.AddColumn(#"Changed Type", "Day of Week Name", each Date.ToText([Date], "dddd"), type text),
    #"Inserted Day of Week Number" = Table.AddColumn(#"Inserted Day of Week Name", "Day of Week Number", each Date.DayOfWeek([Date], Day.Monday) + 1, Int64.Type),
    
    // Add column for Start of Week (starting from Monday)
    #"Inserted Start of Week" = Table.AddColumn(#"Inserted Day of Week Number", "Start of Week", each Date.StartOfWeek([Date], Day.Monday), type date),
    
    // Add columns for Month Name
    #"Inserted Month Name" = Table.AddColumn(#"Inserted Start of Week", "Month Name", each Date.MonthName([Date]), type text),
    
    // Add column for Day of Month
    #"Inserted Day of Month" = Table.AddColumn(#"Inserted Month Name", "Day of Month", each Date.Day([Date]), Int64.Type),
    
    // Add column for Is Weekday (True if Monday-Friday, False otherwise)
    #"Inserted Is Weekday" = Table.AddColumn(#"Inserted Day of Month", "Is Weekday", each if Date.DayOfWeek([Date], Day.Monday) < 5 then true else false, type logical),
    
    // Add column for Is Weekend (True if Saturday or Sunday, False otherwise)
    #"Inserted Is Weekend" = Table.AddColumn(#"Inserted Is Weekday", "Is Weekend", each not [Is Weekday], type logical),
    
    // Add column for Relative Day (from today, 0 = today, -1 = yesterday, etc.)
    #"Inserted Relative Day" = Table.AddColumn(#"Inserted Is Weekend", "Relative Day", each Duration.Days(Duration.From([Date] - EndDate)), Int64.Type),
    
    // Reorder columns for better readability
    #"Reordered Columns" = Table.ReorderColumns(#"Inserted Relative Day", 
        {"Date", "Day of Week Name", "Day of Week Number", "Start of Week", 
         "Month Name", "Day of Month", "Is Weekday", "Is Weekend", "Relative Day"})
in
    #"Reordered Columns"




resources
| where ['type'] == "microsoft.compute/virtualmachines" 
| extend 
    Hostpool = case(
        name startswith "M09PSSPG", "CUS_PRD_SSPersistent",
        name startswith "M13PMSNI", "EAS_PRD_MSPooled",
        name startswith "M13PSSPI", "EAS_PRD_SSPersistent",
        name startswith "M06PSSPG", "EUS2_PRD_SSPersistent",
        name startswith "M06USSPG", "EUS2_UAT_SSPersistent",
        name startswith "M01DDEVT", "NEU_DEV_SSPersistent",
        name startswith "M01DVLDT", "NEU_DEV_SSPersistent",
        name startswith "M01NACRI", "NEU_NPA_CRIMS_RMPooled",
        name startswith "M01NBCRI", "NEU_NPB_CRIMS_RMPooled",
        name startswith "M01OHCRI", "NEU_OAT_High_CRIMS_RMPooled",
        name startswith "M01OLCRI", "NEU_OAT_Low_CRIMS_RMPooled",
        name startswith "M01OMCRI", "NEU_OAT_Med_CRIMS_RMPooled",
        name startswith "M01PADM", "NEU_PRD_ADM_RMPooled",
        name startswith "M01PHCRI", "NEU_PRD_High_CRIMS_RMPooled",
        name startswith "M01PLCRI", "NEU_PRD_Low_CRIMS_RMPooled",
        name startswith "M01PMCRI", "NEU_PRD_Med_CRIMS_RMPooled",
        name startswith "M01PMSNI", "NEU_PRD_MSPooled",
        name startswith "M01PSSPI", "NEU_PRD_SSPersistent",
        name startswith "M01PQNT", "NEU_Prod_Quantum_RMPooled",
        name startswith "M01TMSNI", "NEU_TST_MSPooled",
        name startswith "M01TSSPI", "NEU_TST_SSPersistent",
        name startswith "M01UMSNI", "NEU_UAT_MULTISESSION",
        name startswith "M01UQNT", "NEU_UAT_Quantum_RMPooled",
        name startswith "M01USSPI", "NEU_UAT_SSPersistent",
        name startswith "M14PMSNI", "SEA_PRD_MSPooled",
        name startswith "M14PSSPI", "SEA_PRD_SSPersistent",
        name startswith "M14UMSNI", "SEA_UAT_MSPooled",
        name startswith "M14USSPI", "SEA_UAT_SSPersistent",
        name startswith "M04PHCRI", "WEU_PRD_High_CRIMS_RMPooled",
        name startswith "M04PLCRI", "WEU_PRD_Low_CRIMS_RMPooled",
        name startswith "M04PMCRI", "WEU_PRD_Med_CRIMS_RMPooled",
        name startswith "M04PMSNI", "WEU_PRD_MSPooled",
        name startswith "M04PSSPI", "WEU_PRD_SSPersistent",
        "Other"
    )
| where Hostpool == "Other"
| where subscriptionId in (
    "35ad321e-e46e-4c1c-a919-38b0fafbacdd",
    "58cb357e-51af-4f62-8982-a8c2b9059362",
    "031f411c-34a6-49ea-a4fe-0be328271783",
    "6c05505a-2a53-46a1-a54c-d463f021bcdc",
    "23bcd608-7846-4fe2-a900-fd2220458d84",
    "5e0dd0c1-0273-41f3-8a68-63a549fc300e",
    "d0440ed0-d440-456e-bf57-e6514e3dab37",
    "01f03a19-5500-482a-b480-3bb664e0ebc2",
    "8d14bfce-8436-4954-8bbd-e5ffc4eae668"
)



# Function to create and apply a registry entry
function Set-RegistryValue {
    param (
        [string]$Path,
        [string]$ValueName,
        [string]$ValueType,
        [string]$ValueData
    )

    try {
        # Ensure the registry path exists
        if (-not (Test-Path $Path)) {
            New-Item -Path $Path -Force | Out-Null
        }

        # Set the registry value
        New-ItemProperty -Path $Path -Name $ValueName -PropertyType $ValueType -Value $ValueData -Force | Out-Null

        Write-Host "Successfully set $ValueName in $Path to $ValueData" -ForegroundColor Green
    } catch {
        Write-Host "Failed to set $ValueName" -ForegroundColor Red
    }
}

# Array of registry entries
$regEntries = @(
    @{
        Path      = "HKCU:\Control Panel\Desktop"
        ValueName = "MenuShowDelay"
        ValueType = "String"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
        ValueName = "SubscribedContent-338393Enabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
        ValueName = "SubscribedContent-353696Enabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
        ValueName = "SubscribedContent-338388Enabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
        ValueName = "SubscribedContent-338389Enabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
        ValueName = "SystemPaneSuggestionsEnabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Search"
        ValueName = "BingSearchEnabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\SearchSettings"
        ValueName = "IsAADCloudSearchEnabled"
        ValueType = "DWord"
        ValueData = "0"
    }
)

# Loop through each registry entry and apply it
foreach ($entry in $regEntries) {
    Set-RegistryValue -Path $entry.Path -ValueName $entry.ValueName -ValueType $entry.ValueType -ValueData $entry.ValueData
}

Write-Host "All registry entries have been successfully applied."


Get-AppxPackage | Where-Object { $_.PackageFullName -like "*MicrosoftWindows.Client.CBS*" } | ForEach-Object { Reset-AppxPackage -Package $_.PackageFullName }


MicrosoftWindows.Client.CBS_1000.22700.1055.0_x64__cw5n1h2txyewy


# Function to create and apply a registry entry
function Set-RegistryValue {
    param (
        [string]$Path,
        [string]$ValueName,
        [string]$ValueType,
        [string]$ValueData
    )

    try {
        # Ensure the registry path exists
        if (-not (Test-Path $Path)) {
            New-Item -Path $Path -Force | Out-Null
        }

        # Set the registry value
        New-ItemProperty -Path $Path -Name $ValueName -PropertyType $ValueType -Value $ValueData -Force | Out-Null

        Write-Host "Successfully set $ValueName in $Path to $ValueData" -ForegroundColor Green
    } catch {
        Write-Host "Failed to set $ValueName" -ForegroundColor Red
    }
}

# Array of registry entries
$regEntries = @(
    @{
        Path      = "HKCU:\Control Panel\Desktop"
        ValueName = "MenuShowDelay"
        ValueType = "String"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
        ValueName = "SubscribedContent-338393Enabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
        ValueName = "SubscribedContent-353696Enabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
        ValueName = "SubscribedContent-338388Enabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
        ValueName = "SubscribedContent-338389Enabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
        ValueName = "SystemPaneSuggestionsEnabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Search"
        ValueName = "BingSearchEnabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\SearchSettings"
        ValueName = "IsAADCloudSearchEnabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"
        ValueName = "Start_NotifyNewApps"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Feeds"
        ValueName = "ShellFeedsTaskbarViewMode"
        ValueType = "DWord"
        ValueData = "2"
    }
)

# Loop through each registry entry and apply it
foreach ($entry in $regEntries) {
    Set-RegistryValue -Path $entry.Path -ValueName $entry.ValueName -ValueType $entry.ValueType -ValueData $entry.ValueData
}

Write-Host "All registry entries have been successfully applied." -ForegroundColor Cyan




function Save-ZipModules {
    param(
        [array]$Modules = @(), # Array of hashtables or a single hashtable, e.g., @{Name="Module1"; Version="1.0.0"} or @(@{Name="Module1"; Version="1.0.0"})
        [string]$DestinationPath,
        [switch]$DeleteExistingContents
    )

    # Normalize input: If a single hashtable is provided, wrap it in an array
    if ($Modules -isnot [array]) {
        $Modules = @($Modules)
    }

    # Append "\Modules" to the DestinationPath
    $ModulesPath = Join-Path -Path $DestinationPath -ChildPath "Modules"

    # Check if the optional switch is set to delete existing contents
    if ($DeleteExistingContents) {
        if (Test-Path -Path $ModulesPath) {
            # Clear out the existing contents (folders and subfolders)
            Remove-Item -Path $ModulesPath -Recurse -Force
        }
    }

    # Validate that DestinationPath exists, if it does not, create it
    if (-not (Test-Path -Path $ModulesPath)) {
        New-Item -ItemType Directory -Path $ModulesPath | Out-Null
    }

    # Iterate over each module in the Modules array
    foreach ($module in $Modules) {
        $ModuleName = $module.Name
        $ModuleVersion = $module.Version

        # Validate the module exists; if it does, continue
        $foundModule = Find-Module -Name $ModuleName -RequiredVersion $ModuleVersion
        if (-not $foundModule) {
            Write-Error "Module $ModuleName version $ModuleVersion not found in repository."
            continue
        }

        # Save the module to the DestinationPath
        Save-Module -Name $ModuleName -RequiredVersion $ModuleVersion -Path $ModulesPath
    }

    # Create a Zip file of the folders in the DestinationPath\Modules path
    $ZipFilePath = Join-Path -Path $DestinationPath -ChildPath "Modules.zip"
    Compress-Archive -Path (Join-Path -Path $ModulesPath -ChildPath "*") -DestinationPath $ZipFilePath -Force

    Write-Host "Modules have been saved to $ModulesPath and zipped to $ZipFilePath."
}

# Example script to call the function with different inputs

# Single module input
$Module1 = @{Name="Module1"; Version="1.0.0"}
Save-ZipModules -Modules $Module1 -DestinationPath "C:\MyModules" -DeleteExistingContents

# Multiple modules input
$Modules = @(
    @{Name="Module2"; Version="2.0.0"},
    @{Name="Module3"; Version="3.1.0"}
)
Save-ZipModules -Modules $Modules -DestinationPath "C:\MyOtherModules"




# Unblock all files in the PowerShellGet module
Get-ChildItem -Path "C:\Program Files\WindowsPowerShell\Modules\PowerShellGet" -Recurse |
    Unblock-File


Import-Module : Could not load file or assembly 'file:///C:\Program
Files\WindowsPowerShell\Modules\PackageManagement\1.4.8.1\fullclr\Microsoft.PackageManagement.dll' or one of its
dependencies. Operation is not supported. (Exception from HRESULT: 0x80131515)
At line:1 char:1
+ Import-Module PowerShellGet -Scope Global -Force
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [Import-Module], FileLoadException
    + FullyQualifiedErrorId : System.IO.FileLoadException,Microsoft.PowerShell.Commands.ImportModuleCommand


Find-Module -Name PowerShellGet | Select Name, Version, Repository



Get-PSRepository

Name                      InstallationPolicy   SourceLocation
----                      ------------------   --------------
PSGallery                 Untrusted            https://www.powershellgallery.com/api/v2



PackageManagement\Get-Package : The term 'PackageManagement\Get-Package' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the 
name, or if a path was included, verify that the path is correct and try again.
At C:\Program Files\WindowsPowerShell\Modules\PowerShellGet\2.2.5\PSModule.psm1:9445 char:9
+         PackageManagement\Get-Package @PSBoundParameters | Microsoft. ...
+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (PackageManagement\Get-Package:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 
Get-Content : Cannot find path 'C:\Windows\system32\azlist.txt' because it does not exist.
At line:7 char:1
+ Get-Content .\azlist.txt | ForEach-Object {
+ ~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (C:\Windows\system32\azlist.txt:String) [Get-Content], ItemNotFoundException
    + FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.GetContentCommand


# Run as Administrator

# Remove the specific version of PackageManagement
Remove-Item -Path "C:\Program Files\WindowsPowerShell\Modules\PackageManagement\1.4.8.1" -Recurse -Force

# Verify the removal
Get-Module -ListAvailable -Name PackageManagement




PS C:\Windows\system32> Get-Module -ListAvailable -Name PackageManagement


    Directory: C:\Program Files\WindowsPowerShell\Modules


ModuleType Version    Name                                ExportedCommands                                                                                                                    
---------- -------    ----                                ----------------                                                                                                                    
Script     1.4.8.1    PackageManagement                   {Find-Package, Get-Package, Get-PackageProvider, Get-PackageSource...}                                                              
Binary     1.0.0.1    PackageManagement                   {Find-Package, Get-Package, Get-PackageProvider, Get-PackageSource...}  



Name                      InstallationPolicy   SourceLocation
----                      ------------------   --------------
PSGallery                 Untrusted            https://www.powershellgallery.com/api/v2



Copy-Item -Path "C:\Temp\Modules\*" -Destination "C:\Program Files\WindowsPowerShell\Modules" -Recurse


# Specify the destination path for saving modules
$DestinationPath = "C:\Temp\Modules"

# Save PowerShellGet and NuGet dependencies
Save-Module -Name PowerShellGet -Path $DestinationPath
Save-Module -Name PackageManagement -Path $DestinationPath





Uninstall-Module -Name Az -AllVersions -Force
Get-Module -ListAvailable -Name Az.* | ForEach-Object { Uninstall-Module -Name $_.Name -AllVersions -Force }

Install-Module -Name Az -RequiredVersion 10.2.0 -AllowClobber

Import-Module -Name Az -RequiredVersion 10.2.0

Register-PSRepository -Name "PSGallery" -SourceLocation "https://www.powershellgallery.com/api/v2" -InstallationPolicy Trusted






Failed to assign role: Method 'get_SerializationSettings' in type 'Microsoft.Azure.Management.Internal.Resources.ResourceManagementClient' from assembly 'Microsoft.Azure.PowerShell.Clients.ResourceManager, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' does not have an implementation.


WARNING: Unable to acquire token for tenant 'organizations' with error 'InteractiveBrowserCredential authentication failed: A window handle must be configured. See https://aka.ms/msal-net-wam#parent-window-handles'
WARNING: Please run 'Connect-AzAccount -DeviceCode' if browser is not supported in this session.
Connect-AzAccount : InteractiveBrowserCredential authentication failed: A window handle must be configured. See https://aka.ms/msal-net-wam#parent-window-handles
At line:3 char:1
+ Connect-AzAccount -Subscription $Subscription
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : CloseError: (:) [Connect-AzAccount], AuthenticationFailedException
    + FullyQualifiedErrorId : Microsoft.Azure.Commands.Profile.ConnectAzureRmAccountCommand
 
New-AzRoleAssignment : Object reference not set to an instance of an object.
At line:5 char:1
+ New-AzRoleAssignment -ResourceName $AzureVMName -ResourceGroupName "r ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : CloseError: (:) [New-AzRoleAssignment], NullReferenceException
    + FullyQualifiedErrorId : Microsoft.Azure.Commands.Resources.NewAzureRoleAssignmentCommand


Method 'get_SerializationSettings' in type 'Microsoft.Azure.Management.Internal.Resources.ResourceManagementClient' from assembly 'Microsoft.Azure.PowerShell.Clients.ResourceManager, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' does not have an implementation.
Method 'get_SerializationSettings' in type 'Microsoft.Azure.Management.Internal.Resources.ResourceManagementClient' from assembly 'Microsoft.Azure.PowerShell.Clients.ResourceManager, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' does not have an implementation.
Method 'get_SerializationSettings' in type 'Microsoft.Azure.Management.Internal.Resources.ResourceManagementClient' from assembly 'Microsoft.Azure.PowerShell.Clients.ResourceManager, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' does not have an implementation.
System.Management.Automation.ParameterBindingValidationException: Cannot bind argument to parameter 'Context' because it is null.
   at System.Management.Automation.ParameterBinderBase.ValidateNullOrEmptyArgument(CommandParameterInternal parameter, CompiledCommandParameter parameterMetadata, Type argumentType, Object parameterValue, Boolean recurseIntoCollections)
   at System.Management.Automation.ParameterBinderBase.BindParameter(CommandParameterInternal parameter, CompiledCommandParameter parameterMetadata, ParameterBindingFlags flags)
   at System.Management.Automation.CmdletParameterBinderController.BindParameter(CommandParameterInternal argument, MergedCompiledCommandParameter parameter, ParameterBindingFlags flags)
   at System.Management.Automation.CmdletParameterBinderController.BindParameter(UInt32 parameterSets, CommandParameterInternal argument, MergedCompiledCommandParameter parameter, ParameterBindingFlags flags)
   at System.Management.Automation.CmdletParameterBinderController.BindParameters(UInt32 parameterSets, Collection`1 arguments)
   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParametersNoValidation(Collection`1 arguments)
   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParameters(Collection`1 arguments)
   at System.Management.Automation.CommandProcessor.BindCommandLineParameters()
   at System.Management.Automation.CommandProcessor.Prepare(IDictionary psDefaultParameterValues)
   at System.Management.Automation.CommandProcessorBase.DoPrepare(IDictionary psDefaultParameterValues)
   at System.Management.Automation.Internal.PipelineProcessor.Start(Boolean incomingStream)
   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)
   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)
   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)
   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)



# Ensure the PowerShellGet module is up to date
Install-Module -Name PowerShellGet -Force -AllowClobber

# Update all installed modules
Update-Module -Name Az -Force

# Verify the version of the Az module
Get-Module -Name Az -ListAvailable







Failed to assign role: Method 'get_SerializationSettings' in type 'Microsoft.Azure.Management.Internal.Resources.ResourceManagementClient' from assembly 'Microsoft.Azure.PowerShell.Clients.ResourceManager, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' does not have an implementation.

#description: Outputs specific Nerdio variables and assigns a role with error handling
#tags: Nerdio, Debug, RoleAssignment

Write-Output "DesktopUser: $DesktopUser"
Write-Output "AzureVMName: $AzureVMName"
Write-Output "AzureResourceGroupName: $AzureResourceGroupName"

try {
    # Attempt to assign the role
    Write-Output "Assigning 'Virtual Machine Administrator Login' role to $DesktopUser for VM $AzureVMName in resource group $AzureResourceGroupName..."
    New-AzRoleAssignment -ResourceName $AzureVMName -ResourceGroupName $AzureResourceGroupName -SignInName $DesktopUser -RoleDefinitionName "Virtual Machine Administrator Login" -ResourceType "Microsoft.Compute/virtualMachines"
    Write-Output "Role assignment successful."
} catch {
    # Output any errors to standard output
    Write-Output "Failed to assign role: $_"
}

### End Script ###



#description: Outputs specific Nerdio variables
#tags: Nerdio, Debug, Variables

Write-Output "DesktopUser: $DesktopUser"
Write-Output "AzureVMName: $AzureVMName"
Write-Output "AzureResourceGroupName: $AzureResourceGroupName"

New-AzRoleAssignment -ResourceName $AzureVMName -ResourceGroupName $AzureResourceGroupName -SignInName $DesktopUser -RoleDefinitionName "Virtual Machine Administrator Login" -ResourceType "Microsoft.Compute/virtualMachines"

### End Script ###


Install-Module -Name Az -AllowClobber -Scope CurrentUser
Import-Module -Name Az


New-AzRoleAssignment -ResourceName $AzureVMName -ResourceGroupName $AzureResourceGroupName -SignInName $DesktopUser -RoleDefinitionName "Virtual Machine Administrator Login" -ResourceType "Microsoft.Compute/virtualMachines"


Heartbeat
| extend NormalizedResourceGroup = tolower(ResourceGroup)  // Convert ResourceGroup to lowercase
| summarize MachineCount = dcount(Computer) by bin(TimeGenerated, 1h), NormalizedResourceGroup
| sort by TimeGenerated desc, NormalizedResourceGroup



Heartbeat
| summarize count() by ResourceGroup, bin(TimeGenerated, 1m)
| summarize avg(count_) by ResourceGroup, bin(TimeGenerated, 5m)
| order by TimeGenerated


Heartbeat
| summarize MachineCount = dcount(Computer) by bin(TimeGenerated, 1h)
| sort by TimeGenerated desc
 


New-AzRoleAssignment -ObjectId <objectId> -RoleDefinitionName <roleName> -Scope /subscriptions/<subscriptionId>/resourcegroups/<resourceGroupName>/providers/<providerName>/<resourceType>/<resourceSubType>/<resourceName>



Get-AzRoleDefinition | Where-Object { $_.Name -like "*Virtual Machine*" } | Format-Table -Property Name, IsCustom, Id



Get-AzRoleDefinition | Format-Table -Property Name, IsCustom, Id


#description: Outputs specific Nerdio variables
#tags: Nerdio, Debug, Variables

Write-Output "DesktopUser: $DesktopUser"
Write-Output "AzureVMName: $AzureVMName"
Write-Output "AzureResourceGroupName: $AzureResourceGroupName"
Write-Output "AzureSubscriptionId: $AzureSubscriptionId"

### End Script ###




#description: Outputs pre-populated Nerdio variables to standard output
#tags: Nerdio, Debug, Variables

<#
Notes:
This script outputs the values of all pre-populated Nerdio variables to the standard output.
It handles cases where certain variables may not be available in the current context.
#>

# Define a function to output variable values safely
function Output-Variable {
    param (
        [string]$VariableName,
        [object]$VariableValue
    )

    if ($null -ne $VariableValue) {
        Write-Output "$VariableName: $VariableValue"
    } else {
        Write-Output "$VariableName: Not available in this context"
    }
}

# Output each pre-populated variable
Output-Variable "HostPoolId" $HostPoolId
Output-Variable "HostPoolName" $HostPoolName
Output-Variable "AzureSubscriptionId" $AzureSubscriptionId
Output-Variable "AzureSubscriptionName" $AzureSubscriptionName
Output-Variable "AzureResourceGroupName" $AzureResourceGroupName
Output-Variable "AzureRegionName" $AzureRegionName
Output-Variable "AzureVMName" $AzureVMName
Output-Variable "ADUsername" $ADUsername
Output-Variable "ADPassword" $ADPassword
Output-Variable "DesktopUser" $DesktopUser

### End Script ###





https://drive.google.com/file/d/1i8z6Q7l7P7NgftLmEUSnoHGfqQzKhmHj/view?pli=1


# Set "MenuShowDelay" to "0"
$regEntry = [PSCustomObject]@{
    Path = "HKCU:\Control Panel\Desktop"
    ValueName = "MenuShowDelay"
    ValueType = "String"
    ValueData = "0"
}
$regEntries += $regEntry

# Disable "SubscribedContent-338393Enabled"
$regEntry = [PSCustomObject]@{
    Path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
    ValueName = "SubscribedContent-338393Enabled"
    ValueType = "DWord"
    ValueData = "0"
}
$regEntries += $regEntry

# Disable "SubscribedContent-353696Enabled"
$regEntry = [PSCustomObject]@{
    Path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
    ValueName = "SubscribedContent-353696Enabled"
    ValueType = "DWord"
    ValueData = "0"
}
$regEntries += $regEntry

# Disable "SubscribedContent-338388Enabled"
$regEntry = [PSCustomObject]@{
    Path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
    ValueName = "SubscribedContent-338388Enabled"
    ValueType = "DWord"
    ValueData = "0"
}
$regEntries += $regEntry

# Disable "SubscribedContent-338389Enabled"
$regEntry = [PSCustomObject]@{
    Path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
    ValueName = "SubscribedContent-338389Enabled"
    ValueType = "DWord"
    ValueData = "0"
}
$regEntries += $regEntry

# Disable "SystemPaneSuggestionsEnabled"
$regEntry = [PSCustomObject]@{
    Path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
    ValueName = "SystemPaneSuggestionsEnabled"
    ValueType = "DWord"
    ValueData = "0"
}
$regEntries += $regEntry

# Disable "BingSearchEnabled"
$regEntry = [PSCustomObject]@{
    Path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Search"
    ValueName = "BingSearchEnabled"
    ValueType = "DWord"
    ValueData = "0"
}
$regEntries += $regEntry

# Disable "IsAADCloudSearchEnabled"
$regEntry = [PSCustomObject]@{
    Path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\SearchSettings"
    ValueName = "IsAADCloudSearchEnabled"
    ValueType = "DWord"
    ValueData = "0"
}
$regEntries += $regEntry






# Removes the "New" tag on Start menu apps
$regEntry = [PSCustomObject]@{
Path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"
ValueName = "Start_NotifyNewApps"
ValueType = "DWord"
ValueData = "0"
}
$regEntries += $regEntry



check if these are showing on your SSP.
 
        "HivePath" = "HKCU:\Control Panel\Desktop"
 
        "KeyName" = "MenuShowDelay"
 
        "PropertyType" = "STRING"
 
        "PropertyValue" = "0"
 
 
        "HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
 
        "KeyName" = "SubscribedContent-338393Enabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 
        "HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
 
        "KeyName" = "SubscribedContent-353696Enabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 
        "HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
 
        "KeyName" = "SubscribedContent-338388Enabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 

       "HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
 
        "KeyName" = "SubscribedContent-338389Enabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 
        "HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
 
        "KeyName" = "SystemPaneSuggestionsEnabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 
         
"HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Search"
 
        "KeyName" = "BingSearchEnabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 
       
"HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\SearchSettings"
 
        "KeyName" = "IsAADCloudSearchEnabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"







The value of the following registry key:

Key: HKLM\Software\Microsoft\MSRDC\Policies
Type: REG_DWORD
Name: AutomaticUpdates


#description: Installs RSAT Active Directory DS-LDS Tools
#tags: Nerdio, RSAT, ActiveDirectory

<#
Notes:
This script installs the RSAT Active Directory DS-LDS Tools capability using the Add-WindowsCapability command.
Ensure that the system has internet access for downloading the feature.
#>

# Define the capability name as a string literal
$CapabilityName = "Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0"

# Attempt to add the Windows capability
Write-Output "Adding Windows capability: $CapabilityName..."
try {
    Add-WindowsCapability -Online -Name "$CapabilityName"
    Write-Output "Windows capability $CapabilityName added successfully."
} catch {
    Write-Output "Failed to add Windows capability $CapabilityName: $_"
    Exit 1
}

### End Script ###


Failed to validate script:
Line 19: Variable reference is not valid. ':' was not followed by a valid variable name character. Consider using ${} to delimit the name

#description: Installs RSAT Active Directory DS-LDS Tools
#tags: Nerdio, RSAT, ActiveDirectory

<#
Notes:
This script installs the RSAT Active Directory DS-LDS Tools capability using the Add-WindowsCapability command.
Ensure that the system has internet access for downloading the feature.
#>

# Define the capability name
$CapabilityName = "Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0"

# Attempt to add the Windows capability
Write-Output "Adding Windows capability: $CapabilityName..."
try {
    Add-WindowsCapability -Online -Name $CapabilityName
    Write-Output "Windows capability $CapabilityName added successfully."
} catch {
    Write-Output "Failed to add Windows capability $CapabilityName: $_"
    Exit 1
}

### End Script ###










#description: Updates the fDisabledAllowList registry key to 1
#tags: Nerdio, Registry, TerminalServices

<#
Notes:
This script changes the `fDisabledAllowList` registry key value in 
`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Terminal Server\TSAppAllowList` 
from `0` to `1`.
#>

# Define registry key details
$RegistryPath = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Terminal Server\TSAppAllowList"
$ValueName = "fDisabledAllowList"
$DesiredValue = 1  # New value to set

# Check if the registry path exists
Write-Output "Checking registry path: $RegistryPath"
if (-not (Test-Path $RegistryPath)) {
    Write-Output "Registry path not found: $RegistryPath. Exiting."
    Exit 1
}

# Check the current value of the registry key
try {
    $CurrentValue = Get-ItemProperty -Path $RegistryPath -Name $ValueName -ErrorAction Stop | Select-Object -ExpandProperty $ValueName
    Write-Output "Current value of $ValueName: $CurrentValue"
} catch {
    Write-Output "Registry key $ValueName not found. Exiting."
    Exit 1
}

# Update the value if it is not already set to the desired value
if ($CurrentValue -ne $DesiredValue) {
    Write-Output "Updating $ValueName to $DesiredValue..."
    try {
        Set-ItemProperty -Path $RegistryPath -Name $ValueName -Value $DesiredValue
        Write-Output "$ValueName updated successfully to $DesiredValue."
    } catch {
        Write-Output "Failed to update $ValueName: $_"
        Exit 1
    }
} else {
    Write-Output "$ValueName is already set to $DesiredValue. No action needed."
}

### End Script ###










https://icofx.ro/


dism /online /add-capability /capabilityname:Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0 /source:C:\FoDPackages /limitaccess



dism /online /get-capabilities | findstr "Rsat.ActiveDirectory.DS-LDS.Tools"


Add-WindowsCapability -Online -Name Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0


nmw-app-kv-fwjv4wn75m4qg


Operation returned an invalid status code 'Forbidden'
Code: Forbidden
Message: Client address is not authorized and caller was ignored because bypass is set to None
Client address: 108.141.18.87
Caller: appid=eb605535-c9fe-4771-bd01-458f4ce9f627;oid=41a4ba88-e620-416e-9b9f-33b9f34b45f8
Vault: nmw-app-kv-fwjv4wn75m4qg;location=westeurope
Operation returned an invalid status code 'Forbidden'
Code: Forbidden
Message: Client address is not authorized and caller was ignored because bypass is set to None
Client address: 108.141.18.87
Caller: appid=eb605535-c9fe-4771-bd01-458f4ce9f627;oid=41a4ba88-e620-416e-9b9f-33b9f34b45f8
Vault: nmw-app-kv-fwjv4wn75m4qg;location=westeurope
The remote server returned an error: (403) Forbidden.
System.Management.Automation.CommandNotFoundException: The term 'C:\Users\ContainerAdministrator\AppData\Local\Temp\fde5216d-3ef1-4037-956d-dc72fe4a1207.ps1' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
   at System.Management.Automation.CommandDiscovery.LookupCommandInfo(String commandName, CommandTypes commandTypes, SearchResolutionOptions searchResolutionOptions, CommandOrigin commandOrigin, ExecutionContext context)
   at System.Management.Automation.CommandDiscovery.LookupCommandProcessor(String commandName, CommandOrigin commandOrigin, Nullable`1 useLocalScope)
   at System.Management.Automation.ExecutionContext.CreateCommand(String command, Boolean dotSource)
   at System.Management.Automation.PipelineOps.AddCommand(PipelineProcessor pipe, CommandParameterInternal[] commandElements, CommandBaseAst commandBaseAst, CommandRedirection[] redirections, ExecutionContext context)
   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)
   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)
   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)

# Sign in to your Azure account
Connect-AzAccount

# Define parameters
$ResourceGroupName = "YourResourceGroupName"   # Replace with your resource group name
$VmName = "YourVMName"                         # Replace with your VM name
$UserEmail = "user@example.com"                # Replace with the email of the user to assign the role

# Get the VM resource
$vm = Get-AzResource -ResourceGroupName $ResourceGroupName -ResourceType "Microsoft.Compute/virtualMachines" -ResourceName $VmName

# Validate the VM was retrieved successfully
if (-not $vm) {
    Write-Error "VM $VmName not found in resource group $ResourceGroupName."
    return
}

# Role definition ID for "Virtual Machine Administrator Login"
$RoleDefinitionId = "b2a65916-879d-4a5d-93e5-87a5d9d5c1c3"

# Get the user object ID
$user = Get-AzADUser -UserPrincipalName $UserEmail

# Validate the user was found
if (-not $user) {
    Write-Error "User $UserEmail not found in Azure AD."
    return
}

# Create the role assignment
New-AzRoleAssignment -ObjectId $user.Id -RoleDefinitionId $RoleDefinitionId -Scope $vm.Id

Write-Host "Role 'Virtual Machine Administrator Login' successfully assigned to user $UserEmail for VM $VmName."





https://learn.microsoft.com/en-us/entra/identity/devices/howto-vm-sign-in-azure-ad-windows

https://apps.microsoft.com/detail/9wzdncrfj3ps?rtc=1&hl=en-gb&gl=GB




"HivePath" = "HKCU:\Control Panel\Desktop"
 
        "KeyName" = "MenuShowDelay"
 
        "PropertyType" = "STRING"
 
        "PropertyValue" = "0"
 
 
        "HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
 
        "KeyName" = "SubscribedContent-338393Enabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 
        "HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
 
        "KeyName" = "SubscribedContent-353696Enabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 
        "HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
 
        "KeyName" = "SubscribedContent-338388Enabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 

       "HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
 
        "KeyName" = "SubscribedContent-338389Enabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 
        "HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
 
        "KeyName" = "SystemPaneSuggestionsEnabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 
         
	"HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Search"
 
        "KeyName" = "BingSearchEnabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 
       
	"HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\SearchSettings"
 
        "KeyName" = "IsAADCloudSearchEnabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"

# Removes the "New" tag on Start menu apps
$regEntry = [PSCustomObject]@{
Path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"
ValueName = "Start_NotifyNewApps"
ValueType = "DWord"
ValueData = "0"
}
$regEntries += $regEntry




let paramRangeStart = todatetime('<replace_with_actual_start_datetime>');
let paramRangeEnd = todatetime('<replace_with_actual_end_datetime>');
let binSize = 24h;

Perf
| extend 
    LocalTime = case(
        Computer startswith "M01" or Computer startswith "M04", datetime_add('hour', 0, TimeGenerated), // EMEA (UTC+0)
        Computer startswith "M13" or Computer startswith "M14", datetime_add('hour', 8, TimeGenerated), // APAC (UTC+8)
        Computer startswith "M06" or Computer startswith "M09", datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)
        datetime_add('hour', 0, TimeGenerated) // Default fallback
    ),
    Geo = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    ),
    Region = case(
        Computer startswith "M01", "NEU",
        Computer startswith "M04", "WEU",
        Computer startswith "M13", "EAS",
        Computer startswith "M14", "SEA",
        Computer startswith "M06", "EUS2",
        Computer startswith "M09", "CUS",
        "Other"
    ),
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        "Other"
    ),
    ManagementPlane = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        "Other"
    )
| extend 
    DayOfWeek = dayofweek(LocalTime),
    HourOfDay = hourofday(LocalTime),
    SessionHostName = trim(" ", tolower(Computer))
| project-away Computer
| where LocalTime between (paramRangeStart .. paramRangeEnd)
| where ObjectName == "Memory" and CounterName == "% Committed Bytes In Use"
| where dayofweek(LocalTime) between (1d .. 5d) // Only weekdays
| where hourofday(LocalTime) between (8 .. 17) // Business hours
| summarize 
    AVG_RAM_CommittedBytesInUse = round(avg(CounterValue), 2),
    MAX_RAM_CommittedBytesInUse = round(max(CounterValue), 2),
    MIN_RAM_CommittedBytesInUse = round(min(CounterValue), 2),
    MED_RAM_CommittedBytesInUse = round(percentile(CounterValue, 50), 2),
    ItemsPerTimeBin = count()
    by bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, SessionHostPoolType, ManagementPlane
| extend SessionHostKey = substring(SessionHostName, 0, 8)
| project 
    TimeGenerated = LocalTime,
    SessionHostName, 
    SessionHostPoolType, 
    SessionHostKey, 
    Geo, 
    Region, 
    Environment, 
    ManagementPlane, 
    AVG_RAM_CommittedBytesInUse, 
    MAX_RAM_CommittedBytesInUse, 
    MED_RAM_CommittedBytesInUse, 
    MIN_RAM_CommittedBytesInUse, 
    ItemsPerTimeBin






let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let paramRangeStart = todatetime('", 
            DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", 
            DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let binSize = 24h;",
            "Perf",
            "| extend LocalTime = case(",
            "        Computer startswith 'M01' or Computer startswith 'M04', datetime_add('hour', 0, TimeGenerated),",
            "        Computer startswith 'M13' or Computer startswith 'M14', datetime_add('hour', 8, TimeGenerated),",
            "        Computer startswith 'M06' or Computer startswith 'M09', datetime_add('hour', -5, TimeGenerated),",
            "        datetime_add('hour', 0, TimeGenerated)",
            "    ),",
            "    Geo = case(",
            "        Computer startswith 'M01' or Computer startswith 'M04', 'EMEA',",
            "        Computer startswith 'M13' or Computer startswith 'M14', 'APAC',",
            "        Computer startswith 'M06' or Computer startswith 'M09', 'AMRS',",
            "        'Other'",
            "    ),",
            "    Region = case(",
            "        Computer startswith 'M01', 'NEU',",
            "        Computer startswith 'M04', 'WEU',",
            "        Computer startswith 'M13', 'EAS',",
            "        Computer startswith 'M14', 'SEA',",
            "        Computer startswith 'M06', 'EUS2',",
            "        Computer startswith 'M09', 'CUS',",
            "        'Other'",
            "    ),",
            "    Environment = case(",
            "        substring(Computer, 3, 1) == 'T', 'TST',",
            "        substring(Computer, 3, 1) == 'U', 'UAT',",
            "        substring(Computer, 3, 1) == 'D', 'DEV',",
            "        Computer contains 'NACR', 'CRIMS NonProdA',",
            "        Computer contains 'NBCR', 'CRIMS NonProdB',",
            "        Computer contains 'OHCR', 'OAT CRIMS High',",
            "        Computer contains 'OMCR', 'OAT CRIMS Medium',",
            "        Computer contains 'OLCR', 'OAT CRIMS Low',",
            "        Computer contains 'PHCR', 'PRD CRIMS High',",
            "        Computer contains 'PMCR', 'PRD CRIMS High',",
            "        Computer contains 'PLCR', 'PRD CRIMS Low',",
            "        substring(Computer, 3, 1) == 'P', 'PRD',",
            "        'Other'",
            "    ),",
            "    SessionHostPoolType = case(",
            "        Computer contains 'MSN', 'MultiSession',",
            "        Computer contains 'SSP', 'Personal',",
            "        Computer contains 'NACR', 'MultiSession',",
            "        Computer contains 'NBCR', 'MultiSession',",
            "        Computer contains 'OHCR', 'MultiSession',",
            "        Computer contains 'OMCR', 'MultiSession',",
            "        Computer contains 'OLCR', 'MultiSession',",
            "        Computer contains 'PHCR', 'MultiSession',",
            "        Computer contains 'PMCR', 'MultiSession',",
            "        Computer contains 'PLCR', 'MultiSession',",
            "        Computer contains 'DVLDT', 'Personal',",
            "        'Other'",
            "    ),",
            "    ManagementPlane = case(",
            "        substring(Computer, 7, 1) == 'I', 'Intune',",
            "        substring(Computer, 7, 1) == 'G', 'GPO',",
            "        Computer contains 'DVLDT', 'Intune',",
            "        'Other'",
            "    )",
            "| extend DayOfWeek = dayofweek(LocalTime)",
            "| extend HourOfDay = hourofday(LocalTime)",
            "| extend SessionHostName = trim(' ', tolower(Computer))",
            "| project-away Computer",
            "| where LocalTime between (paramRangeStart .. paramRangeEnd)",
            "| where ObjectName == 'Memory' and CounterName == '% Committed Bytes In Use'",
            "| where dayofweek(LocalTime) between (1d .. 5d)",
            "| where hourofday(LocalTime) between (8 .. 17)",
            "| summarize AVG_RAM_CommittedBytesInUse = round(avg(CounterValue), 2),",
            "          MAX_RAM_CommittedBytesInUse = round(max(CounterValue), 2),",
            "          MIN_RAM_CommittedBytesInUse = round(min(CounterValue), 2),",
            "          MED_RAM_CommittedBytesInUse = round(percentile(CounterValue, 50), 2),",
            "          ItemsPerTimeBin = count()",
            "  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, SessionHostPoolType, ManagementPlane",
            "| extend SessionHostKey = substring(SessionHostName, 0, 8)",
            "| project TimeGenerated = BinnedTime, SessionHostName, SessionHostPoolType, SessionHostKey, Geo, Region, Environment, ManagementPlane, AVG_RAM_CommittedBytesInUse, MAX_RAM_CommittedBytesInUse, MED_RAM_CommittedBytesInUse, MIN_RAM_CommittedBytesInUse, ItemsPerTimeBin"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    )
in
    Source





Processor Information(_Total)\% Processor Time
Memory(*)\% Committed Bytes In Use
Memory(*)\Page Faults/sec
Memory(*)\Pages/sec
LogicalDisk(C:)\% Free Space
LogicalDisk(C:)\Current Disk Queue Length
PhysicalDisk(*)\Avg. Disk sec/Read
PhysicalDisk(*)\Avg. Disk sec/Write
PhysicalDisk(*)\Avg. Disk sec/Transfer



Heartbeat
| extend 
    Geo = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    ),
    Region = case(
        Computer startswith "M01", "NEU",
        Computer startswith "M04", "WEU",
        Computer startswith "M13", "EAS",
        Computer startswith "M14", "SEA",
        Computer startswith "M06", "EUS2",
        Computer startswith "M09", "CUS",
        "Other"
    ), 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        "Other"
    )
| summarize 
    CountComputers_EMEA = dcountif(Computer, Geo == "EMEA"),
    CountComputers_APAC = dcountif(Computer, Geo == "APAC"),
    CountComputers_AMRS = dcountif(Computer, Geo == "AMRS"),
    CountComputers_Geo_Other = dcountif(Computer, Geo == "Other"),
    CountComputers_NEU = dcountif(Computer, Region == "NEU"),
    CountComputers_SEA = dcountif(Computer, Region == "SEA"),
    CountComputers_EUS2 = dcountif(Computer, Region == "EUS2"),
    CountComputers_Region_Other = dcountif(Computer, Region == "Other"),
    CountComputers_PRD = dcountif(Computer, Environment == "PRD"),
    CountComputers_UAT = dcountif(Computer, Environment == "UAT"),
    CountComputers_DEV = dcountif(Computer, Environment == "DEV"),
    CountComputers_Environment_Other = dcountif(Computer, Environment == "Other"),
    CountComputers_Personal = dcountif(Computer, SessionHostPoolType == "Personal"),
    CountComputers_MultiSession = dcountif(Computer, SessionHostPoolType == "MultiSession"),
    CountComputers_SessionHostPool_Other = dcountif(Computer, SessionHostPoolType == "Other")
    by bin(TimeGenerated, 1h)
| sort by TimeGenerated desc





Heartbeat
| extend 
    Geo = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    ),
    Region = case(
        Computer startswith "M01", "NEU",
        Computer startswith "M04", "WEU",
        Computer startswith "M13", "EAS",
        Computer startswith "M14", "SEA",
        Computer startswith "M06", "EUS2",
        Computer startswith "M09", "CUS",
        "Other"
    ), 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        "Other"
    )
| summarize 
    CountComputers_EMEA = dcountif(Computer, Geo == "EMEA"),
    CountComputers_APAC = dcountif(Computer, Geo == "APAC"),
    CountComputers_AMRS = dcountif(Computer, Geo == "AMRS"),
    CountComputers_NEU = dcountif(Computer, Region == "NEU"),
    CountComputers_SEA = dcountif(Computer, Region == "SEA"),
    CountComputers_EUS2 = dcountif(Computer, Region == "EUS2"),
    CountComputers_PRD = dcountif(Computer, Environment == "PRD"),
    CountComputers_UAT = dcountif(Computer, Environment == "UAT"),
    CountComputers_DEV = dcountif(Computer, Environment == "DEV"),
    CountComputers_Personal = dcountif(Computer, SessionHostPoolType == "Personal"),
    CountComputers_MultiSession = dcountif(Computer, SessionHostPoolType == "MultiSession")
    by bin(TimeGenerated, 1h)
| sort by TimeGenerated desc









let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let paramRangeStart = todatetime('", 
            DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", 
            DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let binSize = 24h;",
            "Perf",
            "| extend LocalTime = case(",
            "    Computer startswith 'M01' or Computer startswith 'M04', datetime_add('hour', 0, TimeGenerated),",  // EMEA (UTC+0)
            "    Computer startswith 'M13' or Computer startswith 'M14', datetime_add('hour', 8, TimeGenerated),",  // APAC (UTC+8)
            "    Computer startswith 'M06' or Computer startswith 'M09', datetime_add('hour', -5, TimeGenerated),", // AMRS (UTC-5)
            "    datetime_add('hour', 0, TimeGenerated)",  // Default fallback
            "),",
            "Geo = case(",
            "    Computer startswith 'M01' or Computer startswith 'M04', 'EMEA',",
            "    Computer startswith 'M13' or Computer startswith 'M14', 'APAC',",
            "    Computer startswith 'M06' or Computer startswith 'M09', 'AMRS',",
            "    'Other'",
            "),",
            "Region = case(",
            "    Computer startswith 'M01', 'NEU',",
            "    Computer startswith 'M04', 'WEU',",
            "    Computer startswith 'M13', 'EAS',",
            "    Computer startswith 'M14', 'SEA',",
            "    Computer startswith 'M06', 'EUS2',",
            "    Computer startswith 'M09', 'CUS',",
            "    'Other'",
            "),",
            "Environment = case(",
            "    substring(Computer, 3, 1) == 'T', 'TST',",
            "    substring(Computer, 3, 1) == 'U', 'UAT',",
            "    substring(Computer, 3, 1) == 'D', 'DEV',",
            "    Computer contains 'NACR', 'CRIMS NonProdA',",
            "    Computer contains 'NBCR', 'CRIMS NonProdB',",
            "    Computer contains 'OHCR', 'OAT CRIMS High',",
            "    Computer contains 'OMCR', 'OAT CRIMS Medium',",
            "    Computer contains 'OLCR', 'OAT CRIMS Low',",
            "    Computer contains 'PHCR', 'PRD CRIMS High',",
            "    Computer contains 'PMCR', 'PRD CRIMS High',",
            "    Computer contains 'PLCR', 'PRD CRIMS Low',",
            "    substring(Computer, 3, 1) == 'P', 'PRD',",
            "    'Other'",
            "),",
            "SessionHostPoolType = case(",
            "    Computer contains 'MSN', 'MultiSession',",
            "    Computer contains 'SSP', 'Personal',",
            "    Computer contains 'NACR', 'MultiSession',",
            "    Computer contains 'NBCR', 'MultiSession',",
            "    Computer contains 'OHCR', 'MultiSession',",
            "    Computer contains 'OMCR', 'MultiSession',",
            "    Computer contains 'OLCR', 'MultiSession',",
            "    Computer contains 'PHCR', 'MultiSession',",
            "    Computer contains 'PMCR', 'MultiSession',",
            "    Computer contains 'PLCR', 'MultiSession',",
            "    Computer contains 'DVLDT', 'Personal',",
            "    'Other'",
            "),",
            "ManagementPlane = case(",
            "    substring(Computer, 7, 1) == 'I', 'Intune',",
            "    substring(Computer, 7, 1) == 'G', 'GPO',",
            "    Computer contains 'DVLDT', 'Intune',",
            "    'Other'",
            "),",
            "| extend DayOfWeek = dayofweek(LocalTime)",
            "| extend HourOfDay = hourofday(LocalTime)",
            "| extend SessionHostName = trim(' ', tolower(Computer))",
            "| project-away Computer",
            "| where LocalTime between (paramRangeStart .. paramRangeEnd)",
            "| where ObjectName == 'Memory' and CounterName == '% Committed Bytes In Use'",
            "| where dayofweek(LocalTime) between (1d .. 5d)",
            "| where hourofday(LocalTime) between (8 .. 17)",
            "| summarize AVG_RAM_CommittedBytesInUse = round(avg(CounterValue), 2),",
            "          MAX_RAM_CommittedBytesInUse = round(max(CounterValue), 2),",
            "          MIN_RAM_CommittedBytesInUse = round(min(CounterValue), 2),",
            "          MED_RAM_CommittedBytesInUse = round(percentile(CounterValue, 50), 2),",
            "          ItemsPerTimeBin = count()",
            "  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, ManagementPlane, SessionHostPoolType",
            "| project TimeGenerated = BinnedTime, SessionHostName, SessionHostPoolType, Geo, Region, Environment, ManagementPlane, AVG_RAM_CommittedBytesInUse, MAX_RAM_CommittedBytesInUse, MIN_RAM_CommittedBytesInUse, MED_RAM_CommittedBytesInUse, ItemsPerTimeBin"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    )
in
    Source



'summarize' operator: Failed to resolve scalar expression named 'SessionHostName'
Request id: 21739e04-8fcc-4535-b158-c221450d4704

Heartbeat
| extend 
    LocalTime = case(
        Computer startswith "M01" or Computer startswith "M04", datetime_add('hour', 0, TimeGenerated),  // EMEA (UTC+0)
        Computer startswith "M13" or Computer startswith "M14", datetime_add('hour', 8, TimeGenerated),  // APAC (UTC+8)
        Computer startswith "M06" or Computer startswith "M09", datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)
        datetime_add('hour', 0, TimeGenerated) // Default fallback
    ),
    Geo = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    ),
    Region = case(
        Computer startswith "M01", "NEU",
        Computer startswith "M04", "WEU",
        Computer startswith "M13", "EAS",
        Computer startswith "M14", "SEA",
        Computer startswith "M06", "EUS2",
        Computer startswith "M09", "CUS",
        "Other"
    ), 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        Computer contains "DVLDT", "Personal",
        "Other"
    )
| summarize 
    Geo_Unique_Computers = dcountif(SessionHostName, Geo == "EMEA") by bin(LocalTime, 1h),
    Region_Unique_Computers = dcountif(SessionHostName, Geo == "APAC"),
    Environment_Unique_Computers = dcountif(SessionHostName, Geo == "AMRS")





//let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');
//let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');
Heartbeat
| extend 
    LocalTime = case(
        Computer startswith "M01" or Computer startswith "M04", datetime_add('hour', 0, TimeGenerated),  // EMEA (UTC+0)
        Computer startswith "M13" or Computer startswith "M14", datetime_add('hour', 8, TimeGenerated),  // APAC (UTC+8)
        Computer startswith "M06" or Computer startswith "M09", datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)
        datetime_add('hour', 0, TimeGenerated) // Default fallback
    ),
    Geo = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    ),
    Region = case(
        Computer startswith "M01", "NEU",
        Computer startswith "M04", "WEU",
        Computer startswith "M13", "EAS",
        Computer startswith "M14", "SEA",
        Computer startswith "M06", "EUS2",
        Computer startswith "M09", "CUS",
        "Other"
    ), 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        Computer contains "DVLDT", "Personal",
        "Other"
    ),
    ManagementPlane = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        Computer contains "DVLDT", "Intune",
        "Other"
    )
| extend SessionHostName = trim(' ', tolower(Computer))
| project-away Computer
| project LocalTime, Geo, Region, Environment, SessionHostPoolType, ManagementPlane, SessionHostName, ResourceGroup

returns
LocalTime [UTC]	Geo	Region	Environment	SessionHostPoolType	ManagementPlane	SessionHostName	ResourceGroup
28/11/2024, 10:04:42.629	EMEA	NEU	PRD	Personal	Intune	m01psspi0227.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 10:05:12.905	EMEA	NEU	PRD	Personal	Intune	m01psspi0180.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 18:12:49.421	APAC	SEA	PRD	Personal	Intune	m14psspi0152.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-SEA-PRD
28/11/2024, 10:19:01.015	EMEA	NEU	PRD	Personal	Intune	m01psspi0353.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 11:34:33.011	EMEA	NEU	PRD	Personal	Intune	m01psspi0310.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:36:22.379	EMEA	NEU	PRD	Personal	Intune	m01psspi0878.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:41:28.323	EMEA	NEU	PRD	Personal	Intune	m01psspi0300.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:42:28.321	EMEA	NEU	PRD	Personal	Intune	m01psspi0300.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:43:28.335	EMEA	NEU	PRD	Personal	Intune	m01psspi0300.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:44:28.338	EMEA	NEU	PRD	Personal	Intune	m01psspi0300.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:45:28.360	EMEA	NEU	PRD	Personal	Intune	m01psspi0300.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 21:45:49.451	APAC	SEA	PRD	Personal	Intune	m14psspi0121.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-SEA-PRD
28/11/2024, 13:46:28.378	EMEA	NEU	PRD	Personal	Intune	m01psspi0300.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:47:28.398	EMEA	NEU	PRD	Personal	Intune	m01psspi0300.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:48:28.409	EMEA	NEU	PRD	Personal	Intune	m01psspi0300.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:49:28.412	EMEA	NEU	PRD	Personal	Intune	m01psspi0300.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:00.333	EMEA	NEU	PRD	Personal	Intune	m01psspi0678.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 08:50:00.461	AMRS	EUS2	PRD	Personal	GPO	m06psspg0090.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-EUS2-PRD
28/11/2024, 08:50:00.561	AMRS	EUS2	UAT	Personal	GPO	m06usspg0012.aberdeen.aberdeen-asset.com	RG-EUS-REMOTEDESKTOPDEVICES-UATVIRTUALDESKTOP-EUS2-PRD
28/11/2024, 13:50:01.065	EMEA	NEU	PRD	Personal	Intune	m01psspi0736.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:01.122	EMEA	NEU	PRD	Personal	Intune	m01psspi0167.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:01.407	EMEA	NEU	PRD	Personal	Intune	m01psspi0886.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:01.455	EMEA	NEU	PRD	Personal	Intune	m01psspi0346.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 21:50:01.538	APAC	SEA	PRD	Personal	Intune	m14psspi0017.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-SEA-PRD
28/11/2024, 13:50:01.615	EMEA	NEU	PRD	Personal	Intune	m01psspi0712.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:01.806	EMEA	NEU	PRD	Personal	Intune	m01psspi0679.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:02.242	EMEA	NEU	PRD	Personal	Intune	m01psspi0443.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:02.423	EMEA	NEU	PRD	Personal	Intune	m01psspi0318.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 21:50:03.280	APAC	SEA	PRD	Personal	Intune	m14psspi0038.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-SEA-PRD
28/11/2024, 13:50:04.538	EMEA	NEU	PRD	Personal	Intune	m01psspi0729.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 08:50:04.768	AMRS	EUS2	PRD	Personal	GPO	m06psspg0014.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-EUS2-PRD
28/11/2024, 13:50:04.860	EMEA	NEU	PRD	MultiSession	Intune	m01pmsni0021.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-NonPersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:04.939	EMEA	NEU	UAT	Personal	Intune	m01usspi0017.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-UATVirtualDesktop-NEU-PRD
28/11/2024, 21:50:05.394	APAC	SEA	PRD	Personal	Intune	m14psspi0053.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-SEA-PRD
28/11/2024, 08:50:05.669	AMRS	EUS2	PRD	Personal	GPO	m06psspg0042.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-EUS2-PRD
28/11/2024, 13:50:05.740	EMEA	NEU	PRD	Personal	Intune	m01psspi0465.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:05.810	EMEA	NEU	UAT	Personal	Intune	m01usspi0002.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-UATVirtualDesktop-NEU-PRD
28/11/2024, 13:50:05.828	EMEA	NEU	PRD	Personal	Intune	m01psspi0563.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:05.980	EMEA	NEU	UAT	Personal	Intune	m01usspi0028.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-UATVirtualDesktop-NEU-PRD
28/11/2024, 13:50:06.259	EMEA	NEU	PRD	Personal	Intune	m01psspi0026.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 08:50:06.430	AMRS	EUS2	UAT	Personal	GPO	m06usspg0010.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-UATVirtualDesktop-EUS2-PRD
28/11/2024, 13:50:06.436	EMEA	NEU	PRD	MultiSession	Intune	m01pmsni0019.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-NonPersistentVirtualDesktop-NEU-PRD
28/11/2024, 08:50:06.728	AMRS	EUS2	PRD	Personal	GPO	m06psspg0005.aberdeen.aberdeen-asset.com	RG-EUS-REMOTEDESKTOPDEVICES-PERSISTENTVIRTUALDESKTOP-EUS2-PRD
28/11/2024, 13:50:07.417	EMEA	NEU	PRD	Personal	Intune	m01psspi0034.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:07.671	EMEA	NEU	PRD	Personal	Intune	m01psspi0730.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:08.487	EMEA	NEU	PRD	Personal	Intune	m01psspi0665.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:08.721	EMEA	NEU	PRD	Personal	Intune	m01psspi0580.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:09.248	EMEA	NEU	PRD	Personal	Intune	m01psspi0030.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 21:50:09.388	APAC	SEA	PRD	Personal	Intune	m14psspi0122.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-SEA-PRD
28/11/2024, 13:50:09.802	EMEA	NEU	PRD	Personal	Intune	m01psspi0028.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:09.942	EMEA	NEU	PRD	Personal	Intune	m01psspi0293.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:10.139	EMEA	NEU	PRD	Personal	Intune	m01psspi0692.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 21:50:10.225	APAC	SEA	PRD	Personal	Intune	m14psspi0094.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-SEA-PRD
28/11/2024, 08:50:10.595	AMRS	EUS2	UAT	Personal	GPO	m06usspg0017.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-UATVirtualDesktop-EUS2-PRD
28/11/2024, 13:50:10.637	EMEA	NEU	PRD	Personal	Intune	m01psspi0695.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:10.685	EMEA	NEU	PRD	Personal	Intune	m01psspi0597.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 21:50:10.846	APAC	SEA	PRD	Personal	Intune	m14psspi0097.aberdeen.aberdeen-asset.com	RG-EUS-REMOTEDESKTOPDEVICES-PERSISTENTVIRTUALDESKTOP-SEA-PRD
28/11/2024, 13:50:11.087	EMEA	NEU	PRD	MultiSession	Intune	m01pmsni0070.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-NonPersistentVirtualDesktop-NEU-PRD






//let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');
//let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');
Heartbeat
| extend 
    LocalTime = case(
        Computer startswith "M01" or Computer startswith "M04", datetime_add('hour', 0, TimeGenerated),  // EMEA (UTC+0)
        Computer startswith "M13" or Computer startswith "M14", datetime_add('hour', 8, TimeGenerated),  // APAC (UTC+8)
        Computer startswith "M06" or Computer startswith "M09", datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)
        datetime_add('hour', 0, TimeGenerated) // Default fallback
    ),
    Geo = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    ),
    Region = case(
        Computer startswith "M01", "NEU",
        Computer startswith "M04", "WEU",
        Computer startswith "M13", "EAS",
        Computer startswith "M14", "SEA",
        Computer startswith "M06", "EUS2",
        Computer startswith "M09", "CUS",
        "Other"
    ), 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        Computer contains "DVLDT", "Personal",
        "Other"
    ),
    ManagementPlane = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        Computer contains "DVLDT", "Intune",
        "Other"
    )
| extend DayOfWeek = dayofweek (LocalTime)
| extend HourOfDay = hourofday(LocalTime)
| extend SessionHostName = trim(' ', tolower(Computer))
| project-away Computer

returns
TimeGenerated [UTC]	SourceComputerId	ComputerIP	Category	OSType	OSName	OSMajorVersion	OSMinorVersion	Version	SCAgentChannel	RemoteIPLongitude	LocalTime [UTC]	Geo	Region	Environment	SessionHostPoolType	ManagementPlane	DayOfWeek	HourOfDay	SessionHostName
28/11/2024, 10:22:45.664	83d388de-13fe-452c-b174-c0792f3a271d	148.64.15.68	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 10:22:45.664	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	10	m01psspi0795.aberdeen.aberdeen-asset.com
28/11/2024, 10:23:10.544	10a325d4-8245-4aea-a9ab-999f40a08f87	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 10:23:10.544	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	10	m01psspi0836.aberdeen.aberdeen-asset.com
28/11/2024, 10:23:16.404	a7d5d940-495d-4cf1-9932-fc7a6ec360f4	148.64.15.9	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 10:23:16.404	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	10	m01psspi0794.aberdeen.aberdeen-asset.com
28/11/2024, 12:50:51.690	aab8f7c5-8230-4a87-a9ea-8d318446f631	148.64.15.23	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 12:50:51.690	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	12	m01psspi0828.aberdeen.aberdeen-asset.com
28/11/2024, 14:36:51.690	6e0e38ec-3083-4b21-be75-7ddcea58c020	148.64.15.68	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 14:36:51.690	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	14	m01psspi0478.aberdeen.aberdeen-asset.com
28/11/2024, 14:51:43.952	c87afc8b-60cd-46f5-85f9-5bf5ce1e6f0f	148.64.15.63	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 14:51:43.952	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	14	m01psspi0126.aberdeen.aberdeen-asset.com
28/11/2024, 15:21:31.352	24b44269-ed4a-40f4-affe-40f8ce90a5c6	148.64.15.9	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:21:31.352	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0127.aberdeen.aberdeen-asset.com
28/11/2024, 15:33:27.039	56848ab4-d251-4bd8-94f5-6dc0557304b8	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:33:27.039	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0227.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.114	3bd049a1-6e86-4943-8801-57dcb0091883	148.64.15.23	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:00.114	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0706.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.142	7325c47d-dd91-4937-ba83-995c160f3320	148.64.15.23	Azure Monitor Agent	Windows	Windows 10 Enterprise multi-session	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:00.142	EMEA	NEU	PRD	MultiSession	Intune	4.00:00:00	15	m01pmsni0005.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.143	dbab448e-97c0-4ed9-a8ca-b6447e47d693	148.64.15.68	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:00.143	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0459.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.277	7ba88fd1-31db-4049-a464-8a4e0e8820a3	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:00.277	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0229.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.292	6337efed-da0e-43c0-90ba-0875bd783c49	148.64.15.83	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:00.292	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0419.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.534	d94dbd6c-a185-413b-a7d0-3c0d821f2a16	103.246.37.6	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	103.86	28/11/2024, 23:34:00.534	APAC	SEA	PRD	Personal	Intune	4.00:00:00	23	m14psspi0007.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.567	741f13bc-04f6-4571-b83e-2aea804d13f3	148.64.15.83	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:00.567	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0352.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.596	657bd78a-8660-4416-95ac-8a37d8a53c8e	148.64.15.83	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:00.596	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0147.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.664	ed278c28-dde3-421e-9e84-b433f9b3ec90	148.64.15.68	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:00.664	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0328.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.668	790a2df4-9049-46b0-9957-ab94a1a8e56f	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:00.668	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0162.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.685	4545ec9e-e635-4bbd-921d-a16bbbd57c65	103.246.37.60	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.29.0.0	Direct	103.86	28/11/2024, 23:34:00.685	APAC	SEA	PRD	Personal	Intune	4.00:00:00	23	m14psspi0004.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.734	50bd831b-622b-41dd-9247-e48babce3e13	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:00.734	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0753.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.899	849d9732-b5c1-4856-a057-1dac834a9dac	148.64.15.23	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:00.899	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0628.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:01.523	559e9d82-f0ba-406c-a576-a4bebe584091	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:01.523	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0348.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:01.789	8ccf30a2-afa4-4854-ae47-eaf34e35b291	148.64.15.23	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:01.789	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0359.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:01.999	b7850780-d171-4961-9c48-39a6fbeb2b02	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:01.999	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0167.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:02.030	73402096-924a-4129-9ed6-62495fbed6f2	148.64.15.68	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:02.030	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0736.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:02.229	f5002e6e-4cfd-4d36-ad43-ebcdf83ec9bc	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:02.229	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0886.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:02.277	dbb31b6c-1b40-4146-b782-4c2ad74886c2	148.64.15.63	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:02.277	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0346.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:02.322	92477145-7350-4ae3-985b-c9edea541b22	148.64.15.63	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:02.322	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0712.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:02.419	a3e1e696-acba-480f-bb2d-e591ded91418	103.246.37.6	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.29.0.0	Direct	103.86	28/11/2024, 23:34:02.419	APAC	SEA	PRD	Personal	Intune	4.00:00:00	23	m14psspi0017.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:02.583	9aac51a0-d357-4972-99c7-2efdd20e95db	148.64.15.63	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:02.583	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0679.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:02.963	85d75255-5038-4064-bdcf-797b6e9da500	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:02.963	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0128.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:02.998	27f97d61-c360-48dd-9bfa-2bf81ccf6a5c	148.64.15.63	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:02.998	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0674.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:03.156	abca6335-31df-4c6f-b299-54cd5319cb78	148.64.15.63	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:03.156	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0318.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:03.264	b2dce851-f146-4f11-936e-5b6c1642aa5b	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:03.264	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0151.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:03.648	b7a2f582-1df0-45fb-b73b-7eda59105289	148.64.15.9	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:03.648	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0443.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:03.764	32e878a3-a5f4-47ce-84a6-5aac8c5ba3e2	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:03.764	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0251.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:04.030	095449b1-5e69-4569-9261-db99fcb06974	103.246.37.5	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	103.86	28/11/2024, 23:34:04.030	APAC	SEA	PRD	Personal	Intune	4.00:00:00	23	m14psspi0038.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:04.446	6742d53c-8069-4685-b3f6-8b6529aa800b	148.64.15.68	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:04.446	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0064.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:04.817	132b46c5-201c-4abc-b8f1-5e0a2f9d3fb9	148.64.15.23	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:04.817	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0002.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:05.261	776b99db-4b83-484d-8030-a28637dd4d1b	148.64.15.23	Azure Monitor Agent	Windows	Windows 10 Enterprise multi-session	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:05.261	EMEA	NEU	PRD	MultiSession	Intune	4.00:00:00	15	m01pmsni0024.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:05.304	0e77c7ec-41f2-4c6d-a811-5506294c347e	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:05.304	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0729.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:05.356	948f91e1-0ae1-45cd-9612-11ffd8ac8c78	148.64.15.83	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:05.356	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0450.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:05.492	3c56be89-c869-427c-8e10-aa55f5c21bea	148.64.15.9	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:05.492	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0361.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:05.586	61e204fe-c74a-4d31-b840-fd7ee6183d59	148.64.15.23	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:05.586	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0845.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:05.700	3e1c24d5-5562-4c04-b782-1a580f89f92a	148.64.15.83	Azure Monitor Agent	Windows	Windows 10 Enterprise multi-session	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:05.700	EMEA	NEU	PRD	MultiSession	Intune	4.00:00:00	15	m01pmsni0021.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:05.715	3bc3f501-200e-485c-89fc-3e513b6b6ed7	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise multi-session	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:05.715	EMEA	NEU	CRIMS NonProdA	MultiSession	Intune	4.00:00:00	15	m01nacri0002.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:05.907	bcc29029-25e4-479b-b633-191f6d69a2d9	148.64.15.9	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.29.0.0	Direct	-6.24	28/11/2024, 15:34:05.907	EMEA	NEU	UAT	Personal	Intune	4.00:00:00	15	m01usspi0002.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:06.157	7993ae96-2183-49a6-b259-cc3132241585	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:06.157	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0149.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:06.201	b8ff1215-bb7c-4a93-8af8-720a49a6a0a6	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:06.201	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0551.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:06.239	f0cdbf07-0d3a-45c3-a1d1-acf6e928fffc	148.64.15.83	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:06.239	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0015.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:06.379	a65764a8-9b77-437f-be67-50a8ca20c561	103.246.37.60	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	103.86	28/11/2024, 23:34:06.379	APAC	SEA	PRD	Personal	Intune	4.00:00:00	23	m14psspi0053.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:06.585	aa6fce97-8119-4f93-8a53-5d1a28ec74a3	148.64.15.83	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:06.585	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0638.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:06.662	78cf9c65-8717-4684-812f-4683ce38039a	148.64.15.9	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:06.662	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0129.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:06.795	337223d1-13e0-41fc-a504-eb17a2455599	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:06.795	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0664.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:06.815	e043256a-6338-416b-9d2b-0c3f6918e524	148.64.15.68	Azure Monitor Agent	Windows	Windows 10 Enterprise multi-session	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:06.815	EMEA	NEU	PRD	MultiSession	Intune	4.00:00:00	15	m01pmsni0016.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:06.852	ed1bbb79-0d6d-4a74-b09c-37e2a784abc9	148.64.15.63	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:06.852	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0563.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:07.032	cd5d9f99-dac5-410b-aa22-ba17bb7a2d44	148.64.15.63	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:07.032	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0026.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:07.037	d08b026c-8a7c-44ad-8af7-c1013fb7ffb5	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:07.037	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0568.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:07.107	353734ae-b6cf-43f6-b68c-3422288694f1	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:07.107	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0657.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:07.145	408e4998-49e2-4ce0-a170-72a6c1a1ebfd	148.64.15.83	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:07.145	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0353.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:07.217	4888b063-c87f-420f-993e-871482df7d15	148.64.15.23	Azure Monitor Agent	Windows	Windows 10 Enterprise multi-session	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:07.217	EMEA	NEU	PRD	MultiSession	Intune	4.00:00:00	15	m01pmsni0019.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:07.554	2d9462eb-eca7-49c0-8838-8a8777a4bc28	148.64.15.23	Azure Monitor Agent	Windows	Windows 10 Enterprise multi-session	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:07.554	EMEA	NEU	PRD	MultiSession	Intune	4.00:00:00	15	m01pmsni0017.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:08.018	ef1310ae-23f5-4d95-b5f4-5518cf6d9d66	148.64.15.68	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:08.018	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0021.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:08.226	fd6d3512-948c-41fe-b6c8-baec19125ea5	148.64.15.83	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:08.226	EMEA	NEU	TST	Personal	Intune	4.00:00:00	15	m01tsspi0017.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:08.241	d7968b4e-9520-4a14-b558-26c38606c496	103.246.37.94	Azure Monitor Agent	Windows	Windows 10 Enterprise multi-session	10	0	1.30.0.0	Direct	103.86	28/11/2024, 23:34:08.241	APAC	SEA	UAT	MultiSession	Intune	4.00:00:00	23	m14umsni0001.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:08.248	03bbef68-6e8a-4adf-b8f5-6c0752cd76a3	148.64.15.68	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:08.248	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0034.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:08.573	dc446104-4fae-4d05-bb1d-8ad3ac9f3ea6	148.64.15.9	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:08.573	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0357.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:08.981	48da92f5-20ce-40b1-a0d5-b27f95525960	148.64.15.9	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:08.981	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0377.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:09.390	c8c39bcf-1d5b-4009-84ca-513a7823bc0c	148.64.15.68	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:09.390	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0665.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:09.766	aa27ee30-f632-40f8-8eb8-08d6ae682c46	148.64.15.63	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:09.766	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0580.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:09.821	6f059104-c9bb-4d39-9550-b3dbc8bf1cd1	148.64.15.9	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:09.821	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0686.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:10.191	13487f86-3062-4105-93a6-0a8099734976	168.149.146.15	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-77.47	28/11/2024, 10:34:10.191	AMRS	EUS2	PRD	Personal	GPO	4.00:00:00	10	m06psspg0055.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:10.386	7ffa73e5-f262-4d6d-9ec9-2c3409c8f893	148.64.15.68	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:10.386	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0028.aberdeen.aberdeen-asset.com



let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let paramRangeStart = todatetime('", 
            DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", 
            DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let binSize = 24h;",
            "Perf",
            "| extend LocalTime = case(",
            "    Computer startswith 'M01' or Computer startswith 'M04', datetime_add('hour', 0, TimeGenerated),",  // EMEA (UTC+0)
            "    Computer startswith 'M13' or Computer startswith 'M14', datetime_add('hour', 8, TimeGenerated),",  // APAC (UTC+8)
            "    Computer startswith 'M06' or Computer startswith 'M09', datetime_add('hour', -5, TimeGenerated),", // AMRS (UTC-5)
            "    datetime_add('hour', 0, TimeGenerated)",  // Default fallback
            "),",
            "Geo = case(",
            "    Computer startswith 'M01' or Computer startswith 'M04', 'EMEA',",
            "    Computer startswith 'M13' or Computer startswith 'M14', 'APAC',",
            "    Computer startswith 'M06' or Computer startswith 'M09', 'AMRS',",
            "    'Other'",
            "),",
            "Region = case(",
            "    Computer startswith 'M01', 'NEU',",
            "    Computer startswith 'M04', 'WEU',",
            "    Computer startswith 'M13', 'EAS',",
            "    Computer startswith 'M14', 'SEA',",
            "    Computer startswith 'M06', 'EUS2',",
            "    Computer startswith 'M09', 'CUS',",
            "    'Other'",
            "),",
            "Environment = case(",
            "    substring(Computer, 3, 1) == 'T', 'TST',",
            "    substring(Computer, 3, 1) == 'U', 'UAT',",
            "    substring(Computer, 3, 1) == 'D', 'DEV',",
            "    Computer contains 'NACR', 'CRIMS NonProdA',",
            "    Computer contains 'NBCR', 'CRIMS NonProdB',",
            "    Computer contains 'OHCR', 'OAT CRIMS High',",
            "    Computer contains 'OMCR', 'OAT CRIMS Medium',",
            "    Computer contains 'OLCR', 'OAT CRIMS Low',",
            "    Computer contains 'PHCR', 'PRD CRIMS High',",
            "    Computer contains 'PMCR', 'PRD CRIMS High',",
            "    Computer contains 'PLCR', 'PRD CRIMS Low',",
            "    substring(Computer, 3, 1) == 'P', 'PRD',",
            "    'Other'",
            "),",
            "SessionHostPoolType = case(",
            "    Computer contains 'MSN', 'MultiSession',",
            "    Computer contains 'SSP', 'Personal',",
            "    Computer contains 'NACR', 'MultiSession',",
            "    Computer contains 'NBCR', 'MultiSession',",
            "    Computer contains 'OHCR', 'MultiSession',",
            "    Computer contains 'OMCR', 'MultiSession',",
            "    Computer contains 'OLCR', 'MultiSession',",
            "    Computer contains 'PHCR', 'MultiSession',",
            "    Computer contains 'PMCR', 'MultiSession',",
            "    Computer contains 'PLCR', 'MultiSession',",
            "    Computer contains 'DVLDT', 'Personal',",
            "    'Other'",
            "),",
            "ManagementPlane = case(",
            "    substring(Computer, 7, 1) == 'I', 'Intune',",
            "    substring(Computer, 7, 1) == 'G', 'GPO',",
            "    Computer contains 'DVLDT', 'Intune',",
            "    'Other'",
            "),",
            "| extend DayOfWeek = dayofweek(LocalTime)",
            "| extend HourOfDay = hourofday(LocalTime)",
            "| extend SessionHostName = trim(' ', tolower(Computer))",
            "| project-away Computer",
            "| where LocalTime between (paramRangeStart .. paramRangeEnd)",
            "| where ObjectName == 'Memory' and CounterName == '% Committed Bytes In Use'",
            "| where dayofweek(LocalTime) between (1d .. 5d)",
            "| where hourofday(LocalTime) between (8 .. 17)",
            "| summarize AVG_RAM_CommittedBytesInUse = round(avg(CounterValue), 2),",
            "          MAX_RAM_CommittedBytesInUse = round(max(CounterValue), 2),",
            "          MIN_RAM_CommittedBytesInUse = round(min(CounterValue), 2),",
            "          MED_RAM_CommittedBytesInUse = round(percentile(CounterValue, 50), 2),",
            "          ItemsPerTimeBin = count()",
            "  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, ManagementPlane, SessionHostPoolType",
            "| project TimeGenerated = BinnedTime, SessionHostName, SessionHostPoolType, Geo, Region, Environment, ManagementPlane, AVG_RAM_CommittedBytesInUse, MAX_RAM_CommittedBytesInUse, MIN_RAM_CommittedBytesInUse, MED_RAM_CommittedBytesInUse, ItemsPerTimeBin"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    )
in
    Source



let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents("https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg", "nmw-app-law-fwjv4wn75m4qg", "let paramRangeStart = todatetime('"", DateTime.ToText(strRangeStart, ""yyyy-MM-ddTHH:mm:ss""), ""');#(lf)let paramRangeEnd = todatetime('"", DateTime.ToText(strRangeEnd, ""yyyy-MM-ddTHH:mm:ss""), ""');#(lf)let binSize = 24h;#(lf)Perf#(lf)| extend #(lf)    LocalTime = case(#(lf)        Computer startswith ""M01"" or Computer startswith ""M04"", datetime_add('hour', 0, TimeGenerated),  // EMEA (UTC+0)#(lf)        Computer startswith ""M13"" or Computer startswith ""M14"", datetime_add('hour', 8, TimeGenerated),  // APAC (UTC+8)#(lf)        Computer startswith ""M06"" or Computer startswith ""M09"", datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)#(lf)        datetime_add('hour', 0, TimeGenerated) // Default fallback#(lf)    ),#(lf)    Geo = case(#(lf)        Computer startswith ""M01"" or Computer startswith ""M04"", ""EMEA"",#(lf)        Computer startswith ""M13"" or Computer startswith ""M14"", ""APAC"",#(lf)        Computer startswith ""M06"" or Computer startswith ""M09"", ""AMRS"",#(lf)        ""Other""#(lf)    ),#(lf)    Region = case(#(lf)        Computer startswith ""M01"", ""NEU"",#(lf)        Computer startswith ""M04"", ""WEU"",#(lf)        Computer startswith ""M13"", ""EAS"",#(lf)        Computer startswith ""M14"", ""SEA"",#(lf)        Computer startswith ""M06"", ""EUS2"",#(lf)        Computer startswith ""M09"", ""CUS"",#(lf)        ""Other""#(lf)    ), #(lf)    Environment = case(#(lf)        substring(Computer, 3, 1) == ""T"", ""TST"", #(lf)        substring(Computer, 3, 1) == ""U"", ""UAT"", #(lf)        substring(Computer, 3, 1) == ""D"", ""DEV"", #(lf)        Computer contains ""NACR"", ""CRIMS NonProdA"",#(lf)        Computer contains ""NBCR"", ""CRIMS NonProdB"",#(lf)        Computer contains ""OHCR"", ""OAT CRIMS High"",#(lf)        Computer contains ""OMCR"", ""OAT CRIMS Medium"",#(lf)        Computer contains ""OLCR"", ""OAT CRIMS Low"",#(lf)        Computer contains ""PHCR"", ""PRD CRIMS High"",#(lf)        Computer contains ""PMCR"", ""PRD CRIMS High"",#(lf)        Computer contains ""PLCR"", ""PRD CRIMS Low"",#(lf)        substring(Computer, 3, 1) == ""P"", ""PRD"", #(lf)        ""Other""#(lf)    ),#(lf)    SessionHostPoolType = case(#(lf)        Computer contains ""MSN"", ""MultiSession"",#(lf)        Computer contains ""SSP"", ""Personal"",#(lf)        Computer contains ""NACR"", ""MultiSession"",#(lf)        Computer contains ""NBCR"", ""MultiSession"",#(lf)        Computer contains ""OHCR"", ""MultiSession"",#(lf)        Computer contains ""OMCR"", ""MultiSession"",#(lf)        Computer contains ""OLCR"", ""MultiSession"",#(lf)        Computer contains ""PHCR"", ""MultiSession"",#(lf)        Computer contains ""PMCR"", ""MultiSession"",#(lf)        Computer contains ""PLCR"", ""MultiSession"",#(lf)        Computer contains ""DVLDT"", ""Personal"",#(lf)        ""Other""#(lf)    ),#(lf)    ManagementPlane = case(#(lf)        substring(Computer, 7, 1) == ""I"", ""Intune"",#(lf)        substring(Computer, 7, 1) == ""G"", ""GPO"",#(lf)        Computer contains ""DVLDT"", ""Intune"",#(lf)        ""Other""#(lf)    )#(lf)| extend DayOfWeek = dayofweek (LocalTime)#(lf)| extend HourOfDay = hourofday(LocalTime)#(lf)| extend SessionHostName = trim(' ', tolower(Computer))#(lf)| project-away Computer#(lf)| where LocalTime  between (paramRangeStart .. paramRangeEnd)#(lf)| where ObjectName == 'Memory' and CounterName == '% Committed Bytes In Use'#(lf)| where dayofweek(LocalTime) between (1d .. 5d)#(lf)| where hourofday(LocalTime)  between (8 .. 17)#(lf)| summarize AVG_RAM_CommittedBytesInUse = round(avg(CounterValue), 2), #(lf)            MAX_RAM_CommittedBytesInUse = round(max(CounterValue), 2), #(lf)            MIN_RAM_CommittedBytesInUse = round(min(CounterValue), 2),#(lf)            MED_RAM_CommittedBytesInUse = round(percentile(CounterValue, 50), 2),#(lf)            ItemsPerTimeBin = count() // Counting the number of entries per time bin#(lf)  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, ManagementPlane, SessionHostPoolType#(lf)  | project TimeGenerated = BinnedTime, SessionHostName, SessionHostPoolType, Geo, Region, Environment, ManagementPlane, AVG_RAM_CommittedBytesInUse, MAX_RAM_CommittedBytesInUse, MIN_RAM_CommittedBytesInUse, MED_RAM_CommittedBytesInUse, ItemsPerTimeBin", [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null])
in
    Source






let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let paramRangeStart = todatetime('", 
            DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", 
            DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let binSize = 24h;",
            "Perf",
            "| extend LocalTime = case(",
            "        Computer startswith 'M01' or Computer startswith 'M04', datetime_add('hour', 0, TimeGenerated),  // EMEA (UTC+0)",
            "        Computer startswith 'M13' or Computer startswith 'M14', datetime_add('hour', 8, TimeGenerated),  // APAC (UTC+8)",
            "        Computer startswith 'M06' or Computer startswith 'M09', datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)",
            "        datetime_add('hour', 0, TimeGenerated) // Default fallback",
            "    ),",
            "    Geo = case(",
            "        Computer startswith 'M01' or Computer startswith 'M04', 'EMEA',",
            "        Computer startswith 'M13' or Computer startswith 'M14', 'APAC',",
            "        Computer startswith 'M06' or Computer startswith 'M09', 'AMRS',",
            "        'Other'",
            "    ),",
            "    Region = case(",
            "        Computer startswith 'M01', 'NEU',",
            "        Computer startswith 'M04', 'WEU',",
            "        Computer startswith 'M13', 'EAS',",
            "        Computer startswith 'M14', 'SEA',",
            "        Computer startswith 'M06', 'EUS2',",
            "        Computer startswith 'M09', 'CUS',",
            "        'Other'",
            "    ),",
            "    Environment = case(",
            "        substring(Computer, 3, 1) == 'T', 'TST',",
            "        substring(Computer, 3, 1) == 'U', 'UAT',",
            "        substring(Computer, 3, 1) == 'D', 'DEV',",
            "        Computer contains 'NACR', 'CRIMS NonProdA',",
            "        Computer contains 'NBCR', 'CRIMS NonProdB',",
            "        Computer contains 'OHCR', 'OAT CRIMS High',",
            "        Computer contains 'OMCR', 'OAT CRIMS Medium',",
            "        Computer contains 'OLCR', 'OAT CRIMS Low',",
            "        Computer contains 'PHCR', 'PRD CRIMS High',",
            "        Computer contains 'PMCR', 'PRD CRIMS High',",
            "        Computer contains 'PLCR', 'PRD CRIMS Low',",
            "        substring(Computer, 3, 1) == 'P', 'PRD',",
            "        'Other'",
            "    ),",
            "    SessionHostPoolType = case(",
            "        Computer contains 'MSN', 'MultiSession',",
            "        Computer contains 'SSP', 'Personal',",
            "        Computer contains 'NACR', 'MultiSession',",
            "        Computer contains 'NBCR', 'MultiSession',",
            "        Computer contains 'OHCR', 'MultiSession',",
            "        Computer contains 'OMCR', 'MultiSession',",
            "        Computer contains 'OLCR', 'MultiSession',",
            "        Computer contains 'PHCR', 'MultiSession',",
            "        Computer contains 'PMCR', 'MultiSession',",
            "        Computer contains 'PLCR', 'MultiSession',",
            "        Computer contains 'DVLDT', 'Personal',",
            "        'Other'",
            "    ),",
            "    ManagementPlane = case(",
            "        substring(Computer, 7, 1) == 'I', 'Intune',",
            "        substring(Computer, 7, 1) == 'G', 'GPO',",
            "        Computer contains 'DVLDT', 'Intune',",
            "        'Other'",
            "    )",
            "| extend DayOfWeek = dayofweek(LocalTime)",
            "| extend HourOfDay = hourofday(LocalTime)",
            "| extend SessionHostName = trim(' ', tolower(Computer))",
            "| project-away Computer",
            "| where LocalTime between (paramRangeStart .. paramRangeEnd)",
            "| where ObjectName == 'Memory' and CounterName == '% Committed Bytes In Use'",
            "| where dayofweek(LocalTime) between (1d .. 5d)",
            "| where hourofday(LocalTime) between (8 .. 17)",
            "| summarize AVG_RAM_CommittedBytesInUse = round(avg(CounterValue), 2),",
            "          MAX_RAM_CommittedBytesInUse = round(max(CounterValue), 2),",
            "          MIN_RAM_CommittedBytesInUse = round(min(CounterValue), 2),",
            "          MED_RAM_CommittedBytesInUse = round(percentile(CounterValue, 50), 2),",
            "          ItemsPerTimeBin = count()",
            "  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, ManagementPlane, SessionHostPoolType",
            "| project TimeGenerated = BinnedTime, SessionHostName, SessionHostPoolType, Geo, Region, Environment, ManagementPlane, AVG_RAM_CommittedBytesInUse, MAX_RAM_CommittedBytesInUse, MIN_RAM_CommittedBytesInUse, MED_RAM_CommittedBytesInUse, ItemsPerTimeBin"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    )
in
    Source








let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');
let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');
let binSize = 24h;
let timeRangeStart = now(-1d);
let timeRangeEnd = now();
Perf
| extend 
    LocalTime = case(
        Computer startswith "M01" or Computer startswith "M04", datetime_add('hour', 0, TimeGenerated),  // EMEA (UTC+0)
        Computer startswith "M13" or Computer startswith "M14", datetime_add('hour', 8, TimeGenerated),  // APAC (UTC+8)
        Computer startswith "M06" or Computer startswith "M09", datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)
        datetime_add('hour', 0, TimeGenerated) // Default fallback
    ),
    Geo = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    ),
    Region = case(
        Computer startswith "M01", "NEU",
        Computer startswith "M04", "WEU",
        Computer startswith "M13", "EAS",
        Computer startswith "M14", "SEA",
        Computer startswith "M06", "EUS2",
        Computer startswith "M09", "CUS",
        "Other"
    ), 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        Computer contains "DVLDT", "Personal",
        "Other"
    ),
    ManagementPlane = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        Computer contains "DVLDT", "Intune",
        "Other"
    )
| extend DayOfWeek = dayofweek (LocalTime)
| extend HourOfDay = hourofday(LocalTime)
| extend SessionHostName = trim(' ', tolower(Computer))
| project-away Computer
| where LocalTime  between (paramRangeStart .. paramRangeEnd)
| where ObjectName == 'Memory' and CounterName == '% Committed Bytes In Use'
| where dayofweek(LocalTime) between (1d .. 5d)
| where hourofday(LocalTime)  between (8 .. 17)
| summarize AVG_RAM_CommittedBytesInUse = round(avg(CounterValue), 2), 
            MAX_RAM_CommittedBytesInUse = round(max(CounterValue), 2), 
            MIN_RAM_CommittedBytesInUse = round(min(CounterValue), 2),
            MED_RAM_CommittedBytesInUse = round(percentile(CounterValue, 50), 2),
            ItemsPerTimeBin = count() // Counting the number of entries per time bin
  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, ManagementPlane, SessionHostPoolType
  | project TimeGenerated = BinnedTime, SessionHostName, SessionHostPoolType, Geo, Region, Environment, ManagementPlane, AVG_RAM_CommittedBytesInUse, MAX_RAM_CommittedBytesInUse, MIN_RAM_CommittedBytesInUse, MED_RAM_CommittedBytesInUse, ItemsPerTimeBin
Swap out the KQL below for the one above

let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let paramRangeStart = todatetime('", 
            DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", 
            DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let binSize = 24h;",
            "Perf",
            "| extend LocalTime = case(",
            "        Computer startswith 'M01' or Computer startswith 'M04', datetime_add('hour', 0, TimeGenerated),",
            "        Computer startswith 'M13' or Computer startswith 'M14', datetime_add('hour', 8, TimeGenerated),",
            "        Computer startswith 'M06' or Computer startswith 'M09', datetime_add('hour', -5, TimeGenerated),",
            "        datetime_add('hour', 0, TimeGenerated)",
            "    ),",
            "    Geo = case(",
            "        Computer startswith 'M01' or Computer startswith 'M04', 'EMEA',",
            "        Computer startswith 'M13' or Computer startswith 'M14', 'APAC',",
            "        Computer startswith 'M06' or Computer startswith 'M09', 'AMRS',",
            "        'Other'",
            "    ),",
            "    Region = case(",
            "        Computer startswith 'M01', 'NEU',",
            "        Computer startswith 'M04', 'WEU',",
            "        Computer startswith 'M13', 'EAS',",
            "        Computer startswith 'M14', 'SEA',",
            "        Computer startswith 'M06', 'EUS2',",
            "        Computer startswith 'M09', 'CUS',",
            "        'Other'",
            "    ),",
            "    Environment = case(",
            "        substring(Computer, 3, 1) == 'T', 'TST',",
            "        substring(Computer, 3, 1) == 'U', 'UAT',",
            "        substring(Computer, 3, 1) == 'D', 'DEV',",
            "        Computer contains 'NACR', 'CRIMS NonProdA',",
            "        Computer contains 'NBCR', 'CRIMS NonProdB',",
            "        Computer contains 'OHCR', 'OAT CRIMS High',",
            "        Computer contains 'OMCR', 'OAT CRIMS Medium',",
            "        Computer contains 'OLCR', 'OAT CRIMS Low',",
            "        Computer contains 'PHCR', 'PRD CRIMS High',",
            "        Computer contains 'PMCR', 'PRD CRIMS High',",
            "        Computer contains 'PLCR', 'PRD CRIMS Low',",
            "        substring(Computer, 3, 1) == 'P', 'PRD',",
            "        'Other'",
            "    ),",
            "    SessionHostPoolType = case(",
            "        Computer contains 'MSN', 'MultiSession',",
            "        Computer contains 'SSP', 'Personal',",
            "        Computer contains 'NACR', 'MultiSession',",
            "        Computer contains 'NBCR', 'MultiSession',",
            "        Computer contains 'OHCR', 'MultiSession',",
            "        Computer contains 'OMCR', 'MultiSession',",
            "        Computer contains 'OLCR', 'MultiSession',",
            "        Computer contains 'PHCR', 'MultiSession',",
            "        Computer contains 'PMCR', 'MultiSession',",
            "        Computer contains 'PLCR', 'MultiSession',",
            "        Computer contains 'DVLDT', 'Personal',",
            "        'Other'",
            "    ),",
            "    ManagementPlane = case(",
            "        substring(Computer, 7, 1) == 'I', 'Intune',",
            "        substring(Computer, 7, 1) == 'G', 'GPO',",
            "        Computer contains 'DVLDT', 'Intune',",
            "        'Other'",
            "    )",
            "| extend DayOfWeek = dayofweek(LocalTime)",
            "| extend HourOfDay = hourofday(LocalTime)",
            "| extend SessionHostName = trim(' ', tolower(Computer))",
            "| project-away Computer",
            "| where LocalTime between (paramRangeStart .. paramRangeEnd)",
            "| where ObjectName == 'Processor Information' and CounterName == '% Processor Time'",
            "| where dayofweek(LocalTime) between (1d .. 5d)",
            "| where hourofday(LocalTime) between (8 .. 17)",
            "| summarize AVG_CPU = round(avg(CounterValue), 2),",
            "          MAX_CPU = round(max(CounterValue), 2),",
            "          MIN_CPU = round(min(CounterValue), 2),",
            "          MED_CPU = round(percentile(CounterValue, 50), 2),",
            "          ItemsPerTimeBin = count()",
            "  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, SessionHostPoolType, ManagementPlane",
            "| extend SessionHostKey = substring(SessionHostName, 0, 8)",
            "| project TimeGenerated = BinnedTime, SessionHostName, SessionHostPoolType, SessionHostKey, Geo, Region, Environment, ManagementPlane, AVG_CPU, MAX_CPU, MED_CPU, MIN_CPU, ItemsPerTimeBin"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    )
in
    Source







let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "Perf",
            "| where TimeGenerated between (paramRangeStart..paramRangeEnd)",
            "| extend SessionHostName = trim(' ', tolower(Computer))",
            "| project-away Computer",
            "| summarize arg_max(TimeGenerated, *) by SessionHostName",
            "| extend SessionHostKey = substring(SessionHostName, 0, 8)",
            "| project TimeGenerated, SessionHostName, SessionHostKey"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    ),
    #"Removed Duplicates" = Table.Distinct(Source)
in
    #"Removed Duplicates"


let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');
let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');
Perf
| where TimeGenerated between (paramRangeStart..paramRangeEnd)
| extend SessionHostName = trim(' ', tolower(Computer))
|project-away Computer
| summarize arg_max(TimeGenerated, *) by SessionHostName
| extend SessionHostKey = substring(SessionHostName, 0, 8)
| project TimeGenerated, SessionHostName, SessionHostKey

replace KQL in M-Query below with KQL above.

let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "WVDConnections",
            "| where TimeGenerated between (paramRangeStart..paramRangeEnd)",
            "| where SessionHostName != '<>'",
            "| extend HostPoolName = tostring(split(_ResourceId, '/')[-1])",
            "| summarize arg_max(TimeGenerated, *) by SessionHostName",
            "| extend SessionHostName = trim(' ', tolower(SessionHostName))",
            "| project TimeGenerated, SessionHostName, HostPoolName"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    ),
    #"Removed Duplicates" = Table.Distinct(Source)
in
    #"Removed Duplicates"

Working KQL for CPU

let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');
let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');
let binSize = 24h;
let timeRangeStart = now(-1d);
let timeRangeEnd = now();
Perf
| extend 
    LocalTime = case(
        Computer startswith "M01" or Computer startswith "M04", datetime_add('hour', 0, TimeGenerated),  // EMEA (UTC+0)
        Computer startswith "M13" or Computer startswith "M14", datetime_add('hour', 8, TimeGenerated),  // APAC (UTC+8)
        Computer startswith "M06" or Computer startswith "M09", datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)
        datetime_add('hour', 0, TimeGenerated) // Default fallback
    ),
    Geo = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    ),
    Region = case(
        Computer startswith "M01", "NEU",
        Computer startswith "M04", "WEU",
        Computer startswith "M13", "EAS",
        Computer startswith "M14", "SEA",
        Computer startswith "M06", "EUS2",
        Computer startswith "M09", "CUS",
        "Other"
    ), 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        Computer contains "DVLDT", "Personal",
        "Other"
    ),
    ManagementPlane = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        Computer contains "DVLDT", "Intune",
        "Other"
    )
| extend DayOfWeek = dayofweek (LocalTime)
| extend HourOfDay = hourofday(LocalTime)
| extend SessionHostName = trim(' ', tolower(Computer))
| project-away Computer
| where LocalTime  between (paramRangeStart .. paramRangeEnd)
| where ObjectName == "Processor Information" and CounterName == "% Processor Time"
| where dayofweek(LocalTime) between (1d .. 5d)
| where hourofday(LocalTime)  between (8 .. 17)
| summarize AVG_CPU = round(avg(CounterValue), 2), 
            MAX_CPU = round(max(CounterValue), 2), 
            MIN_CPU = round(min(CounterValue), 2),
            MED_CPU = round(percentile(CounterValue, 50), 2),
            ItemsPerTimeBin = count() // Counting the number of entries per time bin
  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, ManagementPlane
  | project TimeGenerated = BinnedTime, SessionHostName, Geo, Region, Environment, ManagementPlane, AVG_CPU, MAX_CPU, MED_CPU, MIN_CPU, ItemsPerTimeBin
