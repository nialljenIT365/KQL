let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let binSize = 24h;",
            "Perf",
            "| extend ",
            "    LocalTime = case(",
            "        Computer startswith 'M01' or Computer startswith 'M04', datetime_add('hour', 0, TimeGenerated),  // EMEA (UTC+0)",
            "        Computer startswith 'M13' or Computer startswith 'M14', datetime_add('hour', 8, TimeGenerated),  // APAC (UTC+8)",
            "        Computer startswith 'M06' or Computer startswith 'M09', datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)",
            "        datetime_add('hour', 0, TimeGenerated) // Default fallback",
            "    ),",
            "    Geo = case(",
            "        Computer startswith 'M01' or Computer startswith 'M04', 'EMEA',",
            "        Computer startswith 'M13' or Computer startswith 'M14', 'APAC',",
            "        Computer startswith 'M06' or Computer startswith 'M09', 'AMRS',",
            "        'Other'",
            "    ),",
            "    Region = case(",
            "        Computer startswith 'M01', 'NEU',",
            "        Computer startswith 'M04', 'WEU',",
            "        Computer startswith 'M13', 'EAS',",
            "        Computer startswith 'M14', 'SEA',",
            "        Computer startswith 'M06', 'EUS2',",
            "        Computer startswith 'M09', 'CUS',",
            "        'Other'",
            "    ),",
            "    Environment = case(",
            "        substring(Computer, 3, 1) == 'T', 'TST', ",
            "        substring(Computer, 3, 1) == 'U', 'UAT', ",
            "        substring(Computer, 3, 1) == 'D', 'DEV', ",
            "        Computer contains 'NACR', 'CRIMS NonProdA',",
            "        Computer contains 'NBCR', 'CRIMS NonProdB',",
            "        Computer contains 'OHCR', 'OAT CRIMS High',",
            "        Computer contains 'OMCR', 'OAT CRIMS Medium',",
            "        Computer contains 'OLCR', 'OAT CRIMS Low',",
            "        Computer contains 'PHCR', 'PRD CRIMS High',",
            "        Computer contains 'PMCR', 'PRD CRIMS High',",
            "        Computer contains 'PLCR', 'PRD CRIMS Low',",
            "        substring(Computer, 3, 1) == 'P', 'PRD', ",
            "        'Other'",
            "    ),",
            "    SessionHostPoolType = case(",
            "        Computer contains 'MSN', 'MultiSession',",
            "        Computer contains 'SSP', 'Personal',",
            "        Computer contains 'NACR', 'MultiSession',",
            "        Computer contains 'NBCR', 'MultiSession',",
            "        Computer contains 'OHCR', 'MultiSession',",
            "        Computer contains 'OMCR', 'MultiSession',",
            "        Computer contains 'OLCR', 'MultiSession',",
            "        Computer contains 'PHCR', 'MultiSession',",
            "        Computer contains 'PMCR', 'MultiSession',",
            "        Computer contains 'PLCR', 'MultiSession',",
            "        Computer contains 'DVLDT', 'Personal',",
            "        'Other'",
            "    ),",
            "    ManagementPlane = case(",
            "        substring(Computer, 7, 1) == 'I', 'Intune',",
            "        substring(Computer, 7, 1) == 'G', 'GPO',",
            "        Computer contains 'DVLDT', 'Intune',",
            "        'Other'",
            "    )",
            "| where LocalTime between (paramRangeStart .. paramRangeEnd)",
            "| where ObjectName == 'Processor Information' and CounterName == '% Processor Time'",
            "| where dayofweek(LocalTime) between (1d .. 5d)",
            "| where hourofday(LocalTime) between (8 .. 17)",
            "| summarize AVG_CPU = round(avg(CounterValue), 2),",
            "          MAX_CPU = round(max(CounterValue), 2),",
            "          MIN_CPU = round(min(CounterValue), 2),",
            "          MED_CPU = round(percentile(CounterValue, 50), 2),",
            "          ItemsPerTimeBin = count()",
            "  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, ManagementPlane",
            "| project TimeGenerated = BinnedTime, SessionHostName, Geo, Region, Environment, ManagementPlane, AVG_CPU, MAX_CPU, MED_CPU, MIN_CPU, ItemsPerTimeBin"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    )
in
    Source





Bad request: failed to query Draft resource name: nmw-app-law-fwjv4wn75m4qg, resource id: ce4e1e84-3765-4cfe-ac40-5de8d7633df4; (inner error: {"code":"Bad Request","message":"{\"error\":{\"message\":\"The request had some invalid properties\",\"code\":\"BadArgumentError\",\"correlationId\":\"7ff7deea-a8c4-4098-9d38-b76bd807801d\",\"innererror\":{\"code\":\"SyntaxError\",\"message\":\"A recognition error occurred in the query.\",\"innererror\":{\"code\":\"SYN0002\",\"message\":\"Query could not be parsed at '|' on line [1,266]\",\"line\":1,\"pos\":266,\"token\":\"|\"}}}}"})
Details:
    Error=failed to query Draft resource name: nmw-app-law-fwjv4wn75m4qg, resource id: ce4e1e84-3765-4cfe-ac40-5de8d7633df4; (inner error: {"code":"Bad Request","message":"{\"error\":{\"message\":\"The request had some invalid properties\",\"code\":\"BadArgumentError\",\"correlationId\":\"7ff7deea-a8c4-4098-9d38-b76bd807801d\",\"innererror\":{\"code\":\"SyntaxError\",\"message\":\"A recognition error occurred in the query.\",\"innererror\":{\"code\":\"SYN0002\",\"message\":\"Query could not be parsed at '|' on line [1,266]\",\"line\":1,\"pos\":266,\"token\":\"|\"}}}}"})
    Code=FailedToQueryDraft
    Type=adxproxy.Exceptions.FailedToQueryDraft
    x-ms-activity-id=199ee653-000f-44ff-97be-54fca39c7635
    x-ms-client-request-id=KPBI;e6331fce-ce11-4ce9-a408-9685530bbf39;be7b8aae-b8a9-4dd8-849b-ec8032e0c229;fc900b6e-25ab-4c46-87c9-bab44e3b5387


let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let binSize = 24h;",
            "Perf",
            "| extend ",
            "    LocalTime = case(",
            "        Computer startswith 'M01' or Computer startswith 'M04', datetime_add('hour', 0, TimeGenerated),  // EMEA (UTC+0)",
            "        Computer startswith 'M13' or Computer startswith 'M14', datetime_add('hour', 8, TimeGenerated),  // APAC (UTC+8)",
            "        Computer startswith 'M06' or Computer startswith 'M09', datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)",
            "        datetime_add('hour', 0, TimeGenerated) // Default fallback",
            "    ),",
            "    Geo = case(",
            "        Computer startswith 'M01' or Computer startswith 'M04', 'EMEA',",
            "        Computer startswith 'M13' or Computer startswith 'M14', 'APAC',",
            "        Computer startswith 'M06' or Computer startswith 'M09', 'AMRS',",
            "        'Other'",
            "    ),",
            "    Region = case(",
            "        Computer startswith 'M01', 'NEU',",
            "        Computer startswith 'M04', 'WEU',",
            "        Computer startswith 'M13', 'EAS',",
            "        Computer startswith 'M14', 'SEA',",
            "        Computer startswith 'M06', 'EUS2',",
            "        Computer startswith 'M09', 'CUS',",
            "        'Other'",
            "    ),",
            "    Environment = case(",
            "        substring(Computer, 3, 1) == 'T', 'TST', ",
            "        substring(Computer, 3, 1) == 'U', 'UAT', ",
            "        substring(Computer, 3, 1) == 'D', 'DEV', ",
            "        Computer contains 'NACR', 'CRIMS NonProdA',",
            "        Computer contains 'NBCR', 'CRIMS NonProdB',",
            "        Computer contains 'OHCR', 'OAT CRIMS High',",
            "        Computer contains 'OMCR', 'OAT CRIMS Medium',",
            "        Computer contains 'OLCR', 'OAT CRIMS Low',",
            "        Computer contains 'PHCR', 'PRD CRIMS High',",
            "        Computer contains 'PMCR', 'PRD CRIMS High',",
            "        Computer contains 'PLCR', 'PRD CRIMS Low',",
            "        substring(Computer, 3, 1) == 'P', 'PRD', ",
            "        'Other'",
            "    ),",
            "    SessionHostPoolType = case(",
            "        Computer contains 'MSN', 'MultiSession',",
            "        Computer contains 'SSP', 'Personal',",
            "        Computer contains 'NACR', 'MultiSession',",
            "        Computer contains 'NBCR', 'MultiSession',",
            "        Computer contains 'OHCR', 'MultiSession',",
            "        Computer contains 'OMCR', 'MultiSession',",
            "        Computer contains 'OLCR', 'MultiSession',",
            "        Computer contains 'PHCR', 'MultiSession',",
            "        Computer contains 'PMCR', 'MultiSession',",
            "        Computer contains 'PLCR', 'MultiSession',",
            "        Computer contains 'DVLDT', 'Personal',",
            "        'Other'",
            "    ),",
            "    ManagementPlane = case(",
            "        substring(Computer, 7, 1) == 'I', 'Intune',",
            "        substring(Computer, 7, 1) == 'G', 'GPO',",
            "        Computer contains 'DVLDT', 'Intune',",
            "        'Other'",
            "    )",
            "| extend DayOfWeek = dayofweek(LocalTime)",
            "| extend HourOfDay = hourofday(LocalTime)",
            "| extend SessionHostName = trim(' ', tolower(Computer))",
            "| project-away Computer",
            "| where LocalTime between (paramRangeStart .. paramRangeEnd)",
            "| where ObjectName == 'Processor Information' and CounterName == '% Processor Time'",
            "| where dayofweek(LocalTime) between (1d .. 5d)",
            "| where hourofday(LocalTime) between (8 .. 17)",
            "| summarize AVG_CPU = round(avg(CounterValue), 2),",
            "          MAX_CPU = round(max(CounterValue), 2),",
            "          MIN_CPU = round(min(CounterValue), 2),",
            "          MED_CPU = round(percentile(CounterValue, 50), 2),",
            "          ItemsPerTimeBin = count()",
            "  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, ManagementPlane",
            "| project TimeGenerated = BinnedTime, SessionHostName, Geo, Region, Environment, ManagementPlane, AVG_CPU, MAX_CPU, MED_CPU, MIN_CPU, ItemsPerTimeBin"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    )
in
    Source






let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');
let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');
let binSize = 24h;
let timeRangeStart = now(-1d);
let timeRangeEnd = now();
Perf
| extend 
    LocalTime = case(
        Computer startswith "M01" or Computer startswith "M04", datetime_add('hour', 0, TimeGenerated),  // EMEA (UTC+0)
        Computer startswith "M13" or Computer startswith "M14", datetime_add('hour', 8, TimeGenerated),  // APAC (UTC+8)
        Computer startswith "M06" or Computer startswith "M09", datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)
        datetime_add('hour', 0, TimeGenerated) // Default fallback
    ),
    Geo = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    ),
    Region = case(
        Computer startswith "M01", "NEU",
        Computer startswith "M04", "WEU",
        Computer startswith "M13", "EAS",
        Computer startswith "M14", "SEA",
        Computer startswith "M06", "EUS2",
        Computer startswith "M09", "CUS",
        "Other"
    ), 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        Computer contains "DVLDT", "Personal",
        "Other"
    ),
    ManagementPlane = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        Computer contains "DVLDT", "Intune",
        "Other"
    )
| extend DayOfWeek = dayofweek (LocalTime)
| extend HourOfDay = hourofday(LocalTime)
| extend SessionHostName = trim(' ', tolower(Computer))
| project-away Computer
| where LocalTime  between (paramRangeStart .. paramRangeEnd)
| where ObjectName == "Processor Information" and CounterName == "% Processor Time"
| where dayofweek(LocalTime) between (1d .. 5d)
| where hourofday(LocalTime)  between (8 .. 17)
| summarize AVG_CPU = round(avg(CounterValue), 2), 
            MAX_CPU = round(max(CounterValue), 2), 
            MIN_CPU = round(min(CounterValue), 2),
            MED_CPU = round(percentile(CounterValue, 50), 2),
            ItemsPerTimeBin = count() // Counting the number of entries per time bin
  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, ManagementPlane
  | project TimeGenerated = BinnedTime, SessionHostName, Geo, Region, Environment, ManagementPlane, AVG_CPU, MAX_CPU, MED_CPU, MIN_CPU, ItemsPerTimeBin


Replace the KQL in the M-Query below with the KQL above.

let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let binSize = 5m;",
            "let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "Perf",
            "| where TimeGenerated between (paramRangeStart .. paramRangeEnd)",
            "| where ObjectName == 'Processor Information' and CounterName == '% Processor Time'",
            "| summarize AVG_CPU = round(avg(CounterValue), 2),",
            "          MAX_CPU = round(max(CounterValue), 2),",
            "          MIN_CPU = round(min(CounterValue), 2),",
            "          MED_CPU = round(percentile(CounterValue, 50), 2),",
            "          ItemsPerTimeBin = count()",
            "by BinnedTime = bin(TimeGenerated, binSize), Computer",
            "| extend Computer = trim(' ', tolower(Computer))",
            "| extend Timekey = format_datetime(BinnedTime, 'HHmm')",
            "| project TimeGenerated = BinnedTime,",
            "         Timekey,",
            "         SessionHostName = Computer,",
            "         AVG_CPU,",
            "         MED_CPU,",
            "         MAX_CPU,",
            "         MIN_CPU,",
            "         ItemsPerTimeBin"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    )
in
    Source
