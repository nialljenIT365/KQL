let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents("https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg", "nmw-app-law-fwjv4wn75m4qg", "let paramRangeStart = todatetime('"", DateTime.ToText(strRangeStart, ""yyyy-MM-ddTHH:mm:ss""), ""');#(lf)let paramRangeEnd = todatetime('"", DateTime.ToText(strRangeEnd, ""yyyy-MM-ddTHH:mm:ss""), ""');#(lf)let binSize = 24h;#(lf)Perf#(lf)| extend #(lf)    LocalTime = case(#(lf)        Computer startswith ""M01"" or Computer startswith ""M04"", datetime_add('hour', 0, TimeGenerated),  // EMEA (UTC+0)#(lf)        Computer startswith ""M13"" or Computer startswith ""M14"", datetime_add('hour', 8, TimeGenerated),  // APAC (UTC+8)#(lf)        Computer startswith ""M06"" or Computer startswith ""M09"", datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)#(lf)        datetime_add('hour', 0, TimeGenerated) // Default fallback#(lf)    ),#(lf)    Geo = case(#(lf)        Computer startswith ""M01"" or Computer startswith ""M04"", ""EMEA"",#(lf)        Computer startswith ""M13"" or Computer startswith ""M14"", ""APAC"",#(lf)        Computer startswith ""M06"" or Computer startswith ""M09"", ""AMRS"",#(lf)        ""Other""#(lf)    ),#(lf)    Region = case(#(lf)        Computer startswith ""M01"", ""NEU"",#(lf)        Computer startswith ""M04"", ""WEU"",#(lf)        Computer startswith ""M13"", ""EAS"",#(lf)        Computer startswith ""M14"", ""SEA"",#(lf)        Computer startswith ""M06"", ""EUS2"",#(lf)        Computer startswith ""M09"", ""CUS"",#(lf)        ""Other""#(lf)    ), #(lf)    Environment = case(#(lf)        substring(Computer, 3, 1) == ""T"", ""TST"", #(lf)        substring(Computer, 3, 1) == ""U"", ""UAT"", #(lf)        substring(Computer, 3, 1) == ""D"", ""DEV"", #(lf)        Computer contains ""NACR"", ""CRIMS NonProdA"",#(lf)        Computer contains ""NBCR"", ""CRIMS NonProdB"",#(lf)        Computer contains ""OHCR"", ""OAT CRIMS High"",#(lf)        Computer contains ""OMCR"", ""OAT CRIMS Medium"",#(lf)        Computer contains ""OLCR"", ""OAT CRIMS Low"",#(lf)        Computer contains ""PHCR"", ""PRD CRIMS High"",#(lf)        Computer contains ""PMCR"", ""PRD CRIMS High"",#(lf)        Computer contains ""PLCR"", ""PRD CRIMS Low"",#(lf)        substring(Computer, 3, 1) == ""P"", ""PRD"", #(lf)        ""Other""#(lf)    ),#(lf)    SessionHostPoolType = case(#(lf)        Computer contains ""MSN"", ""MultiSession"",#(lf)        Computer contains ""SSP"", ""Personal"",#(lf)        Computer contains ""NACR"", ""MultiSession"",#(lf)        Computer contains ""NBCR"", ""MultiSession"",#(lf)        Computer contains ""OHCR"", ""MultiSession"",#(lf)        Computer contains ""OMCR"", ""MultiSession"",#(lf)        Computer contains ""OLCR"", ""MultiSession"",#(lf)        Computer contains ""PHCR"", ""MultiSession"",#(lf)        Computer contains ""PMCR"", ""MultiSession"",#(lf)        Computer contains ""PLCR"", ""MultiSession"",#(lf)        Computer contains ""DVLDT"", ""Personal"",#(lf)        ""Other""#(lf)    ),#(lf)    ManagementPlane = case(#(lf)        substring(Computer, 7, 1) == ""I"", ""Intune"",#(lf)        substring(Computer, 7, 1) == ""G"", ""GPO"",#(lf)        Computer contains ""DVLDT"", ""Intune"",#(lf)        ""Other""#(lf)    )#(lf)| extend DayOfWeek = dayofweek (LocalTime)#(lf)| extend HourOfDay = hourofday(LocalTime)#(lf)| extend SessionHostName = trim(' ', tolower(Computer))#(lf)| project-away Computer#(lf)| where LocalTime  between (paramRangeStart .. paramRangeEnd)#(lf)| where ObjectName == 'Memory' and CounterName == '% Committed Bytes In Use'#(lf)| where dayofweek(LocalTime) between (1d .. 5d)#(lf)| where hourofday(LocalTime)  between (8 .. 17)#(lf)| summarize AVG_RAM_CommittedBytesInUse = round(avg(CounterValue), 2), #(lf)            MAX_RAM_CommittedBytesInUse = round(max(CounterValue), 2), #(lf)            MIN_RAM_CommittedBytesInUse = round(min(CounterValue), 2),#(lf)            MED_RAM_CommittedBytesInUse = round(percentile(CounterValue, 50), 2),#(lf)            ItemsPerTimeBin = count() // Counting the number of entries per time bin#(lf)  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, ManagementPlane, SessionHostPoolType#(lf)  | project TimeGenerated = BinnedTime, SessionHostName, SessionHostPoolType, Geo, Region, Environment, ManagementPlane, AVG_RAM_CommittedBytesInUse, MAX_RAM_CommittedBytesInUse, MIN_RAM_CommittedBytesInUse, MED_RAM_CommittedBytesInUse, ItemsPerTimeBin", [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null])
in
    Source






let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let paramRangeStart = todatetime('", 
            DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", 
            DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let binSize = 24h;",
            "Perf",
            "| extend LocalTime = case(",
            "        Computer startswith 'M01' or Computer startswith 'M04', datetime_add('hour', 0, TimeGenerated),  // EMEA (UTC+0)",
            "        Computer startswith 'M13' or Computer startswith 'M14', datetime_add('hour', 8, TimeGenerated),  // APAC (UTC+8)",
            "        Computer startswith 'M06' or Computer startswith 'M09', datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)",
            "        datetime_add('hour', 0, TimeGenerated) // Default fallback",
            "    ),",
            "    Geo = case(",
            "        Computer startswith 'M01' or Computer startswith 'M04', 'EMEA',",
            "        Computer startswith 'M13' or Computer startswith 'M14', 'APAC',",
            "        Computer startswith 'M06' or Computer startswith 'M09', 'AMRS',",
            "        'Other'",
            "    ),",
            "    Region = case(",
            "        Computer startswith 'M01', 'NEU',",
            "        Computer startswith 'M04', 'WEU',",
            "        Computer startswith 'M13', 'EAS',",
            "        Computer startswith 'M14', 'SEA',",
            "        Computer startswith 'M06', 'EUS2',",
            "        Computer startswith 'M09', 'CUS',",
            "        'Other'",
            "    ),",
            "    Environment = case(",
            "        substring(Computer, 3, 1) == 'T', 'TST',",
            "        substring(Computer, 3, 1) == 'U', 'UAT',",
            "        substring(Computer, 3, 1) == 'D', 'DEV',",
            "        Computer contains 'NACR', 'CRIMS NonProdA',",
            "        Computer contains 'NBCR', 'CRIMS NonProdB',",
            "        Computer contains 'OHCR', 'OAT CRIMS High',",
            "        Computer contains 'OMCR', 'OAT CRIMS Medium',",
            "        Computer contains 'OLCR', 'OAT CRIMS Low',",
            "        Computer contains 'PHCR', 'PRD CRIMS High',",
            "        Computer contains 'PMCR', 'PRD CRIMS High',",
            "        Computer contains 'PLCR', 'PRD CRIMS Low',",
            "        substring(Computer, 3, 1) == 'P', 'PRD',",
            "        'Other'",
            "    ),",
            "    SessionHostPoolType = case(",
            "        Computer contains 'MSN', 'MultiSession',",
            "        Computer contains 'SSP', 'Personal',",
            "        Computer contains 'NACR', 'MultiSession',",
            "        Computer contains 'NBCR', 'MultiSession',",
            "        Computer contains 'OHCR', 'MultiSession',",
            "        Computer contains 'OMCR', 'MultiSession',",
            "        Computer contains 'OLCR', 'MultiSession',",
            "        Computer contains 'PHCR', 'MultiSession',",
            "        Computer contains 'PMCR', 'MultiSession',",
            "        Computer contains 'PLCR', 'MultiSession',",
            "        Computer contains 'DVLDT', 'Personal',",
            "        'Other'",
            "    ),",
            "    ManagementPlane = case(",
            "        substring(Computer, 7, 1) == 'I', 'Intune',",
            "        substring(Computer, 7, 1) == 'G', 'GPO',",
            "        Computer contains 'DVLDT', 'Intune',",
            "        'Other'",
            "    )",
            "| extend DayOfWeek = dayofweek(LocalTime)",
            "| extend HourOfDay = hourofday(LocalTime)",
            "| extend SessionHostName = trim(' ', tolower(Computer))",
            "| project-away Computer",
            "| where LocalTime between (paramRangeStart .. paramRangeEnd)",
            "| where ObjectName == 'Memory' and CounterName == '% Committed Bytes In Use'",
            "| where dayofweek(LocalTime) between (1d .. 5d)",
            "| where hourofday(LocalTime) between (8 .. 17)",
            "| summarize AVG_RAM_CommittedBytesInUse = round(avg(CounterValue), 2),",
            "          MAX_RAM_CommittedBytesInUse = round(max(CounterValue), 2),",
            "          MIN_RAM_CommittedBytesInUse = round(min(CounterValue), 2),",
            "          MED_RAM_CommittedBytesInUse = round(percentile(CounterValue, 50), 2),",
            "          ItemsPerTimeBin = count()",
            "  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, ManagementPlane, SessionHostPoolType",
            "| project TimeGenerated = BinnedTime, SessionHostName, SessionHostPoolType, Geo, Region, Environment, ManagementPlane, AVG_RAM_CommittedBytesInUse, MAX_RAM_CommittedBytesInUse, MIN_RAM_CommittedBytesInUse, MED_RAM_CommittedBytesInUse, ItemsPerTimeBin"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    )
in
    Source








let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');
let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');
let binSize = 24h;
let timeRangeStart = now(-1d);
let timeRangeEnd = now();
Perf
| extend 
    LocalTime = case(
        Computer startswith "M01" or Computer startswith "M04", datetime_add('hour', 0, TimeGenerated),  // EMEA (UTC+0)
        Computer startswith "M13" or Computer startswith "M14", datetime_add('hour', 8, TimeGenerated),  // APAC (UTC+8)
        Computer startswith "M06" or Computer startswith "M09", datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)
        datetime_add('hour', 0, TimeGenerated) // Default fallback
    ),
    Geo = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    ),
    Region = case(
        Computer startswith "M01", "NEU",
        Computer startswith "M04", "WEU",
        Computer startswith "M13", "EAS",
        Computer startswith "M14", "SEA",
        Computer startswith "M06", "EUS2",
        Computer startswith "M09", "CUS",
        "Other"
    ), 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        Computer contains "DVLDT", "Personal",
        "Other"
    ),
    ManagementPlane = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        Computer contains "DVLDT", "Intune",
        "Other"
    )
| extend DayOfWeek = dayofweek (LocalTime)
| extend HourOfDay = hourofday(LocalTime)
| extend SessionHostName = trim(' ', tolower(Computer))
| project-away Computer
| where LocalTime  between (paramRangeStart .. paramRangeEnd)
| where ObjectName == 'Memory' and CounterName == '% Committed Bytes In Use'
| where dayofweek(LocalTime) between (1d .. 5d)
| where hourofday(LocalTime)  between (8 .. 17)
| summarize AVG_RAM_CommittedBytesInUse = round(avg(CounterValue), 2), 
            MAX_RAM_CommittedBytesInUse = round(max(CounterValue), 2), 
            MIN_RAM_CommittedBytesInUse = round(min(CounterValue), 2),
            MED_RAM_CommittedBytesInUse = round(percentile(CounterValue, 50), 2),
            ItemsPerTimeBin = count() // Counting the number of entries per time bin
  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, ManagementPlane, SessionHostPoolType
  | project TimeGenerated = BinnedTime, SessionHostName, SessionHostPoolType, Geo, Region, Environment, ManagementPlane, AVG_RAM_CommittedBytesInUse, MAX_RAM_CommittedBytesInUse, MIN_RAM_CommittedBytesInUse, MED_RAM_CommittedBytesInUse, ItemsPerTimeBin
Swap out the KQL below for the one above

let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let paramRangeStart = todatetime('", 
            DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", 
            DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let binSize = 24h;",
            "Perf",
            "| extend LocalTime = case(",
            "        Computer startswith 'M01' or Computer startswith 'M04', datetime_add('hour', 0, TimeGenerated),",
            "        Computer startswith 'M13' or Computer startswith 'M14', datetime_add('hour', 8, TimeGenerated),",
            "        Computer startswith 'M06' or Computer startswith 'M09', datetime_add('hour', -5, TimeGenerated),",
            "        datetime_add('hour', 0, TimeGenerated)",
            "    ),",
            "    Geo = case(",
            "        Computer startswith 'M01' or Computer startswith 'M04', 'EMEA',",
            "        Computer startswith 'M13' or Computer startswith 'M14', 'APAC',",
            "        Computer startswith 'M06' or Computer startswith 'M09', 'AMRS',",
            "        'Other'",
            "    ),",
            "    Region = case(",
            "        Computer startswith 'M01', 'NEU',",
            "        Computer startswith 'M04', 'WEU',",
            "        Computer startswith 'M13', 'EAS',",
            "        Computer startswith 'M14', 'SEA',",
            "        Computer startswith 'M06', 'EUS2',",
            "        Computer startswith 'M09', 'CUS',",
            "        'Other'",
            "    ),",
            "    Environment = case(",
            "        substring(Computer, 3, 1) == 'T', 'TST',",
            "        substring(Computer, 3, 1) == 'U', 'UAT',",
            "        substring(Computer, 3, 1) == 'D', 'DEV',",
            "        Computer contains 'NACR', 'CRIMS NonProdA',",
            "        Computer contains 'NBCR', 'CRIMS NonProdB',",
            "        Computer contains 'OHCR', 'OAT CRIMS High',",
            "        Computer contains 'OMCR', 'OAT CRIMS Medium',",
            "        Computer contains 'OLCR', 'OAT CRIMS Low',",
            "        Computer contains 'PHCR', 'PRD CRIMS High',",
            "        Computer contains 'PMCR', 'PRD CRIMS High',",
            "        Computer contains 'PLCR', 'PRD CRIMS Low',",
            "        substring(Computer, 3, 1) == 'P', 'PRD',",
            "        'Other'",
            "    ),",
            "    SessionHostPoolType = case(",
            "        Computer contains 'MSN', 'MultiSession',",
            "        Computer contains 'SSP', 'Personal',",
            "        Computer contains 'NACR', 'MultiSession',",
            "        Computer contains 'NBCR', 'MultiSession',",
            "        Computer contains 'OHCR', 'MultiSession',",
            "        Computer contains 'OMCR', 'MultiSession',",
            "        Computer contains 'OLCR', 'MultiSession',",
            "        Computer contains 'PHCR', 'MultiSession',",
            "        Computer contains 'PMCR', 'MultiSession',",
            "        Computer contains 'PLCR', 'MultiSession',",
            "        Computer contains 'DVLDT', 'Personal',",
            "        'Other'",
            "    ),",
            "    ManagementPlane = case(",
            "        substring(Computer, 7, 1) == 'I', 'Intune',",
            "        substring(Computer, 7, 1) == 'G', 'GPO',",
            "        Computer contains 'DVLDT', 'Intune',",
            "        'Other'",
            "    )",
            "| extend DayOfWeek = dayofweek(LocalTime)",
            "| extend HourOfDay = hourofday(LocalTime)",
            "| extend SessionHostName = trim(' ', tolower(Computer))",
            "| project-away Computer",
            "| where LocalTime between (paramRangeStart .. paramRangeEnd)",
            "| where ObjectName == 'Processor Information' and CounterName == '% Processor Time'",
            "| where dayofweek(LocalTime) between (1d .. 5d)",
            "| where hourofday(LocalTime) between (8 .. 17)",
            "| summarize AVG_CPU = round(avg(CounterValue), 2),",
            "          MAX_CPU = round(max(CounterValue), 2),",
            "          MIN_CPU = round(min(CounterValue), 2),",
            "          MED_CPU = round(percentile(CounterValue, 50), 2),",
            "          ItemsPerTimeBin = count()",
            "  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, SessionHostPoolType, ManagementPlane",
            "| extend SessionHostKey = substring(SessionHostName, 0, 8)",
            "| project TimeGenerated = BinnedTime, SessionHostName, SessionHostPoolType, SessionHostKey, Geo, Region, Environment, ManagementPlane, AVG_CPU, MAX_CPU, MED_CPU, MIN_CPU, ItemsPerTimeBin"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    )
in
    Source







let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "Perf",
            "| where TimeGenerated between (paramRangeStart..paramRangeEnd)",
            "| extend SessionHostName = trim(' ', tolower(Computer))",
            "| project-away Computer",
            "| summarize arg_max(TimeGenerated, *) by SessionHostName",
            "| extend SessionHostKey = substring(SessionHostName, 0, 8)",
            "| project TimeGenerated, SessionHostName, SessionHostKey"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    ),
    #"Removed Duplicates" = Table.Distinct(Source)
in
    #"Removed Duplicates"


let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');
let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');
Perf
| where TimeGenerated between (paramRangeStart..paramRangeEnd)
| extend SessionHostName = trim(' ', tolower(Computer))
|project-away Computer
| summarize arg_max(TimeGenerated, *) by SessionHostName
| extend SessionHostKey = substring(SessionHostName, 0, 8)
| project TimeGenerated, SessionHostName, SessionHostKey

replace KQL in M-Query below with KQL above.

let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "WVDConnections",
            "| where TimeGenerated between (paramRangeStart..paramRangeEnd)",
            "| where SessionHostName != '<>'",
            "| extend HostPoolName = tostring(split(_ResourceId, '/')[-1])",
            "| summarize arg_max(TimeGenerated, *) by SessionHostName",
            "| extend SessionHostName = trim(' ', tolower(SessionHostName))",
            "| project TimeGenerated, SessionHostName, HostPoolName"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    ),
    #"Removed Duplicates" = Table.Distinct(Source)
in
    #"Removed Duplicates"

Working KQL for CPU

let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');
let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');
let binSize = 24h;
let timeRangeStart = now(-1d);
let timeRangeEnd = now();
Perf
| extend 
    LocalTime = case(
        Computer startswith "M01" or Computer startswith "M04", datetime_add('hour', 0, TimeGenerated),  // EMEA (UTC+0)
        Computer startswith "M13" or Computer startswith "M14", datetime_add('hour', 8, TimeGenerated),  // APAC (UTC+8)
        Computer startswith "M06" or Computer startswith "M09", datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)
        datetime_add('hour', 0, TimeGenerated) // Default fallback
    ),
    Geo = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    ),
    Region = case(
        Computer startswith "M01", "NEU",
        Computer startswith "M04", "WEU",
        Computer startswith "M13", "EAS",
        Computer startswith "M14", "SEA",
        Computer startswith "M06", "EUS2",
        Computer startswith "M09", "CUS",
        "Other"
    ), 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        Computer contains "DVLDT", "Personal",
        "Other"
    ),
    ManagementPlane = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        Computer contains "DVLDT", "Intune",
        "Other"
    )
| extend DayOfWeek = dayofweek (LocalTime)
| extend HourOfDay = hourofday(LocalTime)
| extend SessionHostName = trim(' ', tolower(Computer))
| project-away Computer
| where LocalTime  between (paramRangeStart .. paramRangeEnd)
| where ObjectName == "Processor Information" and CounterName == "% Processor Time"
| where dayofweek(LocalTime) between (1d .. 5d)
| where hourofday(LocalTime)  between (8 .. 17)
| summarize AVG_CPU = round(avg(CounterValue), 2), 
            MAX_CPU = round(max(CounterValue), 2), 
            MIN_CPU = round(min(CounterValue), 2),
            MED_CPU = round(percentile(CounterValue, 50), 2),
            ItemsPerTimeBin = count() // Counting the number of entries per time bin
  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, ManagementPlane
  | project TimeGenerated = BinnedTime, SessionHostName, Geo, Region, Environment, ManagementPlane, AVG_CPU, MAX_CPU, MED_CPU, MIN_CPU, ItemsPerTimeBin
