let
    Source = AzureDataExplorer.Contents("https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg", "nmw-app-law-fwjv4wn75m4qg", "WVDConnections#(lf)| where TimeGenerated >= ago(90d)#(lf)| extend HostPoolName = tostring(split(_ResourceId, '/')[-1])#(lf)| extend HostpoolName = trim(' ', tolower(HostPoolName))#(lf)| summarize arg_max(TimeGenerated, *) by HostPoolName#(lf)| project TimeGenerated, HostPoolName", [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]),
    #"Removed Duplicates" = Table.Distinct(Source)
in
    #"Removed Duplicates"




Original
let
    Source = AzureDataExplorer.Contents("https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg", "nmw-app-law-fwjv4wn75m4qg", "WVDConnections#(lf)| where TimeGenerated >= ago(90d)#(lf)| where not(isempty(UserName)) and UserName != '<>'#(lf)| where not(isempty(SessionHostName)) and SessionHostName != '<>'#(lf)| extend SessionHostName = trim(' ', tolower(SessionHostName))#(lf)| extend UserName = trim(' ', tolower(UserName))#(lf)| extend HostPoolName = tostring(split(_ResourceId, '/')[-1])#(lf)| extend HostpoolName = trim(' ', tolower(HostPoolName))#(lf)| summarize arg_max(TimeGenerated, *) by UserName#(lf)| project TimeGenerated, UserName, HostPoolName, SessionHostName", [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]),
    #"Sorted Rows" = Table.Buffer(Table.Sort(Source,{{"TimeGenerated", Order.Descending}})),
    #"Removed Duplicates" = Table.Distinct(#"Sorted Rows", {"UserName"})
in
    #"Removed Duplicates"



let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "WVDConnections",
            "| where TimeGenerated between (paramRangeStart..paramRangeEnd)",
            "| where not(isempty(UserName)) and UserName != '<>'",
            "| where not(isempty(SessionHostName)) and SessionHostName != '<>'",
            "| extend SessionHostName = trim(' ', tolower(SessionHostName))",
            "| extend UserName = trim(' ', tolower(UserName))",
            "| extend HostPoolName = tostring(split(_ResourceId, '/')[-1])",
            "| extend HostpoolName = trim(' ', tolower(HostPoolName))",
            "| summarize arg_max(TimeGenerated, *) by UserName",
            "| project TimeGenerated, UserName, HostPoolName, SessionHostName"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    ),
    #"Sorted Rows" = Table.Buffer(Table.Sort(Source, {{"TimeGenerated", Order.Descending}})),
    #"Removed Duplicates" = Table.Distinct(#"Sorted Rows", {"UserName"})
in
    #"Removed Duplicates"



let
    Source = AzureDataExplorer.Contents("https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg", "nmw-app-law-fwjv4wn75m4qg", "WVDConnections#(lf)| where TimeGenerated >= ago(90d)#(lf)| where not(isempty(UserName)) and UserName != '<>'#(lf)| where not(isempty(SessionHostName)) and SessionHostName != '<>'#(lf)| extend SessionHostName = trim(' ', tolower(SessionHostName))#(lf)| extend UserName = trim(' ', tolower(UserName))#(lf)| extend HostPoolName = tostring(split(_ResourceId, '/')[-1])#(lf)| extend HostpoolName = trim(' ', tolower(HostPoolName))#(lf)| summarize arg_max(TimeGenerated, *) by UserName#(lf)| project TimeGenerated, UserName, HostPoolName, SessionHostName", [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]),
    #"Sorted Rows" = Table.Buffer(Table.Sort(Source,{{"TimeGenerated", Order.Descending}})),
    #"Removed Duplicates" = Table.Distinct(#"Sorted Rows", {"UserName"})
in
    #"Removed Duplicates"


let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let binSize = 5m;",
            "let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "Perf",
            "| where TimeGenerated between (paramRangeStart..paramRangeEnd)",
            "| where ObjectName == 'LogicalDisk' and CounterName == 'Current Disk Queue Length' and InstanceName == 'C:'",
            "| summarize AVG_Disk_QLength_int = round(avg(CounterValue)),",
            "          MAX_Disk_QLength_int = round(max(CounterValue)),",
            "          MIN_Disk_QLength_int = round(min(CounterValue)),",
            "          MED_Disk_QLength_int = round(percentile(CounterValue, 50)),",
            "          CountPerTimeBin_int = count()",
            "by BinnedTime = bin(TimeGenerated, binSize), Computer",
            "| extend Computer = trim(' ', tolower(Computer))",
            "| extend Timekey = format_datetime(BinnedTime, 'HHmm')",
            "| project TimeGenerated = BinnedTime,",
            "         Timekey,",
            "         SessionHostName = Computer,",
            "         AVG_Disk_QLength_int,",
            "         MAX_Disk_QLength_int,",
            "         MIN_Disk_QLength_int,",
            "         MED_Disk_QLength_int,",
            "         CountPerTimeBin_int"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    ),
    #"Duplicated Column" = Table.DuplicateColumn(Source, "TimeGenerated", "TimeGenerated - Copy"),
    #"Duplicated Column1" = Table.DuplicateColumn(#"Duplicated Column", "TimeGenerated", "TimeGenerated - Copy.1"),
    #"Changed Type" = Table.TransformColumnTypes(#"Duplicated Column1",{{"TimeGenerated - Copy", type date}}),
    #"Renamed Columns" = Table.RenameColumns(#"Changed Type",{{"TimeGenerated - Copy", "Date"}, {"TimeGenerated - Copy.1", "Time"}}),
    #"Changed Type1" = Table.TransformColumnTypes(#"Renamed Columns",{{"Time", type text}}),
    #"Extracted Text After Delimiter" = Table.TransformColumns(#"Changed Type1", {{"Time", each Text.AfterDelimiter(_, "T"), type text}}),
    #"Extracted Text Before Delimiter" = Table.TransformColumns(#"Extracted Text After Delimiter", {{"Time", each Text.BeforeDelimiter(_, "Z", {0, RelativePosition.FromEnd}), type text}}),
    #"Changed Type2" = Table.TransformColumnTypes(#"Extracted Text Before Delimiter",{{"Time", type time}}),
    #"Reordered Columns" = Table.ReorderColumns(#"Changed Type2",{"TimeGenerated", "Date", "Time", "Timekey", "SessionHostName", "AVG_Disk_QLength_int", "MAX_Disk_QLength_int", "MIN_Disk_QLength_int", "MED_Disk_QLength_int", "CountPerTimeBin_int"})
in
    #"Reordered Columns"





let binSize = 5m;
        let paramRangeStart = now(-1d);
        let paramRangeEnd = now();
        Perf
        | where TimeGenerated between (paramRangeStart..paramRangeEnd)
        //| where ObjectName == "PhysicalDisk" and CounterName == "Current Disk Queue Length" and InstanceName == "_Total"
        | where ObjectName == "LogicalDisk" and CounterName == "Current Disk Queue Length" and InstanceName == "C:"
        | summarize AVG_Disk_QLength_int = round(avg(CounterValue)), 
                  MAX_Disk_QLength_int = round(max(CounterValue)), 
                  MIN_Disk_QLength_int = round(min(CounterValue)),
                  MED_Disk_QLength_int = round(percentile(CounterValue, 50)),
                  CountPerTimeBin_int = count() // Counting the number of entries per time bin
          by BinnedTime = bin(TimeGenerated, binSize), Computer
        | extend Computer = trim(' ', tolower(Computer))
        | extend Timekey = format_datetime(BinnedTime, 'HHmm')
        | project TimeGenerated = BinnedTime, 
                  Timekey, 
                  SessionHostName = Computer, 
                  AVG_Disk_QLength_int,
                  MAX_Disk_QLength_int, 
                  MIN_Disk_QLength_int, 
                  MED_Disk_QLength_int, 
                  CountPerTimeBin_int



let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let binSize = 5m;",
            "let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "Perf",
            "| where TimeGenerated between (paramRangeStart..paramRangeEnd)",
            "| where ObjectName == 'PhysicalDisk' and CounterName == 'Avg. Disk sec/Transfer' and InstanceName == '_Total'",
            "| summarize AVG_Disk_Transfers_ms = round(avg(CounterValue) * 1000, 2),",
            "          MAX_Disk_Transfers_ms = round(max(CounterValue) * 1000, 2),",
            "          MIN_Disk_Transfers_ms = round(min(CounterValue) * 1000, 2),",
            "          MED_Disk_Transfers_ms = round(percentile(CounterValue, 50) * 1000, 2),",
            "          CountPerTimeBin_int = count()",
            "by BinnedTime = bin(TimeGenerated, binSize), Computer",
            "| extend Computer = trim(' ', tolower(Computer))",
            "| extend Timekey = format_datetime(BinnedTime, 'HHmm')",
            "| project TimeGenerated = BinnedTime,",
            "         Timekey,",
            "         SessionHostName = Computer,",
            "         AVG_Disk_Transfers_ms,",
            "         MED_Disk_Transfers_ms,",
            "         MAX_Disk_Transfers_ms,",
            "         MIN_Disk_Transfers_ms,",
            "         CountPerTimeBin_int"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    ),
    #"Duplicated Column" = Table.DuplicateColumn(Source, "TimeGenerated", "TimeGenerated - Copy"),
    #"Duplicated Column1" = Table.DuplicateColumn(#"Duplicated Column", "TimeGenerated", "TimeGenerated - Copy.1"),
    #"Changed Type" = Table.TransformColumnTypes(#"Duplicated Column1",{{"TimeGenerated - Copy", type date}}),
    #"Renamed Columns" = Table.RenameColumns(#"Changed Type",{{"TimeGenerated - Copy", "Date"}, {"TimeGenerated - Copy.1", "Time"}}),
    #"Changed Type1" = Table.TransformColumnTypes(#"Renamed Columns",{{"Time", type text}}),
    #"Extracted Text After Delimiter" = Table.TransformColumns(#"Changed Type1", {{"Time", each Text.AfterDelimiter(_, "T"), type text}}),
    #"Extracted Text Before Delimiter" = Table.TransformColumns(#"Extracted Text After Delimiter", {{"Time", each Text.BeforeDelimiter(_, "Z", {0, RelativePosition.FromEnd}), type text}}),
    #"Changed Type2" = Table.TransformColumnTypes(#"Extracted Text Before Delimiter",{{"Time", type time}}),
    #"Reordered Columns" = Table.ReorderColumns(#"Changed Type2",{"TimeGenerated", "Date", "Time", "Timekey", "SessionHostName", "AVG_Disk_Transfers_ms", "MED_Disk_Transfers_ms", "MAX_Disk_Transfers_ms", "MIN_Disk_Transfers_ms", "CountPerTimeBin_int"})
in
    #"Reordered Columns"







let binSize = 5m;
        let paramRangeStart = now(-1d);
        let paramRangeEnd = now();
        Perf
        | where TimeGenerated between (paramRangeStart..paramRangeEnd)
        | where ObjectName == "PhysicalDisk" and CounterName == "Avg. Disk sec/Transfer" and InstanceName == "_Total"
        | summarize AVG_Disk_Transfers_ms = round(avg(CounterValue) * 1000, 2), 
                  MAX_Disk_Transfers_ms = round(max(CounterValue) * 1000, 2), 
                  MIN_Disk_Transfers_ms = round(min(CounterValue) * 1000, 2),
                  MED_Disk_Transfers_ms = round(percentile(CounterValue, 50) * 1000, 2),
                  CountPerTimeBin_int = count() // Counting the number of entries per time bin
          by BinnedTime = bin(TimeGenerated, binSize), Computer
        | extend Computer = trim(' ', tolower(Computer))
        | extend Timekey = format_datetime(BinnedTime, 'HHmm')
        | project TimeGenerated = BinnedTime, 
                  Timekey, 
                  SessionHostName = Computer, 
                  AVG_Disk_Transfers_ms, 
                  MED_Disk_Transfers_ms, 
                  MAX_Disk_Transfers_ms, 
                  MIN_Disk_Transfers_ms, 
                  CountPerTimeBin_int



let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let binSize = 5m;",
            "let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "Perf",
            "| where TimeGenerated between (paramRangeStart..paramRangeEnd)",
            "| where ObjectName == 'PhysicalDisk' and CounterName == 'Avg. Disk sec/Write' and InstanceName == '_Total'",
            "| summarize AVG_Disk_Writes_ms = round(avg(CounterValue) * 1000, 2),",
            "          MAX_Disk_Writes_ms = round(max(CounterValue) * 1000, 2),",
            "          MIN_Disk_Writes_ms = round(min(CounterValue) * 1000, 2),",
            "          MED_Disk_Writes_ms = round(percentile(CounterValue, 50) * 1000, 2),",
            "          CountPerTimeBin_int = count()",
            "by BinnedTime = bin(TimeGenerated, binSize), Computer",
            "| extend Computer = trim(' ', tolower(Computer))",
            "| extend Timekey = format_datetime(BinnedTime, 'HHmm')",
            "| project TimeGenerated = BinnedTime,",
            "         Timekey,",
            "         SessionHostName = Computer,",
            "         AVG_Disk_Writes_ms,",
            "         MED_Disk_Writes_ms,",
            "         MAX_Disk_Writes_ms,",
            "         MIN_Disk_Writes_ms,",
            "         CountPerTimeBin_int"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    ),
    #"Duplicated Column" = Table.DuplicateColumn(Source, "TimeGenerated", "TimeGenerated - Copy"),
    #"Duplicated Column1" = Table.DuplicateColumn(#"Duplicated Column", "TimeGenerated", "TimeGenerated - Copy.1"),
    #"Changed Type" = Table.TransformColumnTypes(#"Duplicated Column1",{{"TimeGenerated - Copy", type date}}),
    #"Renamed Columns" = Table.RenameColumns(#"Changed Type",{{"TimeGenerated - Copy", "Date"}, {"TimeGenerated - Copy.1", "Time"}}),
    #"Changed Type1" = Table.TransformColumnTypes(#"Renamed Columns",{{"Time", type text}}),
    #"Extracted Text After Delimiter" = Table.TransformColumns(#"Changed Type1", {{"Time", each Text.AfterDelimiter(_, "T"), type text}}),
    #"Extracted Text Before Delimiter" = Table.TransformColumns(#"Extracted Text After Delimiter", {{"Time", each Text.BeforeDelimiter(_, "Z", {0, RelativePosition.FromEnd}), type text}}),
    #"Changed Type2" = Table.TransformColumnTypes(#"Extracted Text Before Delimiter",{{"Time", type time}}),
    #"Reordered Columns" = Table.ReorderColumns(#"Changed Type2",{"TimeGenerated", "Date", "Time", "Timekey", "SessionHostName", "AVG_Disk_Writes_ms", "MED_Disk_Writes_ms", "MAX_Disk_Writes_ms", "MIN_Disk_Writes_ms", "CountPerTimeBin_int"})
in
    #"Reordered Columns"





let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let binSize = 5m;",
            "let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "Perf",
            "| where TimeGenerated between (paramRangeStart..paramRangeEnd)",
            "| where ObjectName == 'PhysicalDisk' and CounterName == 'Avg. Disk sec/Read' and InstanceName == '_Total'",
            "| summarize AVG_Disk_Reads_ms = round(avg(CounterValue) * 1000, 2),",
            "          MAX_Disk_Reads_ms = round(max(CounterValue) * 1000, 2),",
            "          MIN_Disk_Reads_ms = round(min(CounterValue) * 1000, 2),",
            "          MED_Disk_Reads_ms = round(percentile(CounterValue, 50) * 1000, 2),",
            "          CountPerTimeBin_int = count()",
            "by BinnedTime = bin(TimeGenerated, binSize), Computer",
            "| extend Computer = trim(' ', tolower(Computer))",
            "| extend Timekey = format_datetime(BinnedTime, 'HHmm')",
            "| project TimeGenerated = BinnedTime,",
            "         Timekey,",
            "         SessionHostName = Computer,",
            "         AVG_Disk_Reads_ms,",
            "         MED_Disk_Reads_ms,",
            "         MAX_Disk_Reads_ms,",
            "         MIN_Disk_Reads_ms,",
            "         CountPerTimeBin_int"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    ),
    #"Duplicated Column" = Table.DuplicateColumn(Source, "TimeGenerated", "TimeGenerated - Copy"),
    #"Duplicated Column1" = Table.DuplicateColumn(#"Duplicated Column", "TimeGenerated", "TimeGenerated - Copy.1"),
    #"Changed Type" = Table.TransformColumnTypes(#"Duplicated Column1",{{"TimeGenerated - Copy", type date}}),
    #"Renamed Columns" = Table.RenameColumns(#"Changed Type",{{"TimeGenerated - Copy", "Date"}, {"TimeGenerated - Copy.1", "Time"}}),
    #"Changed Type1" = Table.TransformColumnTypes(#"Renamed Columns",{{"Time", type text}}),
    #"Extracted Text After Delimiter" = Table.TransformColumns(#"Changed Type1", {{"Time", each Text.AfterDelimiter(_, "T"), type text}}),
    #"Extracted Text Before Delimiter" = Table.TransformColumns(#"Extracted Text After Delimiter", {{"Time", each Text.BeforeDelimiter(_, "Z", {0, RelativePosition.FromEnd}), type text}}),
    #"Changed Type2" = Table.TransformColumnTypes(#"Extracted Text Before Delimiter",{{"Time", type time}}),
    #"Reordered Columns" = Table.ReorderColumns(#"Changed Type2",{"TimeGenerated", "Date", "Time", "Timekey", "SessionHostName", "AVG_Disk_Reads_ms", "MED_Disk_Reads_ms", "MAX_Disk_Reads_ms", "MIN_Disk_Reads_ms", "CountPerTimeBin_int"})
in
    #"Reordered Columns"


Repeat exercise with

        let binSize = 5m;
        let paramRangeStart = now(-1d);
        let paramRangeEnd = now();
        Perf
        | where TimeGenerated between (paramRangeStart..paramRangeEnd)
        | where ObjectName == "PhysicalDisk" and CounterName == "Avg. Disk sec/Read" and InstanceName == "_Total"
        | summarize AVG_Disk_Reads_ms = round(avg(CounterValue) * 1000, 2), 
                  MAX_Disk_Reads_ms = round(max(CounterValue) * 1000, 2), 
                  MIN_Disk_Reads_ms = round(min(CounterValue) * 1000, 2),
                  MED_Disk_Reads_ms = round(percentile(CounterValue, 50) * 1000, 2),
                  CountPerTimeBin_int = count() // Counting the number of entries per time bin
          by BinnedTime = bin(TimeGenerated, binSize), Computer
        | extend Computer = trim(' ', tolower(Computer))
        | extend Timekey = format_datetime(BinnedTime, 'HHmm')
        | project TimeGenerated = BinnedTime, 
                  Timekey, 
                  SessionHostName = Computer, 
                  AVG_Disk_Reads_ms, 
                  MED_Disk_Reads_ms, 
                  MAX_Disk_Reads_ms, 
                  MIN_Disk_Reads_ms, 
                  CountPerTimeBin_int

and for

        let binSize = 5m;
        let paramRangeStart = now(-1d);
        let paramRangeEnd = now();
        Perf
        | where TimeGenerated between (paramRangeStart..paramRangeEnd)
        | where ObjectName == "PhysicalDisk" and CounterName == "Avg. Disk sec/Write" and InstanceName == "_Total"
        | summarize AVG_Disk_Reads_ms = round(avg(CounterValue) * 1000, 2), 
                  MAX_Disk_Writes_ms = round(max(CounterValue) * 1000, 2), 
                  MIN_Disk_Writes_ms = round(min(CounterValue) * 1000, 2),
                  MED_Disk_Writes_ms = round(percentile(CounterValue, 50) * 1000, 2),
                  CountPerTimeBin_int = count() // Counting the number of entries per time bin
          by BinnedTime = bin(TimeGenerated, binSize), Computer
        | extend Computer = trim(' ', tolower(Computer))
        | extend Timekey = format_datetime(BinnedTime, 'HHmm')
        | project TimeGenerated = BinnedTime, 
                  Timekey, 
                  SessionHostName = Computer, 
                  AVG_Disk_Reads_ms, 
                  MED_Disk_Writes_ms, 
                  MAX_Disk_Writes_ms, 
                  MIN_Disk_Writes_ms, 
                  CountPerTimeBin_int
        





let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let binSize = 5m;",
            "let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "Perf",
            "| where TimeGenerated between (paramRangeStart..paramRangeEnd)",
            "| where ObjectName == 'Memory' and CounterName == 'Pages/sec'",
            "| summarize AVG_RAM_PagesPerSec = round(avg(CounterValue), 0),",
            "          MAX_RAM_PagesPerSec = round(max(CounterValue), 0),",
            "          MIN_RAM_PagesPerSec = round(min(CounterValue), 0),",
            "          MED_RAM_PagesPerSec = round(percentile(CounterValue, 50), 0),",
            "          CountPerTimeBin = count()",
            "by BinnedTime = bin(TimeGenerated, binSize), Computer",
            "| extend Computer = trim(' ', tolower(Computer))",
            "| extend Timekey = format_datetime(BinnedTime, 'HHmm')",
            "| project TimeGenerated = BinnedTime,",
            "         Timekey,",
            "         SessionHostName = Computer,",
            "         AVG_RAM_PagesPerSec,",
            "         MED_RAM_PagesPerSec,",
            "         MAX_RAM_PagesPerSec,",
            "         MIN_RAM_PagesPerSec,",
            "         CountPerTimeBin"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    ),
    #"Duplicated Column" = Table.DuplicateColumn(Source, "TimeGenerated", "TimeGenerated - Copy"),
    #"Duplicated Column1" = Table.DuplicateColumn(#"Duplicated Column", "TimeGenerated", "TimeGenerated - Copy.1"),
    #"Changed Type" = Table.TransformColumnTypes(#"Duplicated Column1",{{"TimeGenerated - Copy", type date}}),
    #"Renamed Columns" = Table.RenameColumns(#"Changed Type",{{"TimeGenerated - Copy", "Date"}, {"TimeGenerated - Copy.1", "Time"}}),
    #"Changed Type1" = Table.TransformColumnTypes(#"Renamed Columns",{{"Time", type text}}),
    #"Extracted Text After Delimiter" = Table.TransformColumns(#"Changed Type1", {{"Time", each Text.AfterDelimiter(_, "T"), type text}}),
    #"Extracted Text Before Delimiter" = Table.TransformColumns(#"Extracted Text After Delimiter", {{"Time", each Text.BeforeDelimiter(_, "Z", {0, RelativePosition.FromEnd}), type text}}),
    #"Changed Type2" = Table.TransformColumnTypes(#"Extracted Text Before Delimiter",{{"Time", type time}}),
    #"Reordered Columns" = Table.ReorderColumns(#"Changed Type2",{"TimeGenerated", "Date", "Time", "Timekey", "SessionHostName", "AVG_RAM_PagesPerSec", "MED_RAM_PagesPerSec", "MAX_RAM_PagesPerSec", "MIN_RAM_PagesPerSec", "CountPerTimeBin"})
in
    #"Reordered Columns"




let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let binSize = 5m;",
            "let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "Perf",
            "| where TimeGenerated between (paramRangeStart .. paramRangeEnd)",
            "| where ObjectName == 'Memory' and CounterName == 'Page Faults/sec'",
            "| summarize AVG_RAM_PageFaultsPerSec = round(avg(CounterValue), 0),",
            "          MAX_RAM_PageFaultsPerSec = round(max(CounterValue), 0),",
            "          MIN_RAM_PageFaultsPerSec = round(min(CounterValue), 0),",
            "          MED_RAM_PageFaultsPerSec = round(percentile(CounterValue, 50), 0),",
            "          CountPerTimeBin_int = count()",
            "by BinnedTime = bin(TimeGenerated, binSize), Computer",
            "| extend Computer = trim(' ', tolower(Computer))",
            "| extend Timekey = format_datetime(BinnedTime, 'HHmm')",
            "| project TimeGenerated = BinnedTime,",
            "         Timekey,",
            "         SessionHostName = Computer,",
            "         AVG_RAM_PageFaultsPerSec,",
            "         MED_RAM_PageFaultsPerSec,",
            "         MAX_RAM_PageFaultsPerSec,",
            "         MIN_RAM_PageFaultsPerSec,",
            "         CountPerTimeBin_int"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    ),
    #"Duplicated Column" = Table.DuplicateColumn(Source, "TimeGenerated", "TimeGenerated - Copy"),
    #"Duplicated Column1" = Table.DuplicateColumn(#"Duplicated Column", "TimeGenerated", "TimeGenerated - Copy.1"),
    #"Changed Type" = Table.TransformColumnTypes(#"Duplicated Column1",{{"TimeGenerated - Copy", type date}}),
    #"Renamed Columns" = Table.RenameColumns(#"Changed Type",{{"TimeGenerated - Copy", "Date"}, {"TimeGenerated - Copy.1", "Time"}}),
    #"Changed Type1" = Table.TransformColumnTypes(#"Renamed Columns",{{"Time", type text}}),
    #"Extracted Text After Delimiter" = Table.TransformColumns(#"Changed Type1", {{"Time", each Text.AfterDelimiter(_, "T"), type text}}),
    #"Extracted Text Before Delimiter" = Table.TransformColumns(#"Extracted Text After Delimiter", {{"Time", each Text.BeforeDelimiter(_, "Z", {0, RelativePosition.FromEnd}), type text}}),
    #"Changed Type2" = Table.TransformColumnTypes(#"Extracted Text Before Delimiter",{{"Time", type time}}),
    #"Reordered Columns" = Table.ReorderColumns(#"Changed Type2",{"TimeGenerated", "Date", "Time", "Timekey", "SessionHostName", "AVG_RAM_PageFaultsPerSec", "MED_RAM_PageFaultsPerSec", "MAX_RAM_PageFaultsPerSec", "MIN_RAM_PageFaultsPerSec", "CountPerTimeBin_int"})
in
    #"Reordered Columns"
replace KQL in M-Query with one below, make note of correct paramRangeStart and paramRangeEnd values above and use those. 

        let binSize = 5m;
        let paramRangeStart = now(-1d);
        let paramRangeEnd = now();
        Perf
        | where TimeGenerated between (paramRangeStart..paramRangeEnd)
        | where ObjectName == "Memory" and CounterName == "Pages/sec"
        | summarize AVG_RAM_PagesPerSec = round(avg(CounterValue), 0), 
                  MAX_RAM_PagesPerSec = round(max(CounterValue), 0), 
                  MIN_RAM_PagesPerSec = round(min(CounterValue), 0),
                  MED_RAM_PagesPerSec = round(percentile(CounterValue, 50), 0),
                  CountPerTimeBin = count() // Counting the number of entries per time bin
          by BinnedTime = bin(TimeGenerated, binSize), Computer
        | extend Computer = trim(' ', tolower(Computer))
        | extend Timekey = format_datetime(BinnedTime, 'HHmm')
        | project TimeGenerated = BinnedTime, 
                  Timekey, 
                  SessionHostName = Computer 
                  AVG_RAM_PagesPerSec, 
                  MED_RAM_PagesPerSec, 
                  MAX_RAM_PagesPerSec, 
                  MIN_RAM_PagesPerSec, 
                  CountPerTimeBin
        
