Can they two KQL queries below be joined on HostPoolName? 


let HostPoolMapping = datatable(SessionHostKey: string, HostPoolName: string)
[
    "m01plcri", "neu_prd_low_crims_rmpooled",
    "m01tmsni", "neu_tst_mspooled",
    "m01nacri", "neu_npa_crims_rmpooled",
    "m01pqnt0", "neu_prod_quantum_rmpooled",
    "m14pmsni", "sea_prd_mspooled",
    "m14psspi", "sea_prd_sspersistent",
    "m01tsspi", "neu_tst_sspersistent",
    "m01padm0", "neu_prd_adm_rmpooled",
    "m01phcri", "neu_prd_high_crims_rmpooled",
    "m01umsni", "neu_uat_multisession",
    "m06psspg", "eus2_prd_sspersistent",
    "m01usspi", "neu_uat_sspersistent",
    "m01psspi", "neu_prd_sspersistent",
    "m01pmsni", "neu_prd_mspooled",
    "m14umsni", "sea_uat_mspooled",
    "m06usspg", "eus2_uat_sspersistent",
    "m01uqnt0", "neu_uat_quantum_rmpooled",
    "m01uadm0", "neu_uat_adm_rmpooled",
    "m01pmcri", "neu_prd_med_crims_rmpooled",
    "m01dvldt", "neu_dev_sspersistent",
    "m01nbcri", "neu_npb_crims_rmpooled",
    "m01olcri", "neu_oat_low_crims_rmpooled",
    "m01omcri", "neu_oat_med_crims_rmpooled",
    "m14usspi", "neu_uat_sspersistent",
    "m01ohcri", "neu_oat_high_crims_rmpooled",
    "m01dvssp", "neu_developer_sspersistent",
    "m06usspi", "eus2_uat-sspersistent",
    "m06psspi", "eus2_prd-sspersistent"
];
Perf
//| where TimeGenerated between (datetime(2025-03-04T19:35:00Z) .. datetime(2025-03-04T20:00:00Z))
| where ObjectName == "User Input Delay per Process"
| where InstanceName contains "rdpvchost.exe"
| extend SessionId = extract(@"^(\d+):", 1, InstanceName)
| extend SessionHostKey = tolower(substring(Computer, 0, 8))
| extend SessionHostName = tolower(substring(Computer, 0, 12))
| extend SessionHostRG = extract(@"/resourcegroups/([^/]+)/", 1, _ResourceId)
| join kind=leftouter HostPoolMapping on SessionHostKey
| extend SessionId = strcat(SessionId, ":", SessionHostName)
| project TimeGenerated, HostPoolName, SessionHostName, Computer, SessionId, SessionHostRG
| summarize DistinctUserSessionCount = dcount(SessionId) by bin(TimeGenerated, 30m), HostPoolName, SessionHostRG
| order by TimeGenerated desc
//| where isempty(HostPoolName)

let HostPoolMapping = datatable(SessionHostKey: string, HostPoolName: string)
[
    "m01plcri", "neu_prd_low_crims_rmpooled",
    "m01tmsni", "neu_tst_mspooled",
    "m01nacri", "neu_npa_crims_rmpooled",
    "m01pqnt0", "neu_prod_quantum_rmpooled",
    "m14pmsni", "sea_prd_mspooled",
    "m14psspi", "sea_prd_sspersistent",
    "m01tsspi", "neu_tst_sspersistent",
    "m01padm0", "neu_prd_adm_rmpooled",
    "m01phcri", "neu_prd_high_crims_rmpooled",
    "m01umsni", "neu_uat_multisession",
    "m06psspg", "eus2_prd_sspersistent",
    "m01usspi", "neu_uat_sspersistent",
    "m01psspi", "neu_prd_sspersistent",
    "m01pmsni", "neu_prd_mspooled",
    "m14umsni", "sea_uat_mspooled",
    "m06usspg", "eus2_uat_sspersistent",
    "m01uqnt0", "neu_uat_quantum_rmpooled",
    "m01uadm0", "neu_uat_adm_rmpooled",
    "m01pmcri", "neu_prd_med_crims_rmpooled",
    "m01dvldt", "neu_dev_sspersistent",
    "m01nbcri", "neu_npb_crims_rmpooled",
    "m01olcri", "neu_oat_low_crims_rmpooled",
    "m01omcri", "neu_oat_med_crims_rmpooled",
    "m14usspi", "neu_uat_sspersistent",
    "m01ohcri", "neu_oat_high_crims_rmpooled",
    "m01dvssp", "neu_developer_sspersistent",
    "m06usspi", "eus2_uat-sspersistent",
    "m06psspi", "eus2_prd-sspersistent"
];
Heartbeat
| extend SessionHostKey = tolower(substring(Computer, 0, 8))
| extend SessionHostName = tolower(substring(Computer, 0, 12))
| extend SessionHostRG = tolower(ResourceGroup)
| join kind=leftouter HostPoolMapping on SessionHostKey
| project TimeGenerated, HostPoolName, SessionHostName, SessionHostKey, SessionHostRG
| summarize DistinctSessionHostCount = dcount(SessionHostName) by bin(TimeGenerated, 30m), HostPoolName, SessionHostRG
//| where isempty(HostPoolName)

let HostPoolMapping = datatable(SessionHostKey: string, HostPoolName: string)
[
    "m01plcri", "neu_prd_low_crims_rmpooled",
    "m01tmsni", "neu_tst_mspooled",
    "m01nacri", "neu_npa_crims_rmpooled",
    "m01pqnt0", "neu_prod_quantum_rmpooled",
    "m14pmsni", "sea_prd_mspooled",
    "m14psspi", "sea_prd_sspersistent",
    "m01tsspi", "neu_tst_sspersistent",
    "m01padm0", "neu_prd_adm_rmpooled",
    "m01phcri", "neu_prd_high_crims_rmpooled",
    "m01umsni", "neu_uat_multisession",
    "m06psspg", "eus2_prd_sspersistent",
    "m01usspi", "neu_uat_sspersistent",
    "m01psspi", "neu_prd_sspersistent",
    "m01pmsni", "neu_prd_mspooled",
    "m14umsni", "sea_uat_mspooled",
    "m06usspg", "eus2_uat_sspersistent",
    "m01uqnt0", "neu_uat_quantum_rmpooled",
    "m01uadm0", "neu_uat_adm_rmpooled",
    "m01pmcri", "neu_prd_med_crims_rmpooled",
    "m01dvldt", "neu_dev_sspersistent",
    "m01nbcri", "neu_npb_crims_rmpooled",
    "m01olcri", "neu_oat_low_crims_rmpooled",
    "m01omcri", "neu_oat_med_crims_rmpooled",
    "m14usspi", "neu_uat_sspersistent",
    "m01ohcri", "neu_oat_high_crims_rmpooled",
    "m01dvssp", "neu_developer_sspersistent",
    "m06usspi", "eus2_uat-sspersistent",
    "m06psspi", "eus2_prd-sspersistent"
];
Perf
//| where TimeGenerated between (datetime(2025-03-04T19:35:00Z) .. datetime(2025-03-04T20:00:00Z))
| where ObjectName == "User Input Delay per Process"
| where InstanceName contains "rdpvchost.exe"
| extend SessionId = extract(@"^(\d+):", 1, InstanceName)
| extend SessionHostKey = tolower(substring(Computer, 0, 8))
| extend SessionHostName = tolower(substring(Computer, 0, 12))
| extend SessionHostRG = extract(@"/resourcegroups/([^/]+)/", 1, _ResourceId)
| join kind=leftouter HostPoolMapping on SessionHostKey
| extend SessionId = strcat(SessionId, ":", SessionHostName)
| project TimeGenerated, HostPoolName, SessionHostName, Computer, SessionId, SessionHostRG
| summarize DistinctUserSessionCount = dcount(SessionId) by bin(TimeGenerated, 30m), HostPoolName, SessionHostRG
| order by TimeGenerated desc
//| where isempty(HostPoolName)
































WVDAgentHealthStatus
| extend ParsedHealthChecks = parse_json(SessionHostHealthCheckResult) 
| mv-expand ParsedHealthChecks
| extend HealthCheckName = tostring(ParsedHealthChecks.HealthCheckName),
         HealthCheckResult = tostring(ParsedHealthChecks.HealthCheckResult),
         ErrorMessage = tostring(ParsedHealthChecks.AdditionalFailureDetails.Message)
| where ErrorMessage contains "MSIX packages have failed to properly stage"
| extend MSIXPackagesList = extract(@"The following MSIX packages have failed to properly stage: (.*?)$", 1, ErrorMessage)
| extend PackagesArray = split(MSIXPackagesList, ", ")  // Splitting based on ", " delimiter if multiple packages exist
| summarize UniquePackages = make_set(PackagesArray) 
    by StatusTimeStamp, SessionHostName, ErrorType="MSIX Package Failure"
| extend PackageCount = array_length(UniquePackages)
| extend Package1 = tostring(UniquePackages[0]),
         Package2 = tostring(UniquePackages[1]),
         Package3 = tostring(UniquePackages[2]),
         Package4 = tostring(UniquePackages[3]),
         Package5 = tostring(UniquePackages[4]),
         Package6 = tostring(UniquePackages[5]),
         Package7 = tostring(UniquePackages[6]),
         Package8 = tostring(UniquePackages[7]),
         Package9 = tostring(UniquePackages[8]),
         Package10 = tostring(UniquePackages[9]),
         Package11 = tostring(UniquePackages[10]),
         Package12 = tostring(UniquePackages[11]),
         Package13 = tostring(UniquePackages[12]),
         Package14 = tostring(UniquePackages[13]),
         Package15 = tostring(UniquePackages[14]),
         Package16 = tostring(UniquePackages[15]),
         Package17 = tostring(UniquePackages[16]),
         Package18 = tostring(UniquePackages[17]),
         Package19 = tostring(UniquePackages[18]),
         Package20 = tostring(UniquePackages[19])
| project StatusTimeStamp, SessionHostName, ErrorType, PackageCount, 
          Package1, Package2, Package3, Package4, Package5, 
          Package6, Package7, Package8, Package9, Package10,
          Package11, Package12, Package13, Package14, Package15,
          Package16, Package17, Package18, Package19, Package20
| order by StatusTimeStamp desc



Function 'make_list' cannot be invoked in current context
Request id: 594001d9-5de3-486e-9013-5e9acdb66f3d

WVDAgentHealthStatus
| extend ParsedHealthChecks = parse_json(SessionHostHealthCheckResult) 
| mv-expand ParsedHealthChecks
| extend HealthCheckName = tostring(ParsedHealthChecks.HealthCheckName),
         HealthCheckResult = tostring(ParsedHealthChecks.HealthCheckResult),
         ErrorMessage = tostring(ParsedHealthChecks.AdditionalFailureDetails.Message)
| where ErrorMessage contains "MSIX packages have failed to properly stage"
| extend PackagesList = extract_all(@"\[(.*?), \(", ErrorMessage)
| mv-expand PackagesList
| summarize UniquePackages = make_set(PackagesList) by StatusTimeStamp, SessionHostName, ErrorType="MSIX Package Failure"
| extend PackageCount = array_length(UniquePackages)
| extend Package1 = tostring(UniquePackages[0]),
         Package2 = tostring(UniquePackages[1]),
         Package3 = tostring(UniquePackages[2]),
         Package4 = tostring(UniquePackages[3]),
         Package5 = tostring(UniquePackages[4]),
         Package6 = tostring(UniquePackages[5]),
         Package7 = tostring(UniquePackages[6]),
         Package8 = tostring(UniquePackages[7]),
         Package9 = tostring(UniquePackages[8]),
         Package10 = tostring(UniquePackages[9]),
         Package11 = tostring(UniquePackages[10]),
         Package12 = tostring(UniquePackages[11]),
         Package13 = tostring(UniquePackages[12]),
         Package14 = tostring(UniquePackages[13]),
         Package15 = tostring(UniquePackages[14]),
         Package16 = tostring(UniquePackages[15]),
         Package17 = tostring(UniquePackages[16]),
         Package18 = tostring(UniquePackages[17]),
         Package19 = tostring(UniquePackages[18]),
         Package20 = tostring(UniquePackages[19]),
         RemainingPackages = iff(PackageCount > 20, strcat_array(make_list(UniquePackages[20]), "; "), "")
| project StatusTimeStamp, SessionHostName, ErrorType, PackageCount, 
          Package1, Package2, Package3, Package4, Package5, 
          Package6, Package7, Package8, Package9, Package10,
          Package11, Package12, Package13, Package14, Package15,
          Package16, Package17, Package18, Package19, Package20, 
          RemainingPackages
| order by StatusTimeStamp desc


Token: ]
Line: 32
Position: 84
Request id: 55c8c914-7b93-467d-910e-6ecb3e146c3c


WVDAgentHealthStatus
| extend ParsedHealthChecks = parse_json(SessionHostHealthCheckResult) 
| mv-expand ParsedHealthChecks
| extend HealthCheckName = tostring(ParsedHealthChecks.HealthCheckName),
         HealthCheckResult = tostring(ParsedHealthChecks.HealthCheckResult),
         ErrorMessage = tostring(ParsedHealthChecks.AdditionalFailureDetails.Message)
| where ErrorMessage contains "MSIX packages have failed to properly stage"
| extend PackagesList = extract_all(@"\[(.*?), \(", ErrorMessage)
| mv-expand PackagesList
| summarize UniquePackages = make_set(PackagesList) by StatusTimeStamp, SessionHostName, ErrorType="MSIX Package Failure"
| extend PackageCount = array_length(UniquePackages)
| extend Package1 = tostring(UniquePackages[0]),
         Package2 = tostring(UniquePackages[1]),
         Package3 = tostring(UniquePackages[2]),
         Package4 = tostring(UniquePackages[3]),
         Package5 = tostring(UniquePackages[4]),
         Package6 = tostring(UniquePackages[5]),
         Package7 = tostring(UniquePackages[6]),
         Package8 = tostring(UniquePackages[7]),
         Package9 = tostring(UniquePackages[8]),
         Package10 = tostring(UniquePackages[9]),
         Package11 = tostring(UniquePackages[10]),
         Package12 = tostring(UniquePackages[11]),
         Package13 = tostring(UniquePackages[12]),
         Package14 = tostring(UniquePackages[13]),
         Package15 = tostring(UniquePackages[14]),
         Package16 = tostring(UniquePackages[15]),
         Package17 = tostring(UniquePackages[16]),
         Package18 = tostring(UniquePackages[17]),
         Package19 = tostring(UniquePackages[18]),
         Package20 = tostring(UniquePackages[19]),
         RemainingPackages = iff(PackageCount > 20, strcat_array(UniquePackages[20:], "; "), "")
| project StatusTimeStamp, SessionHostName, ErrorType, PackageCount, 
          Package1, Package2, Package3, Package4, Package5, 
          Package6, Package7, Package8, Package9, Package10,
          Package11, Package12, Package13, Package14, Package15,
          Package16, Package17, Package18, Package19, Package20, 
          RemainingPackages
| order by StatusTimeStamp desc




evaluate bag_unpack(): the following error(s) occurred while evaluating the output schema: evaluate bag_unpack(): argument #1 expected to be a reference to a dynamic column

WVDAgentHealthStatus
| extend ParsedHealthChecks = parse_json(SessionHostHealthCheckResult) 
| mv-expand ParsedHealthChecks
| extend HealthCheckName = tostring(ParsedHealthChecks.HealthCheckName),
         HealthCheckResult = tostring(ParsedHealthChecks.HealthCheckResult),
         ErrorMessage = tostring(ParsedHealthChecks.AdditionalFailureDetails.Message)
| where ErrorMessage contains "MSIX packages have failed to properly stage"
| extend PackagesList = extract_all(@"\[(.*?), \(", ErrorMessage)
| mv-expand PackagesList
| summarize UniquePackages = make_set(PackagesList) by StatusTimeStamp, SessionHostName, ErrorType="MSIX Package Failure"
| extend PackageCount = array_length(UniquePackages)
| evaluate bag_unpack(pack_array('Package1', UniquePackages[0], 'Package2', UniquePackages[1], 'Package3', UniquePackages[2], 'Package4', UniquePackages[3], 'Package5', UniquePackages[4], 'Package6', UniquePackages[5], 'Package7', UniquePackages[6], 'Package8', UniquePackages[7], 'Package9', UniquePackages[8], 'Package10', UniquePackages[9]))
| project StatusTimeStamp, SessionHostName, ErrorType, PackageCount, Package1, Package2, Package3, Package4, Package5, Package6, Package7, Package8, Package9, Package10
| order by StatusTimeStamp desc




WVDAgentHealthStatus
| extend ParsedHealthChecks = parse_json(SessionHostHealthCheckResult) 
| mv-expand ParsedHealthChecks
| extend HealthCheckName = tostring(ParsedHealthChecks.HealthCheckName),
         HealthCheckResult = tostring(ParsedHealthChecks.HealthCheckResult),
         ErrorMessage = tostring(ParsedHealthChecks.AdditionalFailureDetails.Message)
| where ErrorMessage contains "MSIX packages have failed to properly stage"
| extend PackagesList = extract_all(@"\[(.*?), \(", ErrorMessage)
| mv-expand PackagesList // Expand to individual rows
| summarize UniquePackages = make_set(PackagesList) by StatusTimeStamp, SessionHostName, ErrorType="MSIX Package Failure"
| extend MSIXPackagesList = strcat_array(UniquePackages, "; ") // Convert list to readable string
| extend PackageCount = array_length(UniquePackages) // Count unique packages
| project StatusTimeStamp, SessionHostName, ErrorType, PackageCount, MSIXPackagesList
| order by StatusTimeStamp desc




WVDAgentHealthStatus
| extend ParsedHealthChecks = parse_json(SessionHostHealthCheckResult) 
| mv-expand ParsedHealthChecks
| extend HealthCheckName = tostring(ParsedHealthChecks.HealthCheckName),
         HealthCheckResult = tostring(ParsedHealthChecks.HealthCheckResult),
         ErrorMessage = tostring(ParsedHealthChecks.AdditionalFailureDetails.Message)
| where ErrorMessage contains "MSIX packages have failed to properly stage"
| extend PackagesList = extract_all(@"\[(.*?), \(", ErrorMessage)
| mv-expand PackagesList
| extend MSIXPackageName = tostring(PackagesList)
| summarize MSIXPackagesList = make_set(MSIXPackageName), PackageCount = count() 
    by StatusTimeStamp, SessionHostName, ErrorType="MSIX Package Failure"
| extend MSIXPackagesList = strcat_array(MSIXPackagesList, "; ")
| project StatusTimeStamp, SessionHostName, ErrorType, PackageCount, MSIXPackagesList
| order by StatusTimeStamp desc

these results dont make sense
StatusTimeStamp [UTC]	SessionHostName	ErrorType	PackageCount	MSIXPackagesList
19/03/2025, 17:41:01.874	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	44	ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778
19/03/2025, 17:40:57.833	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	1	ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778
19/03/2025, 17:10:57.375	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	50	ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778
19/03/2025, 16:40:53.500	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	135	ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778; GoToAssist-v11.9-1380_11.9.1380.0_x64__nmvg3h6wsd778; Oracle-SQLDeveloper-24.3.0.284.2209-x64_24.3.1.0_x64__nmvg3h6wsd778; AbInitio-TRMC-4.1.6.0-MSIX_4.1.6.0_x64__pccxv4s157z20; Seavus-Project-Viewer_16.0.51.0_x64__pccxv4s157z20; Postman11_11.18.0.0_x64__nmvg3h6wsd778; SafeNetAuthenticationClient10.9_10.9.3283.0_x64__nmvg3h6wsd778
19/03/2025, 16:10:48.676	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	501	ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778; GoToAssist-v11.9-1380_11.9.1380.0_x64__nmvg3h6wsd778; Oracle-SQLDeveloper-24.3.0.284.2209-x64_24.3.1.0_x64__nmvg3h6wsd778; Devolutions-Remote-Desktop-Manager-13.6.7.0_0.0.0.0_x64__nmvg3h6wsd778; AbInitio-TRMC-4.1.6.0-MSIX_4.1.6.0_x64__pccxv4s157z20; Seavus-Project-Viewer_16.0.51.0_x64__pccxv4s157z20; PowerAutomateProcessMining_6.1.2401.17492_x64__8wekyb3d8bbwe; Postman11_11.18.0.0_x64__nmvg3h6wsd778; SafeNetAuthenticationClient10.9_10.9.3283.0_x64__nmvg3h6wsd778
19/03/2025, 15:49:44.411	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	378	ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778; GoToAssist-v11.9-1380_11.9.1380.0_x64__nmvg3h6wsd778; Oracle-SQLDeveloper-24.3.0.284.2209-x64_24.3.1.0_x64__nmvg3h6wsd778; Devolutions-Remote-Desktop-Manager-13.6.7.0_0.0.0.0_x64__nmvg3h6wsd778; AbInitio-TRMC-4.1.6.0-MSIX_4.1.6.0_x64__pccxv4s157z20; Seavus-Project-Viewer_16.0.51.0_x64__pccxv4s157z20; PowerAutomateProcessMining_6.1.2401.17492_x64__8wekyb3d8bbwe; Postman11_11.18.0.0_x64__nmvg3h6wsd778; SafeNetAuthenticationClient10.9_10.9.3283.0_x64__nmvg3h6wsd778
19/03/2025, 15:27:40.094	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	470	ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778; GoToAssist-v11.9-1380_11.9.1380.0_x64__nmvg3h6wsd778; Oracle-SQLDeveloper-24.3.0.284.2209-x64_24.3.1.0_x64__nmvg3h6wsd778; Devolutions-Remote-Desktop-Manager-13.6.7.0_0.0.0.0_x64__nmvg3h6wsd778; AbInitio-TRMC-4.1.6.0-MSIX_4.1.6.0_x64__pccxv4s157z20; Seavus-Project-Viewer_16.0.51.0_x64__pccxv4s157z20; PowerAutomateProcessMining_6.1.2401.17492_x64__8wekyb3d8bbwe; Postman11_11.18.0.0_x64__nmvg3h6wsd778; SafeNetAuthenticationClient10.9_10.9.3283.0_x64__nmvg3h6wsd778; IBM-MQExplorer-9.3.1.0_9.3.1.0_x64__nmvg3h6wsd778; AriesInsight-AriesPensionSystem-11.07_11.7.0.0_x64__pccxv4s157z20
19/03/2025, 14:48:35.651	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	847	ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778; IBM-MQExplorer-9.3.1.0_9.3.1.0_x64__nmvg3h6wsd778; GoToAssist-v11.9-1380_11.9.1380.0_x64__nmvg3h6wsd778; Oracle-SQLDeveloper-24.3.0.284.2209-x64_24.3.1.0_x64__nmvg3h6wsd778; Devolutions-Remote-Desktop-Manager-13.6.7.0_0.0.0.0_x64__nmvg3h6wsd778; AbInitio-TRMC-4.1.6.0-MSIX_4.1.6.0_x64__pccxv4s157z20; Seavus-Project-Viewer_16.0.51.0_x64__pccxv4s157z20; PowerAutomateProcessMining_6.1.2401.17492_x64__8wekyb3d8bbwe; AriesInsight-AriesPensionSystem-11.07_11.7.0.0_x64__pccxv4s157z20; Postman11_11.18.0.0_x64__nmvg3h6wsd778; SafeNetAuthenticationClient10.9_10.9.3283.0_x64__nmvg3h6wsd778
19/03/2025, 14:18:31.714	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	713	ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778; IBM-MQExplorer-9.3.1.0_9.3.1.0_x64__nmvg3h6wsd778; GoToAssist-v11.9-1380_11.9.1380.0_x64__nmvg3h6wsd778; Oracle-SQLDeveloper-24.3.0.284.2209-x64_24.3.1.0_x64__nmvg3h6wsd778; Devolutions-Remote-Desktop-Manager-13.6.7.0_0.0.0.0_x64__nmvg3h6wsd778; AbInitio-TRMC-4.1.6.0-MSIX_4.1.6.0_x64__pccxv4s157z20; Seavus-Project-Viewer_16.0.51.0_x64__pccxv4s157z20; PowerAutomateProcessMining_6.1.2401.17492_x64__8wekyb3d8bbwe; AriesInsight-AriesPensionSystem-11.07_11.7.0.0_x64__pccxv4s157z20; Postman11_11.18.0.0_x64__nmvg3h6wsd778; ITG-PositAlert-2018.3.2.59577_2018.3.2.0_x64__nmvg3h6wsd778; SafeNetAuthenticationClient10.9_10.9.3283.0_x64__nmvg3h6wsd778
19/03/2025, 13:41:27.615	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	942	ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778; IBM-MQExplorer-9.3.1.0_9.3.1.0_x64__nmvg3h6wsd778; GoToAssist-v11.9-1380_11.9.1380.0_x64__nmvg3h6wsd778; Oracle-SQLDeveloper-24.3.0.284.2209-x64_24.3.1.0_x64__nmvg3h6wsd778; Devolutions-Remote-Desktop-Manager-13.6.7.0_0.0.0.0_x64__nmvg3h6wsd778; AbInitio-TRMC-4.1.6.0-MSIX_4.1.6.0_x64__pccxv4s157z20; BlockCrossClient_9.17.6393.0_x64__pccxv4s157z20; Seavus-Project-Viewer_16.0.51.0_x64__pccxv4s157z20; PowerAutomateProcessMining_6.1.2401.17492_x64__8wekyb3d8bbwe; AriesInsight-AriesPensionSystem-11.07_11.7.0.0_x64__pccxv4s157z20; Postman11_11.18.0.0_x64__nmvg3h6wsd778; ITG-PositAlert-2018.3.2.59577_2018.3.2.0_x64__nmvg3h6wsd778; SafeNetAuthenticationClient10.9_10.9.3283.0_x64__nmvg3h6wsd778; SAP-SAP-7.70_7.7.0.0_x64__nmvg3h6wsd778; AbInitio-GDE-4.1.6.0_4.1.6.0_x64__pccxv4s157z20; Notepad-plus-plus_8.7.3.0_x64__nmvg3h6wsd778; Markit-EDM-19.2.35_19.2.35.0_x64__pccxv4s157z20; Microsoft.PowerAutomateDesktop_11.2411.200.0_x64__8wekyb3d8bbwe
19/03/2025, 13:41:23.241	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	18	ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778; SAP-SAP-7.70_7.7.0.0_x64__nmvg3h6wsd778; IBM-MQExplorer-9.3.1.0_9.3.1.0_x64__nmvg3h6wsd778; GoToAssist-v11.9-1380_11.9.1380.0_x64__nmvg3h6wsd778; Oracle-SQLDeveloper-24.3.0.284.2209-x64_24.3.1.0_x64__nmvg3h6wsd778; Devolutions-Remote-Desktop-Manager-13.6.7.0_0.0.0.0_x64__nmvg3h6wsd778; AbInitio-TRMC-4.1.6.0-MSIX_4.1.6.0_x64__pccxv4s157z20; BlockCrossClient_9.17.6393.0_x64__pccxv4s157z20; Seavus-Project-Viewer_16.0.51.0_x64__pccxv4s157z20; PowerAutomateProcessMining_6.1.2401.17492_x64__8wekyb3d8bbwe; AriesInsight-AriesPensionSystem-11.07_11.7.0.0_x64__pccxv4s157z20; AbInitio-GDE-4.1.6.0_4.1.6.0_x64__pccxv4s157z20; Postman11_11.18.0.0_x64__nmvg3h6wsd778; ITG-PositAlert-2018.3.2.59577_2018.3.2.0_x64__nmvg3h6wsd778; Notepad-plus-plus_8.7.3.0_x64__nmvg3h6wsd778; Markit-EDM-19.2.35_19.2.35.0_x64__pccxv4s157z20; Microsoft.PowerAutomateDesktop_11.2411.200.0_x64__8wekyb3d8bbwe; SafeNetAuthenticationClient10.9_10.9.3283.0_x64__nmvg3h6wsd778





WVDAgentHealthStatus
| extend ParsedHealthChecks = parse_json(SessionHostHealthCheckResult) 
| mv-expand ParsedHealthChecks
| extend HealthCheckName = tostring(ParsedHealthChecks.HealthCheckName),
         HealthCheckResult = tostring(ParsedHealthChecks.HealthCheckResult),
         ErrorMessage = tostring(ParsedHealthChecks.AdditionalFailureDetails.Message)
| where ErrorMessage contains "MSIX packages have failed to properly stage"
| extend PackagesList = extract_all(@"\[(.*?), \(", ErrorMessage)
| mv-expand PackagesList
| extend MSIXPackageName = tostring(PackagesList)
| summarize MSIXPackagesList = make_set(MSIXPackageName) by StatusTimeStamp, SessionHostName, ErrorType="MSIX Package Failure"
| project StatusTimeStamp, SessionHostName, ErrorType, MSIXPackagesList
| order by StatusTimeStamp desc

this works and returns
StatusTimeStamp [UTC]	SessionHostName	ErrorType	MSIXPackagesList
19/03/2025, 17:41:01.874	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	["ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778"]
19/03/2025, 17:40:57.833	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	["ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778"]
19/03/2025, 17:10:57.375	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	["ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778"]
19/03/2025, 16:40:53.500	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	["ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778","GoToAssist-v11.9-1380_11.9.1380.0_x64__nmvg3h6wsd778","Oracle-SQLDeveloper-24.3.0.284.2209-x64_24.3.1.0_x64__nmvg3h6wsd778","AbInitio-TRMC-4.1.6.0-MSIX_4.1.6.0_x64__pccxv4s157z20","Seavus-Project-Viewer_16.0.51.0_x64__pccxv4s157z20","Postman11_11.18.0.0_x64__nmvg3h6wsd778","SafeNetAuthenticationClient10.9_10.9.3283.0_x64__nmvg3h6wsd778"]
19/03/2025, 16:10:48.676	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	["ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778","GoToAssist-v11.9-1380_11.9.1380.0_x64__nmvg3h6wsd778","Oracle-SQLDeveloper-24.3.0.284.2209-x64_24.3.1.0_x64__nmvg3h6wsd778","Devolutions-Remote-Desktop-Manager-13.6.7.0_0.0.0.0_x64__nmvg3h6wsd778","AbInitio-TRMC-4.1.6.0-MSIX_4.1.6.0_x64__pccxv4s157z20","Seavus-Project-Viewer_16.0.51.0_x64__pccxv4s157z20","PowerAutomateProcessMining_6.1.2401.17492_x64__8wekyb3d8bbwe","Postman11_11.18.0.0_x64__nmvg3h6wsd778","SafeNetAuthenticationClient10.9_10.9.3283.0_x64__nmvg3h6wsd778"]
19/03/2025, 15:49:44.411	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	["ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778","GoToAssist-v11.9-1380_11.9.1380.0_x64__nmvg3h6wsd778","Oracle-SQLDeveloper-24.3.0.284.2209-x64_24.3.1.0_x64__nmvg3h6wsd778","Devolutions-Remote-Desktop-Manager-13.6.7.0_0.0.0.0_x64__nmvg3h6wsd778","AbInitio-TRMC-4.1.6.0-MSIX_4.1.6.0_x64__pccxv4s157z20","Seavus-Project-Viewer_16.0.51.0_x64__pccxv4s157z20","PowerAutomateProcessMining_6.1.2401.17492_x64__8wekyb3d8bbwe","Postman11_11.18.0.0_x64__nmvg3h6wsd778","SafeNetAuthenticationClient10.9_10.9.3283.0_x64__nmvg3h6wsd778"]
19/03/2025, 15:27:40.094	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	["ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778","GoToAssist-v11.9-1380_11.9.1380.0_x64__nmvg3h6wsd778","Oracle-SQLDeveloper-24.3.0.284.2209-x64_24.3.1.0_x64__nmvg3h6wsd778","Devolutions-Remote-Desktop-Manager-13.6.7.0_0.0.0.0_x64__nmvg3h6wsd778","AbInitio-TRMC-4.1.6.0-MSIX_4.1.6.0_x64__pccxv4s157z20","Seavus-Project-Viewer_16.0.51.0_x64__pccxv4s157z20","PowerAutomateProcessMining_6.1.2401.17492_x64__8wekyb3d8bbwe","Postman11_11.18.0.0_x64__nmvg3h6wsd778","SafeNetAuthenticationClient10.9_10.9.3283.0_x64__nmvg3h6wsd778","IBM-MQExplorer-9.3.1.0_9.3.1.0_x64__nmvg3h6wsd778","AriesInsight-AriesPensionSystem-11.07_11.7.0.0_x64__pccxv4s157z20"]
19/03/2025, 14:48:35.651	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	["ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778","IBM-MQExplorer-9.3.1.0_9.3.1.0_x64__nmvg3h6wsd778","GoToAssist-v11.9-1380_11.9.1380.0_x64__nmvg3h6wsd778","Oracle-SQLDeveloper-24.3.0.284.2209-x64_24.3.1.0_x64__nmvg3h6wsd778","Devolutions-Remote-Desktop-Manager-13.6.7.0_0.0.0.0_x64__nmvg3h6wsd778","AbInitio-TRMC-4.1.6.0-MSIX_4.1.6.0_x64__pccxv4s157z20","Seavus-Project-Viewer_16.0.51.0_x64__pccxv4s157z20","PowerAutomateProcessMining_6.1.2401.17492_x64__8wekyb3d8bbwe","AriesInsight-AriesPensionSystem-11.07_11.7.0.0_x64__pccxv4s157z20","Postman11_11.18.0.0_x64__nmvg3h6wsd778","SafeNetAuthenticationClient10.9_10.9.3283.0_x64__nmvg3h6wsd778"]
19/03/2025, 14:18:31.714	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	["ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778","IBM-MQExplorer-9.3.1.0_9.3.1.0_x64__nmvg3h6wsd778","GoToAssist-v11.9-1380_11.9.1380.0_x64__nmvg3h6wsd778","Oracle-SQLDeveloper-24.3.0.284.2209-x64_24.3.1.0_x64__nmvg3h6wsd778","Devolutions-Remote-Desktop-Manager-13.6.7.0_0.0.0.0_x64__nmvg3h6wsd778","AbInitio-TRMC-4.1.6.0-MSIX_4.1.6.0_x64__pccxv4s157z20","Seavus-Project-Viewer_16.0.51.0_x64__pccxv4s157z20","PowerAutomateProcessMining_6.1.2401.17492_x64__8wekyb3d8bbwe","AriesInsight-AriesPensionSystem-11.07_11.7.0.0_x64__pccxv4s157z20","Postman11_11.18.0.0_x64__nmvg3h6wsd778","ITG-PositAlert-2018.3.2.59577_2018.3.2.0_x64__nmvg3h6wsd778","SafeNetAuthenticationClient10.9_10.9.3283.0_x64__nmvg3h6wsd778"]
19/03/2025, 13:41:27.615	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	["ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778","IBM-MQExplorer-9.3.1.0_9.3.1.0_x64__nmvg3h6wsd778","GoToAssist-v11.9-1380_11.9.1380.0_x64__nmvg3h6wsd778","Oracle-SQLDeveloper-24.3.0.284.2209-x64_24.3.1.0_x64__nmvg3h6wsd778","Devolutions-Remote-Desktop-Manager-13.6.7.0_0.0.0.0_x64__nmvg3h6wsd778","AbInitio-TRMC-4.1.6.0-MSIX_4.1.6.0_x64__pccxv4s157z20","BlockCrossClient_9.17.6393.0_x64__pccxv4s157z20","Seavus-Project-Viewer_16.0.51.0_x64__pccxv4s157z20","PowerAutomateProcessMining_6.1.2401.17492_x64__8wekyb3d8bbwe","AriesInsight-AriesPensionSystem-11.07_11.7.0.0_x64__pccxv4s157z20","Postman11_11.18.0.0_x64__nmvg3h6wsd778","ITG-PositAlert-2018.3.2.59577_2018.3.2.0_x64__nmvg3h6wsd778","SafeNetAuthenticationClient10.9_10.9.3283.0_x64__nmvg3h6wsd778","SAP-SAP-7.70_7.7.0.0_x64__nmvg3h6wsd778","AbInitio-GDE-4.1.6.0_4.1.6.0_x64__pccxv4s157z20","Notepad-plus-plus_8.7.3.0_x64__nmvg3h6wsd778","Markit-EDM-19.2.35_19.2.35.0_x64__pccxv4s157z20","Microsoft.PowerAutomateDesktop_11.2411.200.0_x64__8wekyb3d8bbwe"]
19/03/2025, 13:41:23.241	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	["ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778","SAP-SAP-7.70_7.7.0.0_x64__nmvg3h6wsd778","IBM-MQExplorer-9.3.1.0_9.3.1.0_x64__nmvg3h6wsd778","GoToAssist-v11.9-1380_11.9.1380.0_x64__nmvg3h6wsd778","Oracle-SQLDeveloper-24.3.0.284.2209-x64_24.3.1.0_x64__nmvg3h6wsd778","Devolutions-Remote-Desktop-Manager-13.6.7.0_0.0.0.0_x64__nmvg3h6wsd778","AbInitio-TRMC-4.1.6.0-MSIX_4.1.6.0_x64__pccxv4s157z20","BlockCrossClient_9.17.6393.0_x64__pccxv4s157z20","Seavus-Project-Viewer_16.0.51.0_x64__pccxv4s157z20","PowerAutomateProcessMining_6.1.2401.17492_x64__8wekyb3d8bbwe","AriesInsight-AriesPensionSystem-11.07_11.7.0.0_x64__pccxv4s157z20","AbInitio-GDE-4.1.6.0_4.1.6.0_x64__pccxv4s157z20","Postman11_11.18.0.0_x64__nmvg3h6wsd778","ITG-PositAlert-2018.3.2.59577_2018.3.2.0_x64__nmvg3h6wsd778","Notepad-plus-plus_8.7.3.0_x64__nmvg3h6wsd778","Markit-EDM-19.2.35_19.2.35.0_x64__pccxv4s157z20","Microsoft.PowerAutomateDesktop_11.2411.200.0_x64__8wekyb3d8bbwe","SafeNetAuthenticationClient10.9_10.9.3283.0_x64__nmvg3h6wsd778"]

Can you tidy up MSIXPackagesList, remove trailing [] and "", seperate each entry with a ; and add a new column called PackageCount that gives number of entries per line


WVDAgentHealthStatus
| extend ParsedHealthChecks = parse_json(SessionHostHealthCheckResult) 
| mv-expand ParsedHealthChecks
| extend HealthCheckName = tostring(ParsedHealthChecks.HealthCheckName),
         HealthCheckResult = tostring(ParsedHealthChecks.HealthCheckResult),
         ErrorMessage = tostring(ParsedHealthChecks.AdditionalFailureDetails.Message)
| where ErrorMessage contains "MSIX packages have failed to properly stage"
| extend PackagesList = extract_all(@"\[(.*?), \(", ErrorMessage)
| mv-expand PackagesList
| extend MSIXPackageName = tostring(PackagesList)
| project StatusTimeStamp, SessionHostName, ErrorType="MSIX Package Failure", MSIXPackageName
| order by StatusTimeStamp desc


returns 

StatusTimeStamp [UTC]	SessionHostName	ErrorType	MSIXPackageName
19/03/2025, 17:41:01.874	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778
19/03/2025, 17:41:01.874	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778
19/03/2025, 17:41:01.874	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778
19/03/2025, 17:41:01.874	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778
19/03/2025, 17:41:01.874	M01USSPI0019.aberdeen.aberdeen-asset.com	MSIX Package Failure	ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778

Can I rationalise for a single line for StatusTimeStamp [UTC], SessionHostName and MSIXPackageName





WVDAgentHealthStatus
| extend ParsedHealthChecks = parse_json(SessionHostHealthCheckResult) 
| mv-expand ParsedHealthChecks
| extend HealthCheckName = tostring(ParsedHealthChecks.HealthCheckName),
         HealthCheckResult = tostring(ParsedHealthChecks.HealthCheckResult),
         ErrorMessage = tostring(ParsedHealthChecks.AdditionalFailureDetails.Message)
| where ErrorMessage contains "MSIX packages have failed to properly stage"
| extend PackagesList = extract_all(@"\[(.*?), \(", ErrorMessage)
| mv-expand PackagesList
| extend MSIXPackageName = tostring(PackagesList)
| project TimeGenerated, SessionHostName, HealthCheckName, HealthCheckResult, ErrorType="MSIX Package Failure", MSIXPackageName




TimeGenerated [UTC]	SessionHostName	HealthCheckName	HealthCheckResult	ErrorType	ErrorDetail
20/03/2025, 07:28:22.350	M01PSSPI1296.aberdeen.aberdeen-asset.com	10	2	Native error 1816	SessionHost needs assistance: The following MSIX packages have failed to properly stage: [ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778, (Native error 1816
20/03/2025, 07:28:52.416	M01PSSPI1296.aberdeen.aberdeen-asset.com	10	2	Native error 1816	SessionHost needs assistance: The following MSIX packages have failed to properly stage: [ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778, (Native error 1816
20/03/2025, 07:26:52.187	M01PSSPI1296.aberdeen.aberdeen-asset.com	10	2	Native error 1816	SessionHost needs assistance: The following MSIX packages have failed to properly stage: [ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778, (Native error 1816
20/03/2025, 07:27:22.241	M01PSSPI1296.aberdeen.aberdeen-asset.com	10	2	Native error 1816	SessionHost needs assistance: The following MSIX packages have failed to properly stage: [ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778, (Native error 1816
20/03/2025, 07:27:52.301	M01PSSPI1296.aberdeen.aberdeen-asset.com	10	2	Native error 1816	SessionHost needs assistance: The following MSIX packages have failed to properly stage: [ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778, (Native error 1816
20/03/2025, 07:29:24.424	M01PSSPI1296.aberdeen.aberdeen-asset.com	10	2	Native error 1816	SessionHost needs assistance: The following MSIX packages have failed to properly stage: [ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778, (Native error 1816
20/03/2025, 07:29:54.462	M01PSSPI1296.aberdeen.aberdeen-asset.com	10	2	Native error 1816	SessionHost needs assistance: The following MSIX packages have failed to properly stage: [ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778, (Native error 1816




WVDAgentHealthStatus
| extend ParsedHealthChecks = parse_json(SessionHostHealthCheckResult) 
| mv-expand ParsedHealthChecks
| extend HealthCheckName = tostring(ParsedHealthChecks.HealthCheckName),
         HealthCheckResult = tostring(ParsedHealthChecks.HealthCheckResult),
         ErrorMessage = tostring(ParsedHealthChecks.AdditionalFailureDetails.Message)
| extend ErrorType = extract(@"(Unexpected network error|Native error \d+|NeedsAssistance)", 0, ErrorMessage),
         ErrorDetail = extract(@"(.*?NeedsAssistance|.*?Native error \d+)", 0, ErrorMessage)
| project TimeGenerated, SessionHostName, HealthCheckName, HealthCheckResult, ErrorType, ErrorDetail



KQL below returns
WVDAgentHealthStatus

TenantId	TimeGenerated [UTC]	OperationName	SessionHostName	SessionHostResourceId	AgentVersion	OSVersion	SxSStackVersion	AllowNewSessions	Status	StatusTimeStamp [UTC]	LastHeartBeat [UTC]	EndpointState	UpgradeState	UpgradeErrorMsg	LastUpgradeTimeStamp [UTC]	SessionHostHealthCheckResult	ActiveSessions	InactiveSessions	SourceSystem	Type	_ResourceId
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	20/03/2025, 08:03:58.097	AgentUpdateHealthStatus	M01USSPI0044.aberdeen.aberdeen-asset.com	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourceGroups/rg-EUS-RemoteDesktopDevices-UATVirtualDesktop-NEU-PRD/providers/Microsoft.Compute/virtualMachines/M01USSPI0044	1.0.10673.700	10.0.22631.4890	rdp-sxs240929850	TRUE	Available	10/03/2025, 11:59:50.346	18/03/2025, 17:43:04.496	Healthy	Succeeded		10/03/2025, 11:59:50.346	[{"HealthCheckName":0,"HealthCheckResult":1,"AdditionalFailureDetails":{"Message":"SessionHost healthy: is joined to domain ≤aberdeen.aberdeen-asset.com≥","ErrorCode":0,"LastHealthCheckInUTC":"2025-03-18T17:25:08.8241139Z"},"AdditionalDetails":null,"IsProvisioningHealthCheck":false},{"HealthCheckName":1,"HealthCheckResult":1,"AdditionalFailureDetails":{"Message":"SessionHost healthy: domain trust check succeeded for domain ≤aberdeen.aberdeen-asset.com≥","ErrorCode":0,"LastHealthCheckInUTC":"2025-03-18T17:25:48.4247262Z"},"AdditionalDetails":null,"IsProvisioningHealthCheck":false},{"HealthCheckName":3,"HealthCheckResult":1,"AdditionalFailureDetails":{"Message":"SessionHost healthy: SessionHost healthy: SxS stack listener is ready","ErrorCode":0,"LastHealthCheckInUTC":"2025-03-18T17:25:48.0321410Z"},"AdditionalDetails":null,"IsProvisioningHealthCheck":false},{"HealthCheckName":4,"HealthCheckResult":1,"AdditionalFailureDetails":{"Message":"{\"AccessibleUrls\":[\"b0a70d8b-1964-4891-9dcb-3e11056fe5ed.rdbroker-g-eu-r1.wvd.microsoft.com\",\"b0a70d8b-1964-4891-9dcb-3e11056fe5ed.rdbroker.wvd.microsoft.com\",\"b0a70d8b-1964-4891-9dcb-3e11056fe5ed.rddiagnostics-g-eu-r1.wvd.microsoft.com\",\"rdgateway-host-blue-c201-ukw-r1.wvd.microsoft.com\",\"mrsglobalsteus2prod.blob.core.windows.net\",\"gcs.prod.monitoring.core.windows.net\",\"northeurope-shared.prod.warm.ingest.monitor.core.windows.net\",\"northeurope-qos.prod.warm.ingest.monitor.core.windows.net\"],\"NotAccessibleUrls\":null,\"Context\":null}","ErrorCode":0,"LastHealthCheckInUTC":"2025-03-18T17:25:57.7953072Z"},"AdditionalDetails":null,"IsProvisioningHealthCheck":false},{"HealthCheckName":5,"HealthCheckResult":1,"AdditionalFailureDetails":{"Message":"Located running process at C:\\Program Files\\Microsoft RDInfra\\RDMonitoringAgent_46.24.3\\Agent\\MonAgentLauncher.exe","ErrorCode":0,"LastHealthCheckInUTC":"2025-03-18T17:40:38.3560291Z"},"AdditionalDetails":null,"IsProvisioningHealthCheck":false},{"HealthCheckName":9,"HealthCheckResult":1,"AdditionalFailureDetails":{"Message":"{\r\n  \"Details\": \"IMDS pressumed available\",\r\n  \"AzureResourceId\": \"/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourceGroups/RG-EUS-REMOTEDESKTOPDEVICES-UATVIRTUALDESKTOP-NEU-PRD/providers/Microsoft.Compute/virtualMachines/M01USSPI0044\",\r\n  \"VmId\": \"cf1da4d3-302a-446c-b02e-5b4697657ac9\"\r\n}","ErrorCode":0,"LastHealthCheckInUTC":"2025-03-18T17:25:36.5260343Z"},"AdditionalDetails":null,"IsProvisioningHealthCheck":false},{"HealthCheckName":10,"HealthCheckResult":1,"AdditionalFailureDetails":{"Message":"SessionHost healthy: MSIX packages have been properly staged","ErrorCode":0,"LastHealthCheckInUTC":"2025-03-18T17:42:33.4242931Z"},"AdditionalDetails":null,"IsProvisioningHealthCheck":false}]	0	1		WVDAgentHealthStatus	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_uat_sspersistent
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	20/03/2025, 08:03:02.095	AgentUpdateHealthStatus	M01PSSPI1348.aberdeen.aberdeen-asset.com	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourceGroups/rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD/providers/Microsoft.Compute/virtualMachines/M01PSSPI1348	1.0.10673.700	10.0.22631.4890	rdp-sxs240929850	TRUE	NeedsAssistance	09/03/2025, 20:06:10.650	20/03/2025, 08:03:02.075	NeedsAssistance	Succeeded		09/03/2025, 20:06:10.650	[{"HealthCheckName":0,"HealthCheckResult":1,"AdditionalFailureDetails":{"Message":"SessionHost healthy: is joined to domain ≤aberdeen.aberdeen-asset.com≥","ErrorCode":0,"LastHealthCheckInUTC":"2025-03-20T07:54:23.3086547Z"},"AdditionalDetails":null,"IsProvisioningHealthCheck":false},{"HealthCheckName":1,"HealthCheckResult":1,"AdditionalFailureDetails":{"Message":"SessionHost healthy: domain trust check succeeded for domain ≤aberdeen.aberdeen-asset.com≥","ErrorCode":0,"LastHealthCheckInUTC":"2025-03-20T07:55:45.3459955Z"},"AdditionalDetails":null,"IsProvisioningHealthCheck":false},{"HealthCheckName":3,"HealthCheckResult":1,"AdditionalFailureDetails":{"Message":"SessionHost healthy: SessionHost healthy: SxS stack listener is ready","ErrorCode":0,"LastHealthCheckInUTC":"2025-03-20T07:54:26.7622443Z"},"AdditionalDetails":null,"IsProvisioningHealthCheck":false},{"HealthCheckName":4,"HealthCheckResult":1,"AdditionalFailureDetails":{"Message":"{\"AccessibleUrls\":[\"d2edccb0-79b9-439d-a516-c3e854326a5f.rdbroker-g-eu-r1.wvd.microsoft.com\",\"d2edccb0-79b9-439d-a516-c3e854326a5f.rdbroker.wvd.microsoft.com\",\"d2edccb0-79b9-439d-a516-c3e854326a5f.rddiagnostics-g-eu-r1.wvd.microsoft.com\",\"mrsglobalsteus2prod.blob.core.windows.net\",\"gcs.prod.monitoring.core.windows.net\",\"northeurope-shared.prod.warm.ingest.monitor.core.windows.net\",\"northeurope-qos.prod.warm.ingest.monitor.core.windows.net\"],\"NotAccessibleUrls\":null,\"Context\":null}","ErrorCode":0,"LastHealthCheckInUTC":"2025-03-20T07:54:28.1845760Z"},"AdditionalDetails":null,"IsProvisioningHealthCheck":false},{"HealthCheckName":5,"HealthCheckResult":1,"AdditionalFailureDetails":{"Message":"Located running process at C:\\Program Files\\Microsoft RDInfra\\RDMonitoringAgent_46.24.3\\Agent\\MonAgentLauncher.exe","ErrorCode":0,"LastHealthCheckInUTC":"2025-03-20T07:39:26.8159665Z"},"AdditionalDetails":null,"IsProvisioningHealthCheck":false},{"HealthCheckName":9,"HealthCheckResult":1,"AdditionalFailureDetails":{"Message":"{\r\n  \"Details\": \"IMDS pressumed available\",\r\n  \"AzureResourceId\": \"/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourceGroups/rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD/providers/Microsoft.Compute/virtualMachines/M01PSSPI1348\",\r\n  \"VmId\": \"7fbed495-c307-48fd-9384-67a2984e5460\"\r\n}","ErrorCode":0,"LastHealthCheckInUTC":"2025-03-20T07:54:26.9185047Z"},"AdditionalDetails":null,"IsProvisioningHealthCheck":false},{"HealthCheckName":10,"HealthCheckResult":2,"AdditionalFailureDetails":{"Message":"SessionHost needs assistance: The following MSIX packages have failed to properly stage: [ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]\r\n[DWGSee_3.36.0.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]\r\n[SAP-SAP-7.70_7.7.0.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]\r\n[IBM-MQExplorer-9.3.1.0_9.3.1.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]\r\n[GoToAssist-v11.9-1380_11.9.1380.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]\r\n[Devolutions-Remote-Desktop-Manager-13.6.7.0_0.0.0.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]\r\n[Oracle-SQLDeveloper-24.3.0.284.2209-x64_24.3.1.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]\r\n[AbInitio-TRMC-4.1.6.0-MSIX_4.1.6.0_x64__pccxv4s157z20, (Native error 1816., NeedsAssistance)]\r\n[BlockCrossClient_9.17.6393.0_x64__pccxv4s157z20, (Unexpected network error, NeedsAssistance)]\r\n[Seavus-Project-Viewer_16.0.51.0_x64__pccxv4s157z20, (Unexpected network error, NeedsAssistance)]\r\n[PowerAutomateProcessMining_6.1.2401.17492_x64__8wekyb3d8bbwe, (Unexpected network error, NeedsAssistance)]\r\n[AriesInsight-AriesPensionSystem-11.07_11.7.0.0_x64__pccxv4s157z20, (Native error 1816., NeedsAssistance)]\r\n[AbInitio-GDE-4.1.6.0_4.1.6.0_x64__pccxv4s157z20, (Unexpected network error, NeedsAssistance)]\r\n[Postman11_11.18.0.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]\r\n[ITG-PositAlert-2018.3.2.59577_2018.3.2.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]\r\n[Notepad-plus-plus_8.7.3.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]\r\n[Markit-EDM-19.2.35_19.2.35.0_x64__pccxv4s157z20, (Native error 1816., NeedsAssistance)]\r\n[Microsoft.PowerAutomateDesktop_11.2411.200.0_x64__8wekyb3d8bbwe, (Unexpected network error, NeedsAssistance)]\r\n[SafeNetAuthenticationClient10.9_10.9.3283.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]","ErrorCode":0,"LastHealthCheckInUTC":"2025-03-20T08:02:44.5280479Z"},"AdditionalDetails":null,"IsProvisioningHealthCheck":false}]	1	0		WVDAgentHealthStatus	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent

tell me difference between SessionHostHealthCheckResult in both entries

let HostPoolMapping = datatable(SessionHostKey: string, HostPoolName: string)
[
    "m01plcri", "neu_prd_low_crims_rmpooled",
    "m01tmsni", "neu_tst_mspooled",
    "m01nacri", "neu_npa_crims_rmpooled",
    "m01pqnt0", "neu_prod_quantum_rmpooled",
    "m14pmsni", "sea_prd_mspooled",
    "m14psspi", "sea_prd_sspersistent",
    "m01tsspi", "neu_tst_sspersistent",
    "m01padm0", "neu_prd_adm_rmpooled",
    "m01phcri", "neu_prd_high_crims_rmpooled",
    "m01umsni", "neu_uat_multisession",
    "m06psspg", "eus2_prd_sspersistent",
    "m01usspi", "neu_uat_sspersistent",
    "m01psspi", "neu_prd_sspersistent",
    "m01pmsni", "neu_prd_mspooled",
    "m14umsni", "sea_uat_mspooled",
    "m06usspg", "eus2_uat_sspersistent",
    "m01uqnt0", "neu_uat_quantum_rmpooled",
    "m01uadm0", "neu_uat_adm_rmpooled",
    "m01pmcri", "neu_prd_med_crims_rmpooled",
    "m01dvldt", "neu_dev_sspersistent",
    "m01nbcri", "neu_npb_crims_rmpooled",
    "m01olcri", "neu_oat_low_crims_rmpooled",
    "m01omcri", "neu_oat_med_crims_rmpooled",
    "m14usspi", "neu_uat_sspersistent",
    "m01ohcri", "neu_oat_high_crims_rmpooled"
];
Perf
//| where TimeGenerated between (datetime(2025-03-04T19:35:00Z) .. datetime(2025-03-04T20:00:00Z))
| where ObjectName == "User Input Delay per Process"
| where InstanceName contains "rdpvchost.exe"
| extend SessionId = extract(@"^(\d+):", 1, InstanceName)
| extend SessionHostKey = tolower(substring(Computer, 0, 8))
| extend SessionHostName = tolower(substring(Computer, 0, 12))


TenantId	Computer	ObjectName	CounterName	InstanceName	Min	Max	SampleCount	CounterValue	TimeGenerated [UTC]	BucketStartTime [UTC]	BucketEndTime [UTC]	SourceSystem	CounterPath	MG	Type	_ResourceId	SessionId	SessionHostKey	SessionHostName
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	M01PSSPI0382.aberdeen.aberdeen-asset.com	User Input Delay per Process	Max Input Delay	2:9468 <rdpvchost.exe>				0	20/03/2025, 06:42:17.653			OpsManager	\\M01PSSPI0382.aberdeen.aberdeen-asset.com\User Input Delay per Process(2:9468 <rdpvchost.exe>)\Max Input Delay	00000000-0000-0000-0000-000000000001	Perf	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-persistentvirtualdesktop-neu-prd/providers/microsoft.compute/virtualmachines/m01psspi0382	2	m01psspi	m01psspi0382
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	M01PLCRI0002.aberdeen.aberdeen-asset.com	User Input Delay per Process	Max Input Delay	30:10024 <rdpvchost.exe>				0	20/03/2025, 06:42:08.585			OpsManager	\\M01PLCRI0002.aberdeen.aberdeen-asset.com\User Input Delay per Process(30:10024 <rdpvchost.exe>)\Max Input Delay	00000000-0000-0000-0000-000000000001	Perf	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-remoteappvirtualdesktop-neu-prd/providers/microsoft.compute/virtualmachines/m01plcri0002	30	m01plcri	m01plcri0002
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	M01PLCRI0002.aberdeen.aberdeen-asset.com	User Input Delay per Process	Max Input Delay	39:29412 <rdpvchost.exe>				0	20/03/2025, 06:42:08.585			OpsManager	\\M01PLCRI0002.aberdeen.aberdeen-asset.com\User Input Delay per Process(39:29412 <rdpvchost.exe>)\Max Input Delay	00000000-0000-0000-0000-000000000001	Perf	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-remoteappvirtualdesktop-neu-prd/providers/microsoft.compute/virtualmachines/m01plcri0002	39	m01plcri	m01plcri0002
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	M01PLCRI0002.aberdeen.aberdeen-asset.com	User Input Delay per Process	Max Input Delay	28:37064 <rdpvchost.exe>				0	20/03/2025, 06:42:08.585			OpsManager	\\M01PLCRI0002.aberdeen.aberdeen-asset.com\User Input Delay per Process(28:37064 <rdpvchost.exe>)\Max Input Delay	00000000-0000-0000-0000-000000000001	Perf	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-remoteappvirtualdesktop-neu-prd/providers/microsoft.compute/virtualmachines/m01plcri0002	28	m01plcri	m01plcri0002
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	M01PLCRI0002.aberdeen.aberdeen-asset.com	User Input Delay per Process	Max Input Delay	29:44636 <rdpvchost.exe>				0	20/03/2025, 06:42:08.585			OpsManager	\\M01PLCRI0002.aberdeen.aberdeen-asset.com\User Input Delay per Process(29:44636 <rdpvchost.exe>)\Max Input Delay	00000000-0000-0000-0000-000000000001	Perf	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-remoteappvirtualdesktop-neu-prd/providers/microsoft.compute/virtualmachines/m01plcri0002	29	m01plcri	m01plcri0002
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	M01PLCRI0002.aberdeen.aberdeen-asset.com	User Input Delay per Process	Max Input Delay	36:47184 <rdpvchost.exe>				0	20/03/2025, 06:42:08.585			OpsManager	\\M01PLCRI0002.aberdeen.aberdeen-asset.com\User Input Delay per Process(36:47184 <rdpvchost.exe>)\Max Input Delay	00000000-0000-0000-0000-000000000001	Perf	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-remoteappvirtualdesktop-neu-prd/providers/microsoft.compute/virtualmachines/m01plcri0002	36	m01plcri	m01plcri0002

I would also like to extract ResourceGroup Name from _ResourceId










https://learn.microsoft.com/en-us/windows/security/identity-protection/credential-guard/configure?tabs=reg



M06PSSPG0004
M06PSSPG0079
M06PSSPG0022
M06PSSPG0082
M06PSSPG0042
M06PSSPG0040
M06PSSPG0078
M06PSSPG0006
M06PSSPG0005
M06PSSPG0002
M06PSSPG0034
M06PSSPG0013
M06PSSPG0050
M06PSSPG0049
M06PSSPG0062
M06PSSPG0018
M06PSSPG0070
M06PSSPG0065
M06PSSPG0037
M06PSSPG0081


$ResourceGroupName = "rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-EUS2-PRD"

##Change Me##
$tags = @{"ABRDN_AUTOSCALE_Exclude" = "TRUE"}
##Change Me##

# Define the list of VM names
$AzureVMs = @(
    "M06PSSPG0004", "M06PSSPG0079", "M06PSSPG0022", "M06PSSPG0082", "M06PSSPG0042",
    "M06PSSPG0040", "M06PSSPG0078", "M06PSSPG0006", "M06PSSPG0005", "M06PSSPG0002",
    "M06PSSPG0034", "M06PSSPG0013", "M06PSSPG0050", "M06PSSPG0049", "M06PSSPG0062",
    "M06PSSPG0018", "M06PSSPG0070", "M06PSSPG0065", "M06PSSPG0037", "M06PSSPG0081"
)

foreach ($AzureVMName in $AzureVMs) {
    try {
        # Retrieve VM details and extract the Resource ID
        $VM = Get-AzVM -ResourceGroupName $ResourceGroupName -Name $AzureVMName -ErrorAction Stop
        $VMResourceId = $VM.Id

        Write-Output "Updating VM: $AzureVMName (Resource ID: $VMResourceId)"

        # Update the tag on the VM
        Update-AzTag -ResourceId $VMResourceId -Tag $tags -Operation Merge

        Write-Output "Successfully updated tags for VM: $AzureVMName"
    }
    catch {
        Write-Output "Failed to update VM: $AzureVMName. Error: $_"
    }
}








let
    Source = List.Numbers(1, 8184),
    TableFromList = Table.FromList(Source, Splitter.SplitByNothing(), {"Index"})
in
    TableFromList



$ResourceGroupName = "rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD"

##Change Me##
$tags = @{"ABRDN_AUTOSCALE_Exclude" = "TRUE"}
##Change Me##

# Define the list of VM names
$AzureVMs = @(
    "M01PSSPI1117","M01PSSPI1163","M01PSSPI0574","M01PSSPI1150","M01PSSPI0620",
    "M01PSSPI0585","M01PSSPI0603","M01PSSPI0611","M01PSSPI0983","M01PSSPI0641",
    "M01PSSPI1635","M01PSSPI0391","M01PSSPI0742","M01PSSPI0148","M01PSSPI0309",
    "M01PSSPI0440","M01PSSPI1409","M01PSSPI0202","M01PSSPI0059","M01PSSPI0485",
    "M01PSSPI0942","M01PSSPI0130","M01PSSPI0890","M01PSSPI0123","M01PSSPI0881",
    "M01PSSPI1587","M01PSSPI0188","M01PSSPI0616","M01PSSPI0963","M01PSSPI0787",
    "M01PSSPI0505","M01PSSPI0119","M01PSSPI1225","M01PSSPI0248","M01PSSPI0379",
    "M01PSSPI1244","M01PSSPI0974","M01PSSPI0578","M01PSSPI0153","M01PSSPI0033",
    "M01PSSPI1600","M01PSSPI0608","M01PSSPI0070","M01PSSPI1129","M01PSSPI0489",
    "M01PSSPI0157","M01PSSPI0777","M01PSSPI0670","M01PSSPI0547","M01PSSPI0614",
    "M01PSSPI1499","M01PSSPI1360","M01PSSPI0086","M01PSSPI1121","M01PSSPI0285",
    "M01PSSPI1301","M01PSSPI0090","M01PSSPI1283","M01PSSPI1151","M01PSSPI0622",
    "M01PSSPI0095","M01PSSPI0553","M01PSSPI0411","M01PSSPI1616","M01PSSPI1123",
    "M01PSSPI0954","M01PSSPI1636","M01PSSPI1111","M01PSSPI1647","M01PSSPI0624",
    "M01PSSPI0493","M01PSSPI0091","M01PSSPI0634","M01PSSPI1210","M01PSSPI0175",
    "M01PSSPI0981","M01PSSPI1510","M01PSSPI0513","M01PSSPI1216","M01PSSPI1336",
    "M01PSSPI0738","M01PSSPI0817","M01PSSPI0631","M01PSSPI0327","M01PSSPI0487",
    "M01PSSPI1623","M01PSSPI0879","M01PSSPI0636","M01PSSPI1650","M01PSSPI0421",
    "M01PSSPI0632","M01PSSPI0727","M01PSSPI0268","M01PSSPI0151","M01PSSPI0427",
    "M01PSSPI1101","M01PSSPI0476","M01PSSPI1287","M01PSSPI0788","M01PSSPI0802",
    "M01PSSPI0527","M01PSSPI1617","M01PSSPI0785","M01PSSPI1140","M01PSSPI0311",
    "M01PSSPI1142","M01PSSPI0342","M01PSSPI1209","M01PSSPI0746","M01PSSPI0558",
    "M01PSSPI1470","M01PSSPI1256","M01PSSPI1189","M01PSSPI0554","M01PSSPI0492",
    "M01PSSPI1048","M01PSSPI0853","M01PSSPI0612","M01PSSPI0533","M01PSSPI0058",
    "M01PSSPI0586","M01PSSPI0107","M01PSSPI0273","M01PSSPI1099","M01PSSPI0436",
    "M01PSSPI0562","M01PSSPI1594","M01PSSPI0848","M01PSSPI1495","M01PSSPI0369",
    "M01PSSPI0426","M01PSSPI1274","M01PSSPI0519","M01PSSPI0491","M01PSSPI1251",
    "M01PSSPI0889","M01PSSPI0082","M01PSSPI0406","M01PSSPI0821","M01PSSPI0838",
    "M01PSSPI0538","M01PSSPI0146","M01PSSPI0651","M01PSSPI1450","M01PSSPI0399",
    "M01PSSPI1576","M01PSSPI1351","M01PSSPI0929","M01PSSPI0407","M01PSSPI1310",
    "M01PSSPI0537","M01PSSPI0583","M01PSSPI0210","M01PSSPI0077","M01PSSPI0380",
    "M01PSSPI0790","M01PSSPI0965","M01PSSPI1485","M01PSSPI0422","M01PSSPI0892",
    "M01PSSPI0966","M01PSSPI0501","M01PSSPI0928","M01PSSPI1359","M01PSSPI0581",
    "M01PSSPI0982","M01PSSPI0885","M01PSSPI0350","M01PSSPI1248","M01PSSPI1207",
    "M01PSSPI1408","M01PSSPI0605","M01PSSPI0666"
)

foreach ($AzureVMName in $AzureVMs) {
    try {
        $VM = Get-AzVM -ResourceGroupName $ResourceGroupName -Name $AzureVMName -ErrorAction Stop
        $VMResourceId = $VM.Id
        Write-Output "Updating VM: $AzureVMName (Resource ID: $VMResourceId)"
        Update-AzTag -ResourceId $VMResourceId -Tag $tags -Operation Merge
        Write-Output "Successfully updated tags for VM: $AzureVMName"
    }
    catch {
        Write-Output "Failed to update VM: $AzureVMName. Error: $_"
    }
}







M01PSSPI1001.aberdeen.aberdeen-asset.com
M01PSSPI1163.aberdeen.aberdeen-asset.com
M01PSSPI1150.aberdeen.aberdeen-asset.com
M01PSSPI1479.aberdeen.aberdeen-asset.com
M01PSSPI0620.aberdeen.aberdeen-asset.com
M01PSSPI0585.aberdeen.aberdeen-asset.com
M01PSSPI0603.aberdeen.aberdeen-asset.com
M01PSSPI0641.aberdeen.aberdeen-asset.com
M01PSSPI0391.aberdeen.aberdeen-asset.com
M01PSSPI0742.aberdeen.aberdeen-asset.com
M01PSSPI0148.aberdeen.aberdeen-asset.com
M01PSSPI0309.aberdeen.aberdeen-asset.com
M01PSSPI0440.aberdeen.aberdeen-asset.com
M01PSSPI0059.aberdeen.aberdeen-asset.com
M01PSSPI0219.aberdeen.aberdeen-asset.com
M01PSSPI0485.aberdeen.aberdeen-asset.com
M01PSSPI0130.aberdeen.aberdeen-asset.com
M01PSSPI0299.aberdeen.aberdeen-asset.com
M01PSSPI0890.aberdeen.aberdeen-asset.com
M01PSSPI0123.aberdeen.aberdeen-asset.com
M01PSSPI1347.aberdeen.aberdeen-asset.com
M01PSSPI1105.aberdeen.aberdeen-asset.com
M01PSSPI0881.aberdeen.aberdeen-asset.com
M01PSSPI0887.aberdeen.aberdeen-asset.com
M01PSSPI1149.aberdeen.aberdeen-asset.com
M01PSSPI0431.aberdeen.aberdeen-asset.com
M01PSSPI0616.aberdeen.aberdeen-asset.com
M01PSSPI0963.aberdeen.aberdeen-asset.com
M01PSSPI0787.aberdeen.aberdeen-asset.com
M01PSSPI0545.aberdeen.aberdeen-asset.com
M01PSSPI0505.aberdeen.aberdeen-asset.com
M01PSSPI1225.aberdeen.aberdeen-asset.com
M01PSSPI0379.aberdeen.aberdeen-asset.com
M01PSSPI0619.aberdeen.aberdeen-asset.com
M01PSSPI1137.aberdeen.aberdeen-asset.com
M01PSSPI1176.aberdeen.aberdeen-asset.com
M01PSSPI1384.aberdeen.aberdeen-asset.com
M01PSSPI0974.aberdeen.aberdeen-asset.com
M01PSSPI0153.aberdeen.aberdeen-asset.com
M01PSSPI1600.aberdeen.aberdeen-asset.com
M01PSSPI0608.aberdeen.aberdeen-asset.com
M01PSSPI0339.aberdeen.aberdeen-asset.com
M01PSSPI1129.aberdeen.aberdeen-asset.com
M01PSSPI1306.aberdeen.aberdeen-asset.com
M01PSSPI1034.aberdeen.aberdeen-asset.com
M01PSSPI0489.aberdeen.aberdeen-asset.com
M01PSSPI1196.aberdeen.aberdeen-asset.com
M01PSSPI0103.aberdeen.aberdeen-asset.com
M01PSSPI0157.aberdeen.aberdeen-asset.com
M01PSSPI0777.aberdeen.aberdeen-asset.com
M01PSSPI0547.aberdeen.aberdeen-asset.com
M01PSSPI0614.aberdeen.aberdeen-asset.com
M01PSSPI0056.aberdeen.aberdeen-asset.com
M01PSSPI1499.aberdeen.aberdeen-asset.com
M01PSSPI1007.aberdeen.aberdeen-asset.com
M01PSSPI1121.aberdeen.aberdeen-asset.com
M01PSSPI0285.aberdeen.aberdeen-asset.com
M01PSSPI1301.aberdeen.aberdeen-asset.com
M01PSSPI0090.aberdeen.aberdeen-asset.com
M01PSSPI1151.aberdeen.aberdeen-asset.com
M01PSSPI0622.aberdeen.aberdeen-asset.com
M01PSSPI0095.aberdeen.aberdeen-asset.com
M01PSSPI0553.aberdeen.aberdeen-asset.com
M01PSSPI1266.aberdeen.aberdeen-asset.com
M01PSSPI0411.aberdeen.aberdeen-asset.com
M01PSSPI1616.aberdeen.aberdeen-asset.com
M01PSSPI1038.aberdeen.aberdeen-asset.com
M01PSSPI1123.aberdeen.aberdeen-asset.com
M01PSSPI0428.aberdeen.aberdeen-asset.com
M01PSSPI1111.aberdeen.aberdeen-asset.com
M01PSSPI0366.aberdeen.aberdeen-asset.com
M01PSSPI0624.aberdeen.aberdeen-asset.com
M01PSSPI0320.aberdeen.aberdeen-asset.com
M01PSSPI0549.aberdeen.aberdeen-asset.com
M01PSSPI0091.aberdeen.aberdeen-asset.com
M01PSSPI1281.aberdeen.aberdeen-asset.com
M01PSSPI1084.aberdeen.aberdeen-asset.com
M01PSSPI0957.aberdeen.aberdeen-asset.com
M01PSSPI0513.aberdeen.aberdeen-asset.com
M01PSSPI1628.aberdeen.aberdeen-asset.com
M01PSSPI0817.aberdeen.aberdeen-asset.com
M01PSSPI0631.aberdeen.aberdeen-asset.com
M01PSSPI1029.aberdeen.aberdeen-asset.com
M01PSSPI0487.aberdeen.aberdeen-asset.com
M01PSSPI0879.aberdeen.aberdeen-asset.com
M01PSSPI0636.aberdeen.aberdeen-asset.com
M01PSSPI0421.aberdeen.aberdeen-asset.com
M01PSSPI0355.aberdeen.aberdeen-asset.com
M01PSSPI0727.aberdeen.aberdeen-asset.com
M01PSSPI0268.aberdeen.aberdeen-asset.com
M01PSSPI1101.aberdeen.aberdeen-asset.com
M01PSSPI1436.aberdeen.aberdeen-asset.com
M01PSSPI1198.aberdeen.aberdeen-asset.com
M01PSSPI1354.aberdeen.aberdeen-asset.com
M01PSSPI1287.aberdeen.aberdeen-asset.com
M01PSSPI0446.aberdeen.aberdeen-asset.com
M01PSSPI0788.aberdeen.aberdeen-asset.com
M01PSSPI0121.aberdeen.aberdeen-asset.com
M01PSSPI0113.aberdeen.aberdeen-asset.com
M01PSSPI0527.aberdeen.aberdeen-asset.com
M01PSSPI1617.aberdeen.aberdeen-asset.com
M01PSSPI1140.aberdeen.aberdeen-asset.com
M01PSSPI0311.aberdeen.aberdeen-asset.com
M01PSSPI1142.aberdeen.aberdeen-asset.com
M01PSSPI1612.aberdeen.aberdeen-asset.com
M01PSSPI0342.aberdeen.aberdeen-asset.com
M01PSSPI0746.aberdeen.aberdeen-asset.com
M01PSSPI0558.aberdeen.aberdeen-asset.com
M01PSSPI1397.aberdeen.aberdeen-asset.com
M01PSSPI0554.aberdeen.aberdeen-asset.com
M01PSSPI0844.aberdeen.aberdeen-asset.com
M01PSSPI0492.aberdeen.aberdeen-asset.com
M01PSSPI0853.aberdeen.aberdeen-asset.com
M01PSSPI0546.aberdeen.aberdeen-asset.com
M01PSSPI0612.aberdeen.aberdeen-asset.com
M01PSSPI0533.aberdeen.aberdeen-asset.com
M01PSSPI0058.aberdeen.aberdeen-asset.com
M01PSSPI0273.aberdeen.aberdeen-asset.com
M01PSSPI1099.aberdeen.aberdeen-asset.com
M01PSSPI0436.aberdeen.aberdeen-asset.com
M01PSSPI0562.aberdeen.aberdeen-asset.com
M01PSSPI0848.aberdeen.aberdeen-asset.com
M01PSSPI1495.aberdeen.aberdeen-asset.com
M01PSSPI0369.aberdeen.aberdeen-asset.com
M01PSSPI1274.aberdeen.aberdeen-asset.com
M01PSSPI1005.aberdeen.aberdeen-asset.com
M01PSSPI0519.aberdeen.aberdeen-asset.com
M01PSSPI0491.aberdeen.aberdeen-asset.com
M01PSSPI1251.aberdeen.aberdeen-asset.com
M01PSSPI0889.aberdeen.aberdeen-asset.com
M01PSSPI1606.aberdeen.aberdeen-asset.com
M01PSSPI0406.aberdeen.aberdeen-asset.com
M01PSSPI0821.aberdeen.aberdeen-asset.com
M01PSSPI1614.aberdeen.aberdeen-asset.com
M01PSSPI0651.aberdeen.aberdeen-asset.com
M01PSSPI0131.aberdeen.aberdeen-asset.com
M01PSSPI0399.aberdeen.aberdeen-asset.com
M01PSSPI1580.aberdeen.aberdeen-asset.com
M01PSSPI0407.aberdeen.aberdeen-asset.com
M01PSSPI0776.aberdeen.aberdeen-asset.com
M01PSSPI0537.aberdeen.aberdeen-asset.com
M01PSSPI1493.aberdeen.aberdeen-asset.com
M01PSSPI0093.aberdeen.aberdeen-asset.com
M01PSSPI0077.aberdeen.aberdeen-asset.com
M01PSSPI0380.aberdeen.aberdeen-asset.com
M01PSSPI0790.aberdeen.aberdeen-asset.com
M01PSSPI1698.aberdeen.aberdeen-asset.com
M01PSSPI0467.aberdeen.aberdeen-asset.com
M01PSSPI1522.aberdeen.aberdeen-asset.com
M01PSSPI1597.aberdeen.aberdeen-asset.com
M01PSSPI0892.aberdeen.aberdeen-asset.com
M01PSSPI0966.aberdeen.aberdeen-asset.com
M01PSSPI0830.aberdeen.aberdeen-asset.com
M01PSSPI0501.aberdeen.aberdeen-asset.com
M01PSSPI0350.aberdeen.aberdeen-asset.com
M01PSSPI1186.aberdeen.aberdeen-asset.com
M01PSSPI1408.aberdeen.aberdeen-asset.com
M01PSSPI0605.aberdeen.aberdeen-asset.com
M01PSSPI0666.aberdeen.aberdeen-asset.com

Can you put append this list above into the $AzureVMs section below

$ResourceGroupName = "rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD"

##Change Me##
$tags = @{"ABRDN_AUTOSCALE_Exclude" = "TRUE"}
##Change Me##

# Define the list of VM names
$AzureVMs = @(
    "M01PSSPI1117","M01PSSPI1163","M01PSSPI0574","M01PSSPI1150","M01PSSPI0620",
    "M01PSSPI0585","M01PSSPI0603","M01PSSPI0611","M01PSSPI0983","M01PSSPI0641",
    "M01PSSPI1635","M01PSSPI0391","M01PSSPI0742","M01PSSPI0148","M01PSSPI0309",
    "M01PSSPI0440","M01PSSPI1409","M01PSSPI0202","M01PSSPI0059","M01PSSPI0485",
    "M01PSSPI0942","M01PSSPI0130","M01PSSPI0890","M01PSSPI0123","M01PSSPI0881",
    "M01PSSPI1587","M01PSSPI0188","M01PSSPI0616","M01PSSPI0963","M01PSSPI0787",
    "M01PSSPI0505","M01PSSPI0119","M01PSSPI1225","M01PSSPI0248","M01PSSPI0379",
    "M01PSSPI1244","M01PSSPI0974","M01PSSPI0578","M01PSSPI0153","M01PSSPI0033",
    "M01PSSPI1600","M01PSSPI0608","M01PSSPI0070","M01PSSPI1129","M01PSSPI0489",
    "M01PSSPI0157","M01PSSPI0777","M01PSSPI0670","M01PSSPI0547","M01PSSPI0614",
    "M01PSSPI1499","M01PSSPI1360","M01PSSPI0086","M01PSSPI1121","M01PSSPI0285",
    "M01PSSPI1301","M01PSSPI0090","M01PSSPI1283","M01PSSPI1151","M01PSSPI0622",
    "M01PSSPI0095","M01PSSPI0553","M01PSSPI0411","M01PSSPI1616","M01PSSPI1123",
    "M01PSSPI0954","M01PSSPI1636","M01PSSPI1111","M01PSSPI1647","M01PSSPI0624",
    "M01PSSPI0493","M01PSSPI0091","M01PSSPI0634","M01PSSPI1210","M01PSSPI0175",
    "M01PSSPI0981","M01PSSPI1510","M01PSSPI0513","M01PSSPI1216","M01PSSPI1336",
    "M01PSSPI0738","M01PSSPI0817","M01PSSPI0631","M01PSSPI0327","M01PSSPI0487",
    "M01PSSPI1623","M01PSSPI0879","M01PSSPI0636","M01PSSPI1650","M01PSSPI0421",
    "M01PSSPI0632","M01PSSPI0727","M01PSSPI0268","M01PSSPI0151","M01PSSPI0427",
    "M01PSSPI1101","M01PSSPI0476","M01PSSPI1287","M01PSSPI0788","M01PSSPI0802",
    "M01PSSPI0527","M01PSSPI1617","M01PSSPI0785","M01PSSPI1140","M01PSSPI0311",
    "M01PSSPI1142","M01PSSPI0342","M01PSSPI1209","M01PSSPI0746","M01PSSPI0558",
    "M01PSSPI1470","M01PSSPI1256","M01PSSPI1189","M01PSSPI0554","M01PSSPI0492",
    "M01PSSPI1048","M01PSSPI0853","M01PSSPI0612","M01PSSPI0533","M01PSSPI0058",
    "M01PSSPI0586","M01PSSPI0107","M01PSSPI0273","M01PSSPI1099","M01PSSPI0436",
    "M01PSSPI0562","M01PSSPI1594","M01PSSPI0848","M01PSSPI1495","M01PSSPI0369",
    "M01PSSPI0426","M01PSSPI1274","M01PSSPI0519","M01PSSPI0491","M01PSSPI1251",
    "M01PSSPI0889","M01PSSPI0082","M01PSSPI0406","M01PSSPI0821","M01PSSPI0838",
    "M01PSSPI0538","M01PSSPI0146","M01PSSPI0651","M01PSSPI1450","M01PSSPI0399",
    "M01PSSPI1576","M01PSSPI1351","M01PSSPI0929","M01PSSPI0407","M01PSSPI1310",
    "M01PSSPI0537","M01PSSPI0583","M01PSSPI0210","M01PSSPI0077","M01PSSPI0380",
    "M01PSSPI0790","M01PSSPI0965","M01PSSPI1485","M01PSSPI0422","M01PSSPI0892",
    "M01PSSPI0966","M01PSSPI0501","M01PSSPI0928","M01PSSPI1359","M01PSSPI0581",
    "M01PSSPI0982","M01PSSPI0885","M01PSSPI0350","M01PSSPI1248","M01PSSPI1207",
    "M01PSSPI1408","M01PSSPI0605","M01PSSPI0666","M01PSSPI1516","M01PSSPI0035"
)

foreach ($AzureVMName in $AzureVMs) {
    try {
        # Retrieve VM details and extract the Resource ID
        $VM = Get-AzVM -ResourceGroupName $ResourceGroupName -Name $AzureVMName -ErrorAction Stop
        $VMResourceId = $VM.Id

        Write-Output "Updating VM: $AzureVMName (Resource ID: $VMResourceId)"

        # Update the tag on the VM
        Update-AzTag -ResourceId $VMResourceId -Tag $tags -Operation Merge

        Write-Output "Successfully updated tags for VM: $AzureVMName"
    }
    catch {
        Write-Output "Failed to update VM: $AzureVMName. Error: $_"
    }
}











| extend SessionIdWithHost = strcat(SessionId, "_", SessionHostKey)  // Appending SessionHostKey to SessionId

let HostPoolMapping = datatable(SessionHostKey: string, HostPoolName: string)
[
    "m01plcri", "neu_prd_low_crims_rmpooled",
    "m01tmsni", "neu_tst_mspooled",
    "m01nacri", "neu_npa_crims_rmpooled",
    "m01pqnt0", "neu_prod_quantum_rmpooled",
    "m14pmsni", "sea_prd_mspooled",
    "m14psspi", "sea_prd_sspersistent",
    "m01tsspi", "neu_tst_sspersistent",
    "m01padm0", "neu_prd_adm_rmpooled",
    "m01phcri", "neu_prd_high_crims_rmpooled",
    "m01umsni", "neu_uat_multisession",
    "m06psspg", "eus2_prd_sspersistent",
    "m01usspi", "neu_uat_sspersistent",
    "m01psspi", "neu_prd_sspersistent",
    "m01pmsni", "neu_prd_mspooled",
    "m14umsni", "sea_uat_mspooled",
    "m06usspg", "eus2_uat_sspersistent",
    "m01uqnt0", "neu_uat_quantum_rmpooled",
    "m01uadm0", "neu_uat_adm_rmpooled",
    "m01pmcri", "neu_prd_med_crims_rmpooled",
    "m01dvldt", "neu_dev_sspersistent",
    "m01nbcri", "neu_npb_crims_rmpooled",
    "m01olcri", "neu_oat_low_crims_rmpooled",
    "m01omcri", "neu_oat_med_crims_rmpooled",
    "m14usspi", "neu_uat_sspersistent",
    "m01ohcri", "neu_oat_high_crims_rmpooled"
];
Perf
| where ObjectName == "User Input Delay per Process"
| where InstanceName contains "rdpvchost.exe"
| extend SessionId = extract(@"^(\d+):", 1, InstanceName)
| extend SessionHostKey = tolower(substring(Computer, 0, 8))
| join kind=leftouter HostPoolMapping on SessionHostKey





Working but not for single Session

let HostPoolMapping = datatable(SessionHostKey: string, HostPoolName: string)
[
    "m01plcri", "neu_prd_low_crims_rmpooled",
    "m01tmsni", "neu_tst_mspooled",
    "m01nacri", "neu_npa_crims_rmpooled",
    "m01pqnt0", "neu_prod_quantum_rmpooled",
    "m14pmsni", "sea_prd_mspooled",
    "m14psspi", "sea_prd_sspersistent",
    "m01tsspi", "neu_tst_sspersistent",
    "m01padm0", "neu_prd_adm_rmpooled",
    "m01phcri", "neu_prd_high_crims_rmpooled",
    "m01umsni", "neu_uat_multisession",
    "m06psspg", "eus2_prd_sspersistent",
    "m01usspi", "neu_uat_sspersistent",
    "m01psspi", "neu_prd_sspersistent",
    "m01pmsni", "neu_prd_mspooled",
    "m14umsni", "sea_uat_mspooled",
    "m06usspg", "eus2_uat_sspersistent",
    "m01uqnt0", "neu_uat_quantum_rmpooled",
    "m01uadm0", "neu_uat_adm_rmpooled",
    "m01pmcri", "neu_prd_med_crims_rmpooled",
    "m01dvldt", "neu_dev_sspersistent",
    "m01nbcri", "neu_npb_crims_rmpooled",
    "m01olcri", "neu_oat_low_crims_rmpooled",
    "m01omcri", "neu_oat_med_crims_rmpooled",
    "m14usspi", "neu_uat_sspersistent",
    "m01ohcri", "neu_oat_high_crims_rmpooled"
];
Perf
| where ObjectName == "User Input Delay per Process"
| where InstanceName contains "rdpvchost.exe"
| extend SessionId = extract(@"^(\d+):", 1, InstanceName)
| extend SessionHostKey = tolower(substring(Computer, 0, 8))
| join kind=leftouter HostPoolMapping on SessionHostKey
| summarize DistinctSessionCount = dcount(SessionId) by bin(TimeGenerated, 1h), SessionHostKey, HostPoolName
| order by TimeGenerated desc
| project TimeGenerated,HostPoolName, SessionHostKey, DistinctSessionCount


https://getnerdio.com/resources/?utm_term=get+nerdio&utm_campaign=Search+-+EMEA+-+Brand&utm_source=bing&utm_medium=ppc&utm_content=EMEA+-+Brand

#description: Uninstall VMware Carbon Black EDR Sensor
#execution mode: Individual
#tags: abrdn, Apps Uninstall

<#
Notes:
This script uninstalls the VMware Carbon Black EDR Sensor by:
1. Checking for the specific registry key.
2. Executing the uninstallation command found in the registry.
3. Logging the uninstallation process.
4. Verifying the removal of the registry key after uninstallation.
#>

# Define registry path and log file
$RegistryPath = "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{D39D543C-4B68-4FB7-AD24-6B69A226E275}"
$LogFile = "C:\Windows\CarbonBlack_Uninstall.log"

# Start logging
Write-Output "Starting VMware Carbon Black EDR Sensor uninstallation process..." | Tee-Object -FilePath $LogFile -Append

# Check if the registry key exists
if (Test-Path -Path $RegistryPath) {
    Write-Output "Registry key found: $RegistryPath" | Tee-Object -FilePath $LogFile -Append

    # Retrieve the UninstallString from the registry
    try {
        $UninstallString = (Get-ItemProperty -Path $RegistryPath -Name "UninstallString").UninstallString
        Write-Output "UninstallString retrieved: $UninstallString" | Tee-Object -FilePath $LogFile -Append
    } catch {
        Write-Output "Error retrieving UninstallString: $_" | Tee-Object -FilePath $LogFile -Append
        Exit 1
    }

    # Check if UninstallString is not empty
    if (![string]::IsNullOrEmpty($UninstallString)) {
        # Execute the uninstallation command silently
        try {
            Write-Output "Executing uninstallation command..." | Tee-Object -FilePath $LogFile -Append
            $Process = Start-Process -FilePath $UninstallString -ArgumentList "/S" -NoNewWindow -Wait -PassThru -RedirectStandardOutput $LogFile -RedirectStandardError $LogFile

            # Log the process exit code
            Write-Output "Uninstaller process exit code: $($Process.ExitCode)" | Tee-Object -FilePath $LogFile -Append

            if ($Process.ExitCode -eq 0) {
                Write-Output "Uninstallation completed successfully." | Tee-Object -FilePath $LogFile -Append
            } else {
                Write-Output "Uninstallation encountered issues. Exit code: $($Process.ExitCode)" | Tee-Object -FilePath $LogFile -Append
            }
        } catch {
            Write-Output "Error during uninstallation execution: $_" | Tee-Object -FilePath $LogFile -Append
            Exit 1
        }
    } else {
        Write-Output "UninstallString is empty. Cannot proceed with uninstallation." | Tee-Object -FilePath $LogFile -Append
        Exit 1
    }

    # Verify if the registry key has been removed
    if (-not (Test-Path -Path $RegistryPath)) {
        Write-Output "Registry key successfully removed." | Tee-Object -FilePath $LogFile -Append
    } else {
        Write-Output "Registry key still exists after uninstallation." | Tee-Object -FilePath $LogFile -Append
    }
} else {
    Write-Output "Registry key not found: $RegistryPath. VMware Carbon Black EDR Sensor may not be installed." | Tee-Object -FilePath $LogFile -Append
}

Write-Output "Uninstallation process completed." | Tee-Object -FilePath $LogFile -Append

### End Script ###






Windows Registry Editor Version 5.00

[HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{D39D543C-4B68-4FB7-AD24-6B69A226E275}]
"DisplayName"="VMware Carbon Black EDR Sensor"
"UninstallString"="C:\\Windows\\CarbonBlack\\uninst.exe"
"DisplayIcon"="C:\\Windows\\CarbonBlack\\cb.exe"
"DisplayVersion"="7.4.1.18957"
"Publisher"="VMware, Inc."





#description: Uninstall Carbon Black with logging
#execution mode: Individual
#tags: abrdn, Apps Uninstall

<#
Notes:
- This script uninstalls Carbon Black and captures the process output to a log file.
- It includes error handling and checks to prevent running the uninstaller if it does not exist.
- Output is logged both to standard output and a log file.
#>

# Define paths
$CarbonBlackPath = "C:\Windows\CarbonBlack"
$Uninstaller = "$CarbonBlackPath\uninst.exe"
$LogFile = "C:\Windows\CarbonBlack_Uninstall.log"

# Start logging
Write-Output "Starting Carbon Black uninstallation process..." | Tee-Object -FilePath $LogFile -Append

# Check if the Carbon Black directory exists
if (Test-Path -Path $CarbonBlackPath) {
    Write-Output "Carbon Black directory found: $CarbonBlackPath" | Tee-Object -FilePath $LogFile -Append

    # Check if the uninstaller exists
    if (Test-Path -Path $Uninstaller) {
        Write-Output "Uninstaller found: $Uninstaller" | Tee-Object -FilePath $LogFile -Append

        try {
            # Run the uninstaller and capture output
            Write-Output "Running Carbon Black uninstaller..." | Tee-Object -FilePath $LogFile -Append
            $process = Start-Process -FilePath $Uninstaller -ArgumentList "/uninstall /S" -NoNewWindow -Wait -PassThru -RedirectStandardOutput $LogFile -RedirectStandardError $LogFile

            # Log the process exit code
            Write-Output "Uninstaller process exit code: $($process.ExitCode)" | Tee-Object -FilePath $LogFile -Append

            if ($process.ExitCode -eq 0) {
                Write-Output "Carbon Black uninstallation completed successfully." | Tee-Object -FilePath $LogFile -Append
            } else {
                Write-Output "Carbon Black uninstallation may have encountered an issue. Exit code: $($process.ExitCode)" | Tee-Object -FilePath $LogFile -Append
            }
        } catch {
            Write-Output "Error during uninstallation: $_" | Tee-Object -FilePath $LogFile -Append
            Exit 1
        }
    } else {
        Write-Output "Error: Uninstaller not found at $Uninstaller" | Tee-Object -FilePath $LogFile -Append
        Exit 1
    }
} else {
    Write-Output "Error: Carbon Black installation directory not found at $CarbonBlackPath. Exiting." | Tee-Object -FilePath $LogFile -Append
    Exit 1
}

### End Script ###





#description: Uninstall Carbon Black
#execution mode: Individual
#tags: abrdn, Apps install
cd C:\Windows\CarbonBlack
C:\Windows\CarbonBlack\uninst.exe /uninstall /S



Because RunVirtual can only be used for one local EXE and one App-V package per user this has limitations for users that require multiple plugins for the same, you would need to bundle plugins for users with the same requirements rather than package them separate.
You cant replicate App-V packages across regions in the same way as you can with app attach images so you would need a region specific entry per app in the app attach portal if attaching to hostpools in multiple regions.

https://github.com/nialljenIT365/Scripts/blob/main/Save-ZipModules.ps1
https://github.com/nialljenIT365/Scripts/blob/main/Unblock-File.ps1

NMW-hybridworker-vm
https://nmehelp.getnerdio.com/hc/en-us/articles/26124302308109-Scripted-Actions-for-Azure-Runbooks#Install
nmw-app-kv-

function Save-ZipModules {
    param(
        [array]$Modules = @(), # Array of hashtables or a single hashtable, e.g., @{Name="Module1"; Version="1.0.0"} or @(@{Name="Module1"; Version="1.0.0"})
        [string]$DestinationPath,
        [switch]$DeleteExistingContents
    )

    # Normalize input: If a single hashtable is provided, wrap it in an array
    if ($Modules -isnot [array]) {
        $Modules = @($Modules)
    }

    # Append "\Modules" to the DestinationPath
    $ModulesPath = Join-Path -Path $DestinationPath -ChildPath "Modules"

    # Check if the optional switch is set to delete existing contents
    if ($DeleteExistingContents) {
        if (Test-Path -Path $ModulesPath) {
            # Clear out the existing contents (folders and subfolders)
            Remove-Item -Path $ModulesPath -Recurse -Force
        }
    }

    # Validate that DestinationPath exists, if it does not, create it
    if (-not (Test-Path -Path $ModulesPath)) {
        New-Item -ItemType Directory -Path $ModulesPath | Out-Null
    }

    # Iterate over each module in the Modules array
    foreach ($module in $Modules) {
        $ModuleName = $module.Name
        $ModuleVersion = $module.Version

        # Validate the module exists; if it does, continue
        $foundModule = Find-Module -Name $ModuleName -RequiredVersion $ModuleVersion
        if (-not $foundModule) {
            Write-Error "Module $ModuleName version $ModuleVersion not found in repository."
            continue
        }

        # Save the module to the DestinationPath
        Save-Module -Name $ModuleName -RequiredVersion $ModuleVersion -Path $ModulesPath
    }

    # Create a Zip file of the folders in the DestinationPath\Modules path
    $ZipFilePath = Join-Path -Path $DestinationPath -ChildPath "Modules.zip"
    Compress-Archive -Path (Join-Path -Path $ModulesPath -ChildPath "*") -DestinationPath $ZipFilePath -Force

    Write-Host "Modules have been saved to $ModulesPath and zipped to $ZipFilePath."
}

# Example script to call the function with different inputs

# Single module input
#$Module1 = @{Name="Az.Resources"; Version="6.5.3"}
#Save-ZipModules -Modules $Module1 -DestinationPath "C:\MyModules" -DeleteExistingContents

# Multiple modules input
$Modules = @(
    @{Name="Az.Resources"; Version="6.5.3"},
    @{Name="Az.Compute"; Version="5.6.0"},
    @{Name="Az.Accounts"; Version="2.12.1"},
    @{Name="Az.KeyVault"; Version="4.9.2"},
    @{Name="Az.DesktopVirtualization"; Version="3.1.1"},
    @{Name="Az.Avd"; Version="3.1.0"}
)
Save-ZipModules -Modules $Modules -DestinationPath "C:\MyModules"

Get-ChildItem -Path "C:\Program Files\WindowsPowerShell\Modules\Az.Resources" -Recurse | Unblock-File
Get-ChildItem -Path "C:\Program Files\WindowsPowerShell\Modules\Az.Compute" -Recurse | Unblock-File
Get-ChildItem -Path "C:\Program Files\WindowsPowerShell\Modules\Az.KeyVault" -Recurse | Unblock-File
Get-ChildItem -Path "C:\Program Files\WindowsPowerShell\Modules\Az.Accounts" -Recurse | Unblock-File
Get-ChildItem -Path "C:\Program Files\WindowsPowerShell\Modules\Az.DesktopVirtualization" -Recurse | Unblock-File
Get-ChildItem -Path "C:\Program Files\WindowsPowerShell\Modules\Az.Avd" -Recurse | Unblock-File





curl --head -k -w %{certs} https://management.azure.com

nameresolver management.azure.com 1.1.1.1


##Change Me##
$HostPoolName = "NEU_PRD_SSPersistent"
$HostPoolResourceGroup = "rg-EUS-RemoteDesktopDevices-WorkspaceAndStorage-NEU-PRD"
$SessionHostResourceGroup = "rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD"
$PreStageTag = "ABRDN_AUTOSCALE_PRESTAGE"
##Change Me##

# Initialise $VMsForAutoscale as null and then an empty array
$VMsForAutoscale = $null
$VMsForAutoscale = @()

# Get session hosts and extract only the name before the first "."
$SessionHosts = Get-AzWvdSessionHost -ResourceGroupName $HostPoolResourceGroup -HostPoolName $HostPoolName |
    Select-Object -ExpandProperty Name | ForEach-Object { ($_ -split "/")[-1] -split "\." | Select-Object -First 1 }

foreach ($SessionHost in $SessionHosts) {
    # Retrieve VM details and extract the Resource ID
    $vm = Get-AzVM -ResourceGroupName $SessionHostResourceGroup -Name $SessionHost -Status -ErrorAction SilentlyContinue
    if ($vm) {
        $VMResourceId = $vm.Id
        $VMStatus = $vm.Statuses | Where-Object { $_.Code -like "PowerState/*" } | Select-Object -ExpandProperty DisplayStatus

        # Retrieve the tags from the VM
        $VMTags = (Get-AzResource -ResourceId $VMResourceId).Tags.Keys

        # Check if the PreStageTag exists in the list of VM tags
        if ($VMTags -contains $PreStageTag) {
            Get-Date -Format "dddd MM/dd/yyyy HH:mm K"
            Write-Output "$PreStageTag exists on $SessionHost, proceed with Autoscale"

            # Only add to autoscale list if not already running
            if ($VMStatus -ne "VM running") {
                $VMsForAutoscale += $SessionHost
            } else {
                Write-Output "$SessionHost is already running, skipping start operation."
            }
        } else {
            Get-Date -Format "dddd MM/dd/yyyy HH:mm K"
            Write-Output "$PreStageTag does not exist on $SessionHost, do not proceed with Autoscale"
        }
    } else {
        Write-Output "VM $SessionHost not found in $SessionHostResourceGroup"
    }
}

# Execute Start-AzVM in parallel using Start-Job
$JobList = @()

foreach ($VMName in $VMsForAutoscale) {
    Write-Output "$VMName will be autoscaled"
    $Job = Start-Job -ScriptBlock {
        param ($VMName, $SessionHostResourceGroup)
        Start-AzVM -ResourceGroupName $SessionHostResourceGroup -Name $VMName -Force -NoWait
    } -ArgumentList $VMName, $SessionHostResourceGroup

    $JobList += $Job
}

# Optionally, wait for all jobs to complete before continuing
Write-Output "Waiting for all Start-AzVM jobs to complete..."
Get-Date -Format "dddd MM/dd/yyyy HH:mm K"
$JobList | Wait-Job | Out-Null
Write-Output "All VMs that needed to be started have been started."
Get-Date -Format "dddd MM/dd/yyyy HH:mm K"

# Clean up completed jobs
$JobList | Remove-Job




System.Management.Automation.RuntimeException: Method invocation failed because [System.Management.Automation.PSRemotingJob] does not contain a method named 'op_Addition'.
   at System.Management.Automation.ParserOps.CallMethod(IScriptExtent errorPosition, Object target, String methodName, PSMethodInvocationConstraints invocationConstraints, Object[] paramArray, Boolean callStatic, Object valueToSet)
   at System.Management.Automation.ParserOps.ImplicitOp(Object lval, Object rval, String op, IScriptExtent errorPosition, String errorOp)
   at System.Dynamic.UpdateDelegates.UpdateAndExecute2[T0,T1,TRet](CallSite site, T0 arg0, T1 arg1)
   at System.Dynamic.UpdateDelegates.UpdateAndExecute2[T0,T1,TRet](CallSite site, T0 arg0, T1 arg1)
   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)
   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)
System.Management.Automation.RuntimeException: Method invocation failed because [System.Management.Automation.PSRemotingJob] does not contain a method named 'op_Addition'.
   at System.Management.Automation.ParserOps.CallMethod(IScriptExtent errorPosition, Object target, String methodName, PSMethodInvocationConstraints invocationConstraints, Object[] paramArray, Boolean callStatic, Object valueToSet)
   at System.Management.Automation.ParserOps.ImplicitOp(Object lval, Object rval, String op, IScriptExtent errorPosition, String errorOp)
   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)
   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)
System.Management.Automation.RuntimeException: Method invocation failed because [System.Management.Automation.PSRemotingJob] does not contain a method named 'op_Addition'.
   at System.Management.Automation.ParserOps.CallMethod(IScriptExtent errorPosition, Object target, String methodName, PSMethodInvocationConstraints invocationConstraints, Object[] paramArray, Boolean callStatic, Object valueToSet)
   at System.Management.Automation.ParserOps.ImplicitOp(Object lval, Object rval, String op, IScriptExtent errorPosition, String errorOp)
   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)
   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)
System.Management.Automation.RuntimeException: Method invocation failed because [System.Management.Automation.PSRemotingJob] does not contain a method named 'op_Addition'.
   at System.Management.Automation.ParserOps.CallMethod(IScriptExtent errorPosition, Object target, String methodName, PSMethodInvocationConstraints invocationConstraints, Object[] paramArray, Boolean callStatic, Object valueToSet)
   at System.Management.Automation.ParserOps.ImplicitOp(Object lval, Object rval, String op, IScriptExtent errorPosition, String errorOp)
   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)
   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)
System.Management.Automation.RuntimeException: Method invocation failed because [System.Management.Automation.PSRemotingJob] does not contain a method named 'op_Addition'.
   at System.Management.Automation.ParserOps.CallMethod(IScriptExtent errorPosition, Object target, String methodName, PSMethodInvocationConstraints invocationConstraints, Object[] paramArray, Boolean callStatic, Object valueToSet)
   at System.Management.Automation.ParserOps.ImplicitOp(Object lval, Object rval, String op, IScriptExtent errorPosition, String errorOp)
   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)
   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)
System.Management.Automation.RuntimeException: Method invocation failed because [System.Management.Automation.PSRemotingJob] does not contain a method named 'op_Addition'.
   at System.Management.Automation.ParserOps.CallMethod(IScriptExtent errorPosition, Object target, String methodName, PSMethodInvocationConstraints invocationConstraints, Object[] paramArray, Boolean callStatic, Object valueToSet)
   at System.Management.Automation.ParserOps.ImplicitOp(Object lval, Object rval, String op, IScriptExtent errorPosition, String errorOp)
   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)
   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)
System.Management.Automation.RuntimeException: Method invocation failed because [System.Management.Automation.PSRemotingJob] does not contain a method named 'op_Addition'.
   at System.Management.Automation.ParserOps.CallMethod(IScriptExtent errorPosition, Object target, String methodName, PSMethodInvocationConstraints invocationConstraints, Object[] paramArray, Boolean callStatic, Object valueToSet)
   at System.Management.Automation.ParserOps.ImplicitOp(Object lval, Object rval, String op, IScriptExtent errorPosition, String errorOp)
   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)
   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)
System.Management.Automation.RuntimeException: Method invocation failed because [System.Management.Automation.PSRemotingJob] does not contain a method named 'op_Addition'.
   at System.Management.Automation.ParserOps.CallMethod(IScriptExtent errorPosition, Object target, String methodName, PSMethodInvocationConstraints invocationConstraints, Object[] paramArray, Boolean callStatic, Object valueToSet)
   at System.Management.Automation.ParserOps.ImplicitOp(Object lval, Object rval, String op, IScriptExtent errorPosition, String errorOp)
   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)
   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)
System.Management.Automation.RuntimeException: Method invocation failed because [System.Management.Automation.PSRemotingJob] does not contain a method named 'op_Addition'.
   at System.Management.Automation.ParserOps.CallMethod(IScriptExtent errorPosition, Object target, String methodName, PSMethodInvocationConstraints invocationConstraints, Object[] paramArray, Boolean callStatic, Object valueToSet)
   at System.Management.Automation.ParserOps.ImplicitOp(Object lval, Object rval, String op, IScriptExtent errorPosition, String errorOp)
   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)
   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)
System.Management.Automation.RuntimeException: Method invocation failed because [System.Management.Automation.PSRemotingJob] does not contain a method named 'op_Addition'.
   at System.Management.Automation.ParserOps.CallMethod(IScriptExtent errorPosition, Object target, String methodName, PSMethodInvocationConstraints invocationConstraints, Object[] paramArray, Boolean callStatic, Object valueToSet)
   at System.Management.Automation.ParserOps.ImplicitOp(Object lval, Object rval, String op, IScriptExtent errorPosition, String errorOp)
   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)
   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)
System.Management.Automation.RuntimeException: Method invocation failed because [System.Management.Automation.PSRemotingJob] does not contain a method named 'op_Addition'.
   at System.Management.Automation.ParserOps.CallMethod(IScriptExtent errorPosition, Object target, String methodName, PSMethodInvocationConstraints invocationConstraints, Object[] paramArray, Boolean callStatic, Object valueToSet)
   at System.Management.Automation.ParserOps.ImplicitOp(Object lval, Object rval, String op, IScriptExtent errorPosition, String errorOp)
   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)
   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)












Start-AzVM -ResourceGroupName $SessionHostResourceGroup -Name $VMName -Force -NoWait


##Change Me##
$HostPoolName = "NEU_PRD_SSPersistent"
$HostPoolResourceGroup = "rg-EUS-RemoteDesktopDevices-WorkspaceAndStorage-NEU-PRD"
$SessionHostResourceGroup = "rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD"
$PreStageTag = "ABRDN_AUTOSCALE_PRESTAGE"
##Change Me##

# Initialise $VMsForAutoscale as null and then an empty array
$VMsForAutoscale = $null
$VMsForAutoscale = @()

# Get session hosts and extract only the name before the first "."
$SessionHosts = Get-AzWvdSessionHost -ResourceGroupName $HostPoolResourceGroup -HostPoolName $HostPoolName |
    Select-Object -ExpandProperty Name | ForEach-Object { ($_ -split "/")[-1] -split "\." | Select-Object -First 1 }

foreach ($SessionHost in $SessionHosts) {
    # Retrieve VM details and extract the Resource ID
    $vm = Get-AzVM -ResourceGroupName $SessionHostResourceGroup -Name $SessionHost -ErrorAction SilentlyContinue
    if ($vm) {
        $VMResourceId = $vm.Id

        # Retrieve the tags from the VM
        $VMTags = (Get-AzResource -ResourceId $VMResourceId).Tags.Keys

        # Check if the PreStageTag exists in the list of VM tags
        if ($VMTags -contains $PreStageTag) {
            Get-Date -Format "dddd MM/dd/yyyy HH:mm K"
            Write-Output "$PreStageTag exists on $SessionHost, proceed with Autoscale"
            
            # Add the session host to the list for autoscale
            $VMsForAutoscale += $SessionHost
        } else {
            Get-Date -Format "dddd MM/dd/yyyy HH:mm K"
            Write-Output "$PreStageTag does not exist on $SessionHost, do not proceed with Autoscale"
        }
    } else {
        Write-Output "VM $SessionHost not found in $SessionHostResourceGroup"
    }
}

foreach ($VMName in $VMsForAutoscale) {
    $Job = Start-Job -ScriptBlock {
        param ($VMName, $SessionHostResourceGroup)
        Start-AzVM -ResourceGroupName $SessionHostResourceGroup -Name $VMName -Force -NoWait
    } -ArgumentList $VMName, $SessionHostResourceGroup#

    $JobList += $Job
}

Write-Output "Waiting for all Start-AzVM jobs to complete..."
Get-Date -Format "dddd MM/dd/yyyy HH:mm K"
$JobList | Wait-Job | Out-Null
Write-Output "All VMs have been started."
Get-Date -Format "dddd MM/dd/yyyy HH:mm K"







##Change Me##
$HostPoolName = "NEU_PRD_SSPersistent"
$HostPoolResourceGroup = "rg-EUS-RemoteDesktopDevices-WorkspaceAndStorage-NEU-PRD"
$SessionHostResourceGroup = "rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD"
$PreStageTag = "ABRDN_AUTOSCALE_PRESTAGE"
##Change Me##

# Get session hosts and extract only the name before the first "."
$SessionHosts = Get-AzWvdSessionHost -ResourceGroupName $HostPoolResourceGroup -HostPoolName $HostPoolName |
    Select-Object -ExpandProperty Name | ForEach-Object { ($_ -split "/")[-1] -split "\." | Select-Object -First 1 }

foreach ($SessionHost in $SessionHosts) {
    # Retrieve VM details and extract the Resource ID
    $vm = Get-AzVM -ResourceGroupName $SessionHostResourceGroup -Name $SessionHost -ErrorAction SilentlyContinue
    if ($vm) {
        $VMResourceId = $vm.Id

        # Retrieve the tags from the VM
        $VMTags = (Get-AzResource -ResourceId $VMResourceId).Tags.Keys

        # Check if the PreStageTag exists in the list of VM tags
        if ($VMTags -contains $PreStageTag) {
            Get-Date -Format "dddd MM/dd/yyyy HH:mm K"
            Write-Output "$PreStageTag exists on $SessionHost, proceed with Autoscale"
        } else {
            Get-Date -Format "dddd MM/dd/yyyy HH:mm K"
            Write-Output "$PreStageTag does not exist on $SessionHost, do not proceed with Autoscale"
        }
    } else {
        Write-Output "VM $SessionHost not found in $SessionHostResourceGroup"
    }
}

I want to store all the $SessionHost values that -contains $PreStageTag in list called $VMsForAutoscale that can be called once forloop finishes





##Change Me##
$HostPoolName = "NEU_PRD_SSPersistent"
$HostPoolResourceGroup = "rg-EUS-RemoteDesktopDevices-WorkspaceAndStorage-NEU-PRD"
$SessionHostResourceGroup = "rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD"
$PreStageTag = "ABRDN_AUTOSCALE_PRESTAGE"
##Change Me##

$SessionHosts = Get-AzWvdSessionHost -ResourceGroupName ResourceGroupName -HostPoolName HostPoolName | Select-Object @{Name="SessionHostName";Expression={($_.Name -split "/")[-1] -split "\.")[0]}}

foreach ($SessionHost in $SessionHosts) {
# Retrieve VM details and extract the Resource ID
$vm = Get-AzVM -ResourceGroupName $SessionHostResourceGroup -Name $SessionHost
$VMResourceId = $vm.Id
# Retrieve the tags from the VM
$VMTags = (Get-AzResource -ResourceId $VMResourceId).Tags.Keys
# Check if the PreStageTag exists in the list of VM tags
if ($VMTags -contains $PreStageTag) {
    Write-Output "$PreStageTag exists on $SessionHost, proceed with Autoscale"
} else {
    Write-Output "$PreStageTag does not exist on $SessionHost, do not proceed with Autoscale"
}
}


System.Management.Automation.ParseException: At C:\Windows\TEMP\8277ad75-166b-47a7-8b40-2f8b09d5f64e.ps1:62 char:154
+ ... oolName | Select-Object @{Name="SessionHostName";Expression={($_.Name ...
+                                                                 ~
Missing closing '}' in statement block or type definition.

At C:\Windows\TEMP\8277ad75-166b-47a7-8b40-2f8b09d5f64e.ps1:62 char:191
+ ... ssionHostName";Expression={($_.Name -split "/")[-1] -split "\.")[0]}}
+                                                                    ~
The hash literal was incomplete.

At C:\Windows\TEMP\8277ad75-166b-47a7-8b40-2f8b09d5f64e.ps1:62 char:191
+ ... ssionHostName";Expression={($_.Name -split "/")[-1] -split "\.")[0]}}
+                                                                    ~
Unexpected token ')' in expression or statement.

At C:\Windows\TEMP\8277ad75-166b-47a7-8b40-2f8b09d5f64e.ps1:62 char:193
+ ... ssionHostName";Expression={($_.Name -split "/")[-1] -split "\.")[0]}}
+                                                                      ~
Missing type name after '['.

At C:\Windows\TEMP\8277ad75-166b-47a7-8b40-2f8b09d5f64e.ps1:62 char:195
+ ... ssionHostName";Expression={($_.Name -split "/")[-1] -split "\.")[0]}}
+                                                                        ~
Unexpected token '}' in expression or statement.

At C:\Windows\TEMP\8277ad75-166b-47a7-8b40-2f8b09d5f64e.ps1:62 char:196
+ ... ssionHostName";Expression={($_.Name -split "/")[-1] -split "\.")[0]}}
+                                                                         ~
Unexpected token '}' in expression or statement.
   at System.Management.Automation.ScriptBlock.Create(Parser parser, String fileName, String fileContents)
   at System.Management.Automation.ExternalScriptInfo.ParseScriptContents(Parser parser, String fileName, String fileContents, Nullable`1 definingLanguageMode)
   at System.Management.Automation.ExternalScriptInfo.get_ScriptBlock()
   at System.Management.Automation.CommandDiscovery.CreateCommandProcessorForScript(ExternalScriptInfo scriptInfo, ExecutionContext context, Boolean useNewScope, SessionStateInternal sessionState)
   at System.Management.Automation.CommandDiscovery.CreateScriptProcessorForSingleShell(ExternalScriptInfo scriptInfo, ExecutionContext context, Boolean useLocalScope, SessionStateInternal sessionState)
   at System.Management.Automation.CommandDiscovery.LookupCommandProcessor(CommandInfo commandInfo, CommandOrigin commandOrigin, Nullable`1 useLocalScope, SessionStateInternal sessionState)
   at System.Management.Automation.CommandDiscovery.LookupCommandProcessor(String commandName, CommandOrigin commandOrigin, Nullable`1 useLocalScope)
   at System.Management.Automation.ExecutionContext.CreateCommand(String command, Boolean dotSource)
   at System.Management.Automation.PipelineOps.AddCommand(PipelineProcessor pipe, CommandParameterInternal[] commandElements, CommandBaseAst commandBaseAst, CommandRedirection[] redirections, ExecutionContext context)
   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)
   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)
   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)




Get-AzWvdSessionHost -ResourceGroupName ResourceGroupName -HostPoolName HostPoolName | Select-Object @{Name="SessionHostName";Expression={($_.Name -split "/")[-1] -split "\.")[0]}}

Get-AzWvdSessionHost -ResourceGroupName ResourceGroupName -HostPoolName HostPoolName | Select-Object @{Name="SessionHostName";Expression={($_.Name -split "/")[-1]}}
Name               : NEU_PRD_SSPersistent/M01PSSPI0001.aberdeen.aberdeen-asset.com


Get-AzWvdSessionHost -ResourceGroupName ResourceGroupName -HostPoolName HostPoolName

Name                                               Type
----                                               ----
HostPoolName/SessionHostName1 Microsoft.DesktopVirtualization/hostpools/sessionhosts
HostPoolName/SessionHostName2 Microsoft.DesktopVirtualization/hostpools/sessionhosts



Start-AzVM -ResourceGroupName "ResourceGroup11" -Name "VirtualMachine07" -NoWait




##Change Me##
$PreStageTag = "ABRDN_AUTOSCALE_PRESTAGE"
##Change Me##

# Retrieve VM details and extract the Resource ID
$vm = Get-AzVM -ResourceGroupName $AzureResourceGroupName -Name $AzureVMName
$VMResourceId = $vm.Id

Write-Output "VM Resource ID is: $VMResourceId"

# Retrieve the tags from the VM
$VMTags = (Get-AzResource -ResourceId $VMResourceId).Tags.Keys

# Output all existing tags
foreach ($VMTag in $VMTags) {
   Write-Output "VM Tag is: $VMTag"
}

# Check if the PreStageTag exists in the list of VM tags
if ($VMTags -contains $PreStageTag) {
    Write-Output "$PreStageTag exists, proceed with Autoscale"
} else {
    Write-Output "$PreStageTag does not exist, stopping process"
}





##Change Me##
$PreStageTag = "ABRDN_AUTOSCALE_PRESTAGE"
##Change Me##

# Retrieve VM details and extract the Resource ID
$vm = Get-AzVM -ResourceGroupName $AzureResourceGroupName -Name $AzureVMName
$VMResourceId = $vm.Id

Write-Output "VM Resource ID is: $VMResourceId"

$VMTags = (Get-AzResource -ResourceId $VMResourceId).Tags.Keys

foreach ($VMTag in $VMTags) {
   Write-Output "VM Tag is: $VMTag"
}
I want to check if any of the values in $VMTags is equal to $PreStageTag 




System.Management.Automation.ParameterBindingException: Parameter set cannot be resolved using the specified named parameters.
   at System.Management.Automation.CmdletParameterBinderController.ThrowAmbiguousParameterSetException(UInt32 parameterSetFlags, MergedCommandParameterMetadata bindableParameters)
   at System.Management.Automation.CmdletParameterBinderController.ValidateParameterSets(Boolean prePipelineInput, Boolean setDefault)
   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParametersNoValidation(Collection`1 arguments)
   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParameters(Collection`1 arguments)
   at System.Management.Automation.CommandProcessor.BindCommandLineParameters()
   at System.Management.Automation.CommandProcessor.Prepare(IDictionary psDefaultParameterValues)
   at System.Management.Automation.CommandProcessorBase.DoPrepare(IDictionary psDefaultParameterValues)
   at System.Management.Automation.Internal.PipelineProcessor.Start(Boolean incomingStream)
   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)
   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)
   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)
   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)
   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)



##Change Me##
$tags = @{"ABRDN_AUTOSCALE_PRESTAGE" = "TRUE"}
##Change Me##

# Retrieve VM details and extract the Resource ID
$vm = Get-AzVM -ResourceGroupName $AzureResourceGroupName -Name $AzureVMName
$VMResourceId = $vm.Id

Write-Output "VM Resource ID is: $VMResourceId"

# Get the existing tags on the VM
$currentTagObject = Get-AzTag -ResourceId $VMResourceId -Detailed
$currentTags = $currentTagObject.Properties.Tags

# Display current tags for debugging
Write-Output "Current tags: $($currentTags | ConvertTo-Json -Depth 10)"

# Check if the specific tag exists
if ($currentTags -and $currentTags.ContainsKey("ABRDN_AUTOSCALE_PRESTAGE")) {
    Write-Output "ABRDN_AUTOSCALE_PRESTAGE exists, proceed with Autoscale"
} else {
    Write-Output "Tag does not exist, stopping process."
    exit
}



##Change Me##
$tags = @{"ABRDN_AUTOSCALE_PRESTAGE" = "TRUE"}
##Change Me##

# Retrieve VM details and extract the Resource ID
$vm = Get-AzVM -ResourceGroupName $AzureResourceGroupName -Name $AzureVMName
$VMResourceId = $vm.Id

Write-Output "VM Resource ID is: $VMResourceId"

# Get the existing tags on the VM
$currentTags = Get-AzTag -ResourceId $VMResourceId

Write-Output "Current tags are: $currentTags"

returns

VM Resource ID is: /subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourceGroups/rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD/providers/Microsoft.Compute/virtualMachines/M01PSSPI0101

Current tags are: Microsoft.Azure.Commands.Tags.Model.PSTagResource






##Change Me##
$tags = @{"ABRDN_AUTOSCALE_PRESTAGE" = "TRUE"}
##Change Me##

# Retrieve VM details and extract the Resource ID
$vm = Get-AzVM -ResourceGroupName $AzureResourceGroupName -Name $AzureVMName
$VMResourceId = $vm.Id

Write-Output "VM Resource ID is: $VMResourceId"

# Get the existing tags on the VM
$currentTags = (Get-AzTag -ResourceId $VMResourceId -Detailed).Properties.Tags

# Check if the tag exists
if ($currentTags -and $currentTags.ContainsKey("ABRDN_AUTOSCALE_PRESTAGE")) {
    Write-Output "ABRDN_AUTOSCALE_PRESTAGE exists, proceed with Autoscale"
} else {
    Write-Output "Tag does not exist, stopping process."
    exit
}






##Change Me##
$tags = @{"ABRDN_AUTOSCALE_PRESTAGE" = "TRUE"}
##Change Me##

# Retrieve VM details and extract the Resource ID
$vm = Get-AzVM -ResourceGroupName $AzureResourceGroupName -Name $AzureVMName
$VMResourceId = $vm.Id

Write-Output "VM Resource ID is: $VMResourceId"

# Get existing tags on the VM
$currentTags = (Get-AzTag -ResourceId $VMResourceId).Properties.Tags

# Check if the tag exists
if ($currentTags -and $currentTags.ContainsKey("ABRDN_AUTOSCALE_PRESTAGE")) {
    Write-Output "ABRDN_AUTOSCALE_PRESTAGE exists, proceed with Autoscale"
} else {
    Write-Output "Tag does not exist, stopping process."
    exit
}

# Update the tag on the VM
Update-AzTag -ResourceId $VMResourceId -Tag $tags -Operation Merge




##Change Me##
$tags = @{"ABRDN_AUTOSCALE_PRESTAGE" = "TRUE"}
##Change Me##

# Retrieve VM details and extract the Resource ID
$vm = Get-AzVM -ResourceGroupName $AzureResourceGroupName -Name $AzureVMName
$VMResourceId = $vm.Id

Write-Output "VM Resource ID is: $VMResourceId"

# Update the tag on the VM
Update-AzTag -ResourceId $VMResourceId -Tag $tags -Operation Merge



##Change Me##
$tags = @{"ABRDN_AUTOSCALE_PRESTAGE" = "TRUE"}
##Change Me##
$VMResourceId = Get-AzVM -ResourceGroupName $AzureResourceGroupName -Name $AzureVMName
Write-Output "VMResourceId is $VMResourceId"
#Update-AzTag -ResourceId $VMResourceId -Tag $tags -Operation Merge


#description: HostPool Migration Part 3 of 3 (Run Book)
#Note: Deletes Entry from current HostPool and updates Nerdio Tag to associate with target host pool
#execution mode: Combined
######CHANGE ME############
#Note: Modify to match current and target pool locations
$currentHostpoolResourceGroup = "rg-EUS-RemoteDesktopDevices-WorkspaceAndStorage-NEU-PRD"
$suffix = ".aberdeen.aberdeen-asset.com"
$targetHostpoolResourceGroup = "rg-EUS-RemoteDesktopDevices-WorkspaceAndStorage-NEU-PRD"
$targetHostpoolName = "NEU_PRD_SSPersistent_WO"
######CHANGE ME############
$targetNMW_ARM_HOST_POOLvalue = "01f03a19-5500-482a-b480-3bb664e0ebc2/$targetHostpoolResourceGroup/$HostPoolName"
$VMNameShort = "M01TSSPI0023"
$VMFullName = "M01TSSPI0023.aberdeen.aberdeen-asset.com"
$VMResourceId = (Get-AzVM -name M01TSSPI0023).Id

$VMResourceId

#Remove-AzWvdSessionHost -HostPoolName $HostPoolName -ResourceGroupName $currentHostpoolResourceGroup -Name $VMFullName -Force
#Start-Sleep -Seconds 30
$tags = @{"NMW_ARM_HOST_POOL" = $targetNMW_ARM_HOST_POOLvalue}
Update-AzTag -ResourceId $VMResourceId -Tag $tags -Operation Replace





$tags = @{"Project"="ECommerce"; "CostCenter"="00123"; "Team"="Web"}
$resource = Get-AzResource -Name demostorage -ResourceGroup demoGroup
Update-AzTag -ResourceId $resource.id -Tag $tags -Operation Replace

Get-AzTag -ResourceId /subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourcegroups/testrg/providers/Microsoft.Sql/servers/Server1

Id         : {Id}
Name       : {Name}
Type       : {Type}
Properties :
             Name     Value
             =======  =========
             Dept     Finance
             Status   Normal

At C:\Windows\TEMP\9af1bb79-fb73-4264-b393-0e2acf91fe77.ps1:69 char:79
+ ... AzureVMName -ResourceGroupName $AzureResourceGroupName).tags.["NMW_AR ...
+                                                                  ~
Missing property name after reference operator.
   at System.Management.Automation.ScriptBlock.Create(Parser parser, String fileName, String fileContents)
   at System.Management.Automation.ExternalScriptInfo.ParseScriptContents(Parser parser, String fileName, String fileContents, Nullable`1 definingLanguageMode)
   at System.Management.Automation.ExternalScriptInfo.get_ScriptBlock()
   at System.Management.Automation.CommandDiscovery.CreateCommandProcessorForScript(ExternalScriptInfo scriptInfo, ExecutionContext context, Boolean useNewScope, SessionStateInternal sessionState)
   at System.Management.Automation.CommandDiscovery.CreateScriptProcessorForSingleShell(ExternalScriptInfo scriptInfo, ExecutionContext context, Boolean useLocalScope, SessionStateInternal sessionState)
   at System.Management.Automation.CommandDiscovery.LookupCommandProcessor(CommandInfo commandInfo, CommandOrigin commandOrigin, Nullable`1 useLocalScope, SessionStateInternal sessionState)
   at System.Management.Automation.CommandDiscovery.LookupCommandProcessor(String commandName, CommandOrigin commandOrigin, Nullable`1 useLocalScope)
   at System.Management.Automation.ExecutionContext.CreateCommand(String command, Boolean dotSource)
   at System.Management.Automation.PipelineOps.AddCommand(PipelineProcessor pipe, CommandParameterInternal[] commandElements, CommandBaseAst commandBaseAst, CommandRedirection[] redirections, ExecutionContext context)
   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)
   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)
   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)

# Retrieve the tag value for NMW_ARM_HOST_POOL
$tagValue = $vm.Tags["NMW_ARM_HOST_POOL"]

# Display the value
Write-Output "NMW_ARM_HOST_POOL Tag Value: $tagValue"


NMW_ARM_HOST_POOL

$vmName = "YourVMName"
$resourceGroup = "YourResourceGroup"

$vm = Get-AzVM -Name $vmName -ResourceGroupName $resourceGroup
$vm.Tags





(Get-LocalUser | Where-Object { $_.SID -match '-500$' }).Name


(Get-WMIObject Win32_UserAccount -Filter "SID LIKE 'S-1-5-21-%-500'").Name


& "C:\Program Files\PowerShell\7\pwsh.exe" -NoProfile -Command "Connect-Avd -DeviceCode -TenantID 27b2553d-4a89-4c74-88e1-d1d590624294 -SubscriptionId 01f03a19-5500-482a-b480-3bb664e0ebc2"

& "C:\Program Files\PowerShell\7\pwsh.exe" -NoProfile -Command "Get-AvdSessionHost -HostpoolName NEU_TST_SSPersistent -ResourceGroupName RemoteDesktopDevices-EMEA-NEU-PRD"



& pwsh.exe -NoProfile -Command "Connect-Avd -DeviceCode -TenantID 27b2553d-4a89-4c74-88e1-d1d590624294 -SubscriptionId 58cb357e-51af-4f62-8982-a8c2b9059362"


# Define PowerShell 7 script block
$PS7Script = @"
Connect-Avd -DeviceCode -TenantID 27b2553d-4a89-4c74-88e1-d1d590624294 -SubscriptionId 58cb357e-51af-4f62-8982-a8c2b9059362
"@

# Run the PowerShell 7 script block from PowerShell 5.1
Start-Process -FilePath "pwsh.exe" -ArgumentList "-NoProfile -Command `"$PS7Script`"" -NoNewWindow -Wait



Connect-Avd -DeviceCode -TenantID 27b2553d-4a89-4c74-88e1-d1d590624294 -SubscriptionId 58cb357e-51af-4f62-8982-a8c2b9059362

Connect-Avd -DeviceCode -TenantID 27b2553d-4a89-4c74-88e1-d1d590624294 -SubscriptionId 58cb357e-51af-4f62-8982-a8c2b9059362

function GetAuthToken($resource) {
    $context = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile.DefaultContext
    $Token = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($context.Account, $context.Environment, $context.Tenant.Id.ToString(), $null, [Microsoft.Azure.Commands.Common.Authentication.ShowDialog]::Never, $null, $resource).AccessToken
    return @{ 'Content-Type' = 'application/json'; Authorization  = 'Bearer ' + $Token }
}

# Get Azure authentication token
$token = GetAuthToken -resource "https://management.azure.com"

# Define VM parameters
$vmName = "M01TSSPI0024"
$suffix = ".aberdeen.aberdeen-asset.com"
$vmResourceId = (Get-AzVM -Name "$vmName$suffix").Id

# Construct API URL for getting VM instance view (status check)
$url = "https://management.azure.com$vmResourceId/instanceView?api-version=2021-03-01"

# Define API request parameters
$parameters = @{
    URI     = $url 
    Method  = "GET"
    Headers = $token
}

# Make the API request
$response = Invoke-RestMethod @parameters

# Display the VM status information
$response.statuses






function GetAuthToken($resource) {
    $context = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile.DefaultContext
    $Token = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($context.Account, $context.Environment, $context.Tenant.Id.ToString(), $null, [Microsoft.Azure.Commands.Common.Authentication.ShowDialog]::Never, $null, $resource).AccessToken
    return @{ 'Content-Type' = 'application/json'; Authorization  = 'Bearer ' + $Token }
}

# Get Azure authentication token
$token = GetAuthToken -resource "https://management.azure.com"

# Define VM parameters
$vmName = "M01TSSPI0024"
$suffix = ".aberdeen.aberdeen-asset.com"
$vmResourceId = (Get-AzVM -Name "$vmName$suffix").Id

# Construct API URL for getting VM instance view (status check)
$url = "https://management.azure.com$vmResourceId/instanceView?api-version=2021-03-01"

# Define API request parameters
$parameters = @{
    URI     = $url 
    Method  = "GET"
    Headers = $token
}

# Make the API request
$response = Invoke-RestMethod @parameters

# Display the VM status information
$response.statuses





function GetAuthToken($resource) {
    $context = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile.DefaultContext
    $Token = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($context.Account, $context.Environment, $context.Tenant.Id.ToString(), $null, [Microsoft.Azure.Commands.Common.Authentication.ShowDialog]::Never, $null, $resource).AccessToken
    return @{ 'Content-Type' = 'application/json'; Authorization  = 'Bearer ' + $Token }
}
$token = GetAuthToken -resource "https://management.azure.com"

$vmName = "M01TSSPI0024"
$suffix = ".aberdeen.aberdeen-asset.com"
$vmResourceId = (Get-AzVM -Name "$vmName$suffix").Id

$script = [System.Collections.ArrayList]@()
$script.Add('Set-ItemProperty -Path Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\RDInfraAgent -Name APITest -Value 0')

$MoveBody = @{
    commandId = "RunPowerShellScript"
    script    = $script
}
$MoveBodyJson = $MoveBody | ConvertTo-Json -Depth 10

$url = "https://management.azure.com$vmResourceId/providers/Microsoft.Compute/virtualMachines/runCommand?api-version=2021-03-01"

$parameters = @{
    URI     = $url 
    Method  = "POST"
    Body    = $MoveBodyJson
    Headers = $token
}
Invoke-RestMethod @parameters





function GetAuthToken($resource) {
    $context = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile.DefaultContext
    $Token = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($context.Account, $context.Environment, $context.Tenant.Id.ToString(), $null, [Microsoft.Azure.Commands.Common.Authentication.ShowDialog]::Never, $null, $resource).AccessToken
    $authHeader = @{
        'Content-Type' = 'application/json'
        Authorization  = 'Bearer ' + $Token
    }
    return $authHeader
}
$token = GetAuthToken -resource "https://management.azure.com"


$vmName = "M01TSSPI0024"
$suffix = ".aberdeen.aberdeen-asset.com"

$script = [System.Collections.ArrayList]@()
$script.Add('Set-ItemProperty -Path Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\RDInfraAgent -Name APITest -Value 0')

$MoveBody = @{
    commandId = "RunPowerShellScript"
    script    = $script
}
$url = "https://management.azure.com{0}runCommand?api-version=2021-03-01" -f (Get-AzWvdSessionHost -ResourceGroupName rg-EUS-RemoteDesktopDevices-WorkspaceAndStorage-NEU-PRD -HostPoolName NEU_TST_SSPersistent -Name "$vmName$suffix").ResourceId
$parameters = @{
    URI     = $url 
    Method  = "POST"
    Body    = $MoveBody | ConvertTo-Json
    Headers = $token
}
Invoke-RestMethod @parameters

The remote server returned an error: (405) Method Not Allowed.





(Get-AzWvdSessionHost -ResourceGroupName rg-EUS-RemoteDesktopDevices-WorkspaceAndStorage-NEU-PRD -HostPoolName NEU_TST_SSPersistent -Name "M01TSSPI0024.aberdeen.aberdeen-asset.com").ResourceId

Get-AzWvdSessionHost -ResourceGroupName rg-EUS-RemoteDesktopDevices-WorkspaceAndStorage-NEU-PRD -HostPoolName NEU_TST_SSPersistent -Name "M01TSSPI0024.aberdeen.aberdeen-asset.com"

returns 

AgentVersion       : 1.0.10292.900
AllowNewSession    : True
AssignedUser       : Niall.Jennings@abrdn.com
HealthCheckResult  : {DomainJoinedCheck, DomainTrustCheck, SxSStackListenerCheck, UrlsAccessibleCheck...}
Id                 : /subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-EUS-RemoteDesktopDevices-Work
                     spaceAndStorage-NEU-PRD/providers/Microsoft.DesktopVirtualization/hostpools/NEU_TST_SSPersistent/se
                     ssionhosts/M01TSSPI0024.aberdeen.aberdeen-asset.com
LastHeartBeat      : 1/31/2025 2:20:49 PM
LastUpdateTime     : 1/30/2025 1:44:14 PM
Name               : NEU_TST_SSPersistent/M01TSSPI0024.aberdeen.aberdeen-asset.com
OSVersion          : 10.0.22631.4751
ObjectId           : c793bea8-41a4-4031-994b-93e3fd9824f2
ResourceId         : /subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourceGroups/rg-EUS-RemoteDesktopDevices-UATV
                     irtualDesktop-NEU-PRD/providers/Microsoft.Compute/virtualMachines/M01TSSPI0024
Session            : 0
Status             : Available
StatusTimestamp    : 1/30/2025 1:44:14 PM
SxSStackVersion    : rdp-sxs240705700
Type               : Microsoft.DesktopVirtualization/hostpools/sessionhosts
UpdateErrorMessage : 
UpdateState        : Succeeded
VirtualMachineId   : 6dce6a72-8df7-438e-99a5-d0494f5ccb5a

how do I parse the output to return 
/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourceGroups/rg-EUS-RemoteDesktopDevices-UATV
                     irtualDesktop-NEU-PRD/providers/Microsoft.Compute/virtualMachines/M01TSSPI0024

$script = [System.Collections.ArrayList]@()
$script.Add('Set-ItemProperty -Path Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\RDInfraAgent -Name RegistrationToken -Value '+$($hostpoolToken.properties.registrationInfo.token)+'')
$script.Add('Set-ItemProperty -Path Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\RDInfraAgent -Name IsRegistered -Value 0')
$script.Add('Restart-Service -Name RDAgentBootLoader')

$MoveBody = @{
    commandId = "RunPowerShellScript"
    script    = $script
}
$url = "https://management.azure.com{0}runCommand?api-version=2021-03-01" -f $sessionHost.properties.resourceId
$parameters = @{
    URI     = $url 
    Method  = "POST"
    Body    = $MoveBody | ConvertTo-Json
    Headers = $token
}
Invoke-RestMethod @parameters



function GetAuthToken {
    param ([string]$resource = "https://management.azure.com")

    # Ensure token is retrieved as a string
    $tokenObject = Get-AzAccessToken -ResourceUrl $resource
    $token = $tokenObject.Token

    return @{ Authorization = "Bearer $token" }
}


function Get-AvdSessionHost {
    param (
        [string]$HostpoolName,
        [string]$ResourceGroupName,
        [string]$SessionHostName
    )
    
    $apiVersion = "2021-04-01"
    $url = "https://management.azure.com/subscriptions/$script:subscriptionId/resourceGroups/$ResourceGroupName/providers/Microsoft.DesktopVirtualization/hostpools/$HostpoolName/sessionHosts/$SessionHostName?api-version=$apiVersion"

    return Invoke-RestMethod -Uri $url -Method GET -Headers (GetAuthToken)
}



Get-AvdSessionHost
WARNING: Upcoming breaking changes in the cmdlet 'Get-AzAccessToken' :
The Token property of the output type will be changed from String to SecureString. Add the [-AsSecureString] switch to avoid the impact of this upcoming breaking change.
- The change is expected to take effect in Az version : '14.0.0'
- The change is expected to take effect in Az.Accounts version : '4.0.0'
Note : Go to https://aka.ms/azps-changewarnings for steps to suppress this breaking change warning, and other information on breaking changes in Azure PowerShell.
WARNING: You're using Az.Accounts version 4.0.0. The latest version of Az.Accounts is 4.0.2. Upgrade your Az modules using the following commands:
  Update-Module Az.* -WhatIf    -- Simulate updating your Az modules.
  Update-Module Az.*            -- Update your Az modules.
Invoke-RestMethod : {"error":{"code":"MissingApiVersionParameter","message":"The api-version query parameter (?api-version=) is required for all requests."}}
At line:20 char:12
+     return Invoke-RestMethod -Uri $url -Method GET -Headers (GetAuthT ...
+            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-RestMethod], WebException
    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeRestMethodCommand

function GetAuthToken {
    param (
        [string]$resource = "https://management.azure.com"
    )

    $token = (Get-AzAccessToken -ResourceUrl $resource).Token
    return @{ Authorization = "Bearer $token" }
}

function Get-AvdSessionHost {
    param (
        [string]$HostpoolName,
        [string]$ResourceGroupName,
        [string]$SessionHostName
    )

    $apiVersion = "2021-04-01"
    $url = "https://management.azure.com/subscriptions/$script:subscriptionId/resourceGroups/$ResourceGroupName/providers/Microsoft.DesktopVirtualization/hostpools/$HostpoolName/sessionHosts/$SessionHostName?api-version=$apiVersion"
    
    return Invoke-RestMethod -Uri $url -Method GET -Headers (GetAuthToken)
}

function Remove-AvdSessionhost {
    param (
        [string]$HostpoolName,
        [string]$ResourceGroupName,
        [string]$SessionHostName
    )

    $apiVersion = "2021-04-01"
    $url = "https://management.azure.com/subscriptions/$script:subscriptionId/resourceGroups/$ResourceGroupName/providers/Microsoft.DesktopVirtualization/hostpools/$HostpoolName/sessionHosts/$SessionHostName?api-version=$apiVersion"

    Invoke-RestMethod -Uri $url -Method DELETE -Headers (GetAuthToken)
}

function Update-AvdRegistrationToken {
    param (
        [string]$HostpoolName,
        [string]$ResourceGroupName
    )

    $apiVersion = "2021-04-01"
    $url = "https://management.azure.com/subscriptions/$script:subscriptionId/resourceGroups/$ResourceGroupName/providers/Microsoft.DesktopVirtualization/hostpools/$HostpoolName/updateRegistrationToken?api-version=$apiVersion"

    return Invoke-RestMethod -Uri $url -Method POST -Headers (GetAuthToken)
}



AuthenticationCheck : The term 'AuthenticationCheck' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try 
again.
At line:50 char:9
+         AuthenticationCheck
+         ~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (AuthenticationCheck:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 
GetAuthToken : The term 'GetAuthToken' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:51 char:18
+         $token = GetAuthToken -resource "https://management.azure.com ...
+                  ~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (GetAuthToken:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 
Get-AvdSessionHost : The term 'Get-AvdSessionHost' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:77 char:32
+                 $sessionHost = Get-AvdSessionHost -HostpoolName $from ...
+                                ~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Get-AvdSessionHost:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

function Move-AvdSessionhost {
    <#
    .SYNOPSIS
    Moving sessionhosts from an Azure Virtual Desktop hostpool to a new one.
    .DESCRIPTION
    The function will move sessionhosts to a new Azure Virtual Desktop hostpool.
    .PARAMETER fromHostpoolName
    Enter the source AVD Hostpool name
    .PARAMETER fromResourceGroupName
    Enter the source Hostpool resourcegroup name
    .PARAMETER toHostpoolName
    Enter the destination AVD Hostpool name
    .PARAMETER toResourceGroupName
    Enter the destination Hostpool resourcegroup name
    .PARAMETER SessionHostName
    Enter the sessionhosts name avd-hostpool/avd-host-1.avd.domain
    .EXAMPLE
    Move-AvdSessionhost -FromHostpoolName avd-hostpool -FromResourceGroupName rg-avd-01 -ToHostpoolName avd-hostpool-02 -ToResourceGroupName rg-avd-02 -SessionHostName avd-host-1.avd.domain
    #>
    [CmdletBinding(DefaultParameterSetName = 'SingleObject')]
    param
    (
        [parameter(Mandatory)]
        [ValidateNotNullOrEmpty()]
        [string]$fromHostpoolName,
    
        [parameter(Mandatory)]
        [ValidateNotNullOrEmpty()]
        [string]$fromResourceGroupName,
        
        [parameter(Mandatory)]
        [ValidateNotNullOrEmpty()]
        [string]$toHostpoolName,
    
        [parameter(Mandatory)]
        [ValidateNotNullOrEmpty()]
        [string]$toResourceGroupName,

        [parameter(ParameterSetName = 'SingleObject')]
        [parameter(Mandatory)]
        [string]$sessionHostName

        #[parameter(ParameterSetName = 'InputObject')]
        #[parameter(Mandatory)]
        #[object]$SessionHosts
        
    )
    Begin {
        Write-Verbose "Start moving session hosts"
        AuthenticationCheck
        $token = GetAuthToken -resource "https://management.azure.com"
        $apiVersion = "?api-version=2021-04-01"
    }
    Process {
        switch ($PsCmdlet.ParameterSetName) {
            InputObject {
                try {
                    $sessionHostName = $SessionHosts.value.name
                }
                catch {
                    Write-Error "Please provide the Get-AvdSessionHost output"
                }
            }
            SingleObject {
                
            }
        }
        $sessionHostName | foreach {
            try {
                $vmName = $_.Split("/")[-1]
                Write-Verbose "Removing sessionhost $vmName from $FromHostPoolName"
                $url = "https://management.azure.com/subscriptions/" + $script:subscriptionId + "/resourceGroups/" + $ResourceGroupName + "/providers/Microsoft.DesktopVirtualization/hostpools/" + $HostpoolName + "/sessionHosts/" + $vmName + $apiVersion
                $parameters = @{
                    uri     = $url
                    Headers = $token
                }
                $sessionHost = Get-AvdSessionHost -HostpoolName $fromHostpoolName -ResourceGroupName $fromResourceGroupName -SessionHostName $vmName
                Remove-AvdSessionhost -HostpoolName $fromHostpoolName -ResourceGroupName $fromResourceGroupName -SessionHostName $vmName
                $resourceId = $($sessionHost.properties.resourceId)
                Write-Verbose "Requesting new token in hostpool $toHostpoolName"
                $avdHostpoolToken = Update-AvdRegistrationToken -HostpoolName $toHostpoolName -ResourceGroupName $toResourceGroupName
                
                # Script part
                $script = [System.Collections.ArrayList]@()
                $script.Add('Set-ItemProperty -Path Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\RDInfraAgent -Name RegistrationToken -Value ' + $($avdHostpoolToken.properties.registrationInfo.token) + '')
                $script.Add('Set-ItemProperty -Path Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\RDInfraAgent -Name IsRegistered -Value 0')
                $script.Add('Restart-Service -Name RDAgentBootLoader')

                $MoveBody = @{
                    commandId = "RunPowerShellScript"
                    script    = $script
                }   
                $url = "https://management.azure.com" + $($resourceId) + "/runCommand" + $apiVersion
                Write-Verbose "Moving sessionhost $name to $ToHostPoolName"
                $parameters = @{
                    URI     = $url 
                    Method  = "POST"
                    Body    = $MoveBody | ConvertTo-Json
                    Headers = $token
                }
                Invoke-RestMethod @parameters
            }
            catch {
                Throw $_
            }
        }
    }
}

Move-AvdSessionhost -FromHostpoolName NEU_TST_SSPersistent -FromResourceGroupName rg-EUS-RemoteDesktopDevices-WorkspaceAndStorage-NEU-PRD -ToHostpoolName NEU_PRD_SSPersistent_WO -ToResourceGroupName rg-EUS-RemoteDesktopDevices-WorkspaceAndStorage-NEU-PRD -SessionHostName M01TSSPI0024

exceptions
| where timestamp between (datetime(2025-01-28T08:00:00) .. datetime(2025-01-28T10:17:00))
| order by timestamp


exceptions | where timestamp > ago(9h) | order by timestamp

28/01/2025, 10:16:46.604




// HealthChecks of SessionHost 

// Renders a summary of SessionHost health status. 

let HealthCheckIdToDescription = (idx: long) {
    case(
    idx == 0,
    "DomainJoin",
    idx == 1,
    "DomainTrust",
    idx == 2,
    "FSLogix",
    idx == 3,
    "SxSStack",
    idx == 4,
    "URLCheck",
    idx == 5,
    "GenevaAgent",
    idx == 6,
    "DomainReachable",
    idx == 7,
    "WebRTCRedirector",
    idx == 8,
    "SxSStackEncryption",
    idx == 9,
    "IMDSReachable",
    idx == 10,
    "MSIXPackageStaging",
    strcat("InvalidNameIndex: ", idx)
)
};
let GetHealthCheckResult = (idx: long) {
    case(
    idx == 0,
    "Unknown",
    idx == 1,
    "Succeeded",
    idx == 2,
    "Failed",
    idx == 3,
    "SessionHostShutdown",
    strcat("InvalidResultIndex: ", idx)
)
};
WVDAgentHealthStatus
// In some states (e.g. Unavailable, Upgrading) hosts are not running health checks
| where isnotempty(SessionHostHealthCheckResult)
| mv-expand SessionHostHealthCheckResult to typeof(dynamic)
| evaluate bag_unpack(SessionHostHealthCheckResult)
| evaluate bag_unpack(AdditionalFailureDetails)
| extend HealthCheckDesc = HealthCheckIdToDescription(HealthCheckName)
| where HealthCheckResult == 2
| where HealthCheckDesc contains "MSIXPackage"
// Parse the Message column to extract application names and error codes
| extend ParsedErrors = extract_all(@"(\[.*?\(.*?\)\])", tostring(Message)) 
| mv-expand ParsedErrors
| extend ParsedErrors = tostring(ParsedErrors) // Ensure ParsedErrors is treated as a string
| extend AppName = extract(@"^\[(.*?)(_.*?_)", 1, ParsedErrors),
         ErrorCode = extract(@"\((.*?)\.", 1, ParsedErrors),
         ErrorMessage = extract(@"\((.*?NeedsAssistance)\)", 1, ParsedErrors)
// Select only the desired columns
| project AppName, ErrorCode, ErrorMessage



extract(): argument #3 expected to be a string expression
Request id: 15399a82-511d-4282-8c35-4a5013955855


// HealthChecks of SessionHost 

// Renders a summary of SessionHost health status. 

let HealthCheckIdToDescription = (idx: long) {
    case(
    idx == 0,
    "DomainJoin",
    idx == 1,
    "DomainTrust",
    idx == 2,
    "FSLogix",
    idx == 3,
    "SxSStack",
    idx == 4,
    "URLCheck",
    idx == 5,
    "GenevaAgent",
    idx == 6,
    "DomainReachable",
    idx == 7,
    "WebRTCRedirector",
    idx == 8,
    "SxSStackEncryption",
    idx == 9,
    "IMDSReachable",
    idx == 10,
    "MSIXPackageStaging",
    strcat("InvalidNameIndex: ", idx)
)
};
let GetHealthCheckResult = (idx: long) {
    case(
    idx == 0,
    "Unknown",
    idx == 1,
    "Succeeded",
    idx == 2,
    "Failed",
    idx == 3,
    "SessionHostShutdown",
    strcat("InvalidResultIndex: ", idx)
)
};
WVDAgentHealthStatus
// In some states (e.g. Unavailable, Upgrading) hosts are not running health checks
| where isnotempty(SessionHostHealthCheckResult)
| mv-expand SessionHostHealthCheckResult to typeof(dynamic)
| evaluate bag_unpack(SessionHostHealthCheckResult)
| evaluate bag_unpack(AdditionalFailureDetails)
| extend HealthCheckDesc = HealthCheckIdToDescription(HealthCheckName)
| where HealthCheckResult == 2
| where HealthCheckDesc contains "MSIXPackage"
// Parse the Message column to extract application names and error codes
| extend ParsedErrors = extract_all(@"(\[.*?\(.*?\)\])", tostring(Message)) 
| mv-expand ParsedErrors
| extend AppName = extract(@"^\[(.*?)(_.*?_)", 1, ParsedErrors),
         ErrorCode = extract(@"\((.*?)\.", 1, ParsedErrors),
         ErrorMessage = extract(@"\((.*?NeedsAssistance)\)", 1, ParsedErrors)
// Select only the desired columns
| project AppName, ErrorCode, ErrorMessage





// HealthChecks of SessionHost 

// Renders a summary of SessionHost health status. 

let HealthCheckIdToDescription = (idx: long) {
    case(
    idx == 0,
    "DomainJoin",
    idx == 1,
    "DomainTrust",
    idx == 2,
    "FSLogix",
    idx == 3,
    "SxSStack",
    idx == 4,
    "URLCheck",
    idx == 5,
    "GenevaAgent",
    idx == 6,
    "DomainReachable",
    idx == 7,
    "WebRTCRedirector",
    idx == 8,
    "SxSStackEncryption",
    idx == 9,
    "IMDSReachable",
    idx == 10,
    "MSIXPackageStaging",
    strcat("InvalidNameIndex: ", idx)
)
};
let GetHealthCheckResult = (idx: long) {
    case(
    idx == 0,
    "Unknown",
    idx == 1,
    "Succeeded",
    idx == 2,
    "Failed",
    idx == 3,
    "SessionHostShutdown",
    strcat("InvalidResultIndex: ", idx)
)
};
WVDAgentHealthStatus
// In some states (e.g. Unavailable, Upgrading) hosts are not running health checks
| where isnotempty(SessionHostHealthCheckResult)
| mv-expand SessionHostHealthCheckResult to typeof(dynamic)
| evaluate bag_unpack(SessionHostHealthCheckResult)
| evaluate bag_unpack(AdditionalFailureDetails)
| extend HealthCheckDesc = HealthCheckIdToDescription(HealthCheckName)
| where HealthCheckResult == 2
| where HealthCheckDesc contains "MSIXPackage"


what modification do I need to make to the above KQL to parse the Message column with string format below, I want to be able to see each application name and error code
"SessionHost needs assistance: The following MSIX packages have failed to properly stage: [ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[DWGSee_3.36.0.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[xPlan_9.2.20.0_x64__pccxv4s157z20, (Native error 1816., NeedsAssistance)]
[SAP-SAP-7.70_7.7.0.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]
[IBM-MQExplorer-9.3.1.0_9.3.1.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]
[GoToAssist-v11.9-1380_11.9.1380.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[Devolutions-Remote-Desktop-Manager-13.6.7.0_0.0.0.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[Oracle-SQLDeveloper-24.3.0.284.2209-x64_24.3.1.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[AbInitio-TRMC-4.1.6.0-MSIX_4.1.6.0_x64__pccxv4s157z20, (Native error 1816., NeedsAssistance)]
[BlockCrossClient_9.17.6393.0_x64__pccxv4s157z20, (Native error 1816., NeedsAssistance)]
[Seavus-Project-Viewer_16.0.51.0_x64__pccxv4s157z20, (Native error 1816., NeedsAssistance)]
[PowerAutomateProcessMining_6.1.2401.17492_x64__8wekyb3d8bbwe, (Unexpected network error, NeedsAssistance)]
[Pentana-Vision-PRD-6.0.1.7-01A_6.0.1.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[AbInitio-GDE-4.1.6.0_4.1.6.0_x64__pccxv4s157z20, (Native error 1816., NeedsAssistance)]
[Postman11_11.18.0.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[Notepad-plus-plus_8.7.3.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]
[Markit-EDM-19.2.35_19.2.35.0_x64__pccxv4s157z20, (Native error 1816., NeedsAssistance)]
[Microsoft.PowerAutomateDesktop_11.2411.200.0_x64__8wekyb3d8bbwe, (Native error 1816., NeedsAssistance)]
[Pentana-ExcelImporter_5.4.8.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[SafeNetAuthenticationClient10.9_10.9.3283.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]"

































let HealthCheckIdToDescription = (idx: long) {
    case(
        idx == 0, "DomainJoin",
        idx == 1, "DomainTrust",
        idx == 2, "FSLogix",
        idx == 3, "SxSStack",
        idx == 4, "URLCheck",
        idx == 5, "GenevaAgent",
        idx == 6, "DomainReachable",
        idx == 7, "WebRTCRedirector",
        idx == 8, "SxSStackEncryption",
        idx == 9, "IMDSReachable",
        idx == 10, "MSIXPackageStaging",
        strcat("InvalidNameIndex: ", idx)
    )
};
WVDAgentHealthStatus
| where isnotempty(SessionHostHealthCheckResult)
| mv-expand SessionHostHealthCheckResult to typeof(dynamic)
| evaluate bag_unpack(SessionHostHealthCheckResult)
// Ensure HealthCheckName exists and map it to a description
| extend HealthCheckDesc = case(
    isnotempty(HealthCheckName), HealthCheckIdToDescription(HealthCheckName),
    "Unknown"
)
| where HealthCheckResult == 2
| where HealthCheckDesc contains "MSIXPackage"
| project TimeGenerated, SessionHostName, HealthCheckDesc, Message




// HealthChecks of SessionHost 

// Renders a summary of SessionHost health status. 

let HealthCheckIdToDescription = (idx: long) {
    case(
    idx == 0,
    "DomainJoin",
    idx == 1,
    "DomainTrust",
    idx == 2,
    "FSLogix",
    idx == 3,
    "SxSStack",
    idx == 4,
    "URLCheck",
    idx == 5,
    "GenevaAgent",
    idx == 6,
    "DomainReachable",
    idx == 7,
    "WebRTCRedirector",
    idx == 8,
    "SxSStackEncryption",
    idx == 9,
    "IMDSReachable",
    idx == 10,
    "MSIXPackageStaging",
    strcat("InvalidNameIndex: ", idx)
)
};
let GetHealthCheckResult = (idx: long) {
    case(
    idx == 0,
    "Unknown",
    idx == 1,
    "Succeeded",
    idx == 2,
    "Failed",
    idx == 3,
    "SessionHostShutdown",
    strcat("InvalidResultIndex: ", idx)
)
};
WVDAgentHealthStatus
// In some states (e.g. Unavailable, Upgrading) hosts are not running health checks
| where isnotempty(SessionHostHealthCheckResult)
| mv-expand SessionHostHealthCheckResult to typeof(dynamic)
| evaluate bag_unpack(SessionHostHealthCheckResult)
| evaluate bag_unpack(AdditionalFailureDetails)
| extend HealthCheckDesc = HealthCheckIdToDescription(HealthCheckName)
| where HealthCheckResult == 2
| where HealthCheckDesc contains "MSIXPackage"
| distinct Message


I would like to parse the Message column with three new columns and a duplicate row for each application if possible

Column called ErrorMessage with the text from Start of line to the first : ie SessionHost needs assistance: The following MSIX packages have failed to properly stage:
Column called Apps that contains each application name in the Message string
Colum called Error that takes the value between the trailing ( and ,) ie (Native error 1816.,

returns output on message column as below. 

"SessionHost needs assistance: The following MSIX packages have failed to properly stage: [ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]
[DWGSee_3.36.0.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]
[SAP-SAP-7.70_7.7.0.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]
[GoToAssist-v11.9-1380_11.9.1380.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[Devolutions-Remote-Desktop-Manager-13.6.7.0_0.0.0.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]
[BlockCrossClient_9.17.6393.0_x64__pccxv4s157z20, (Native error 1816., NeedsAssistance)]
[PowerAutomateProcessMining_6.1.2401.17492_x64__8wekyb3d8bbwe, (Native error 1816., NeedsAssistance)]
[AbInitio-GDE-4.1.6.0_4.1.6.0_x64__pccxv4s157z20, (Native error 1816., NeedsAssistance)]
[Microsoft.PowerAutomateDesktop_11.2411.200.0_x64__8wekyb3d8bbwe, (Unexpected network error, NeedsAssistance)]
[SafeNetAuthenticationClient10.9_10.9.3283.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]"
"SessionHost needs assistance: The following MSIX packages have failed to properly stage: [ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]
[xPlan_9.2.20.0_x64__pccxv4s157z20, (Unexpected network error, NeedsAssistance)]
[SAP-SAP-7.70_7.7.0.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]
[IBM-MQExplorer-9.3.1.0_9.3.1.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[GoToAssist-v11.9-1380_11.9.1380.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[Devolutions-Remote-Desktop-Manager-13.6.7.0_0.0.0.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[AbInitio-TRMC-4.1.6.0-MSIX_4.1.6.0_x64__pccxv4s157z20, (Native error 1816., NeedsAssistance)]
[BlockCrossClient_9.17.6393.0_x64__pccxv4s157z20, (Native error 1816., NeedsAssistance)]
[Seavus-Project-Viewer_16.0.51.0_x64__pccxv4s157z20, (Native error 1816., NeedsAssistance)]
[PowerAutomateProcessMining_6.1.2401.17492_x64__8wekyb3d8bbwe, (Native error 1816., NeedsAssistance)]
[Pentana-Vision-PRD-6.0.1.7-01A_6.0.1.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[AbInitio-GDE-4.1.6.0_4.1.6.0_x64__pccxv4s157z20, (Native error 1816., NeedsAssistance)]
[Postman11_11.18.0.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[ITG-PositAlert-2018.3.2.59577_2018.3.2.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]
[QlikTech-QlikView_12.40.201.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]
[Notepad-plus-plus_8.7.3.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[Markit-EDM-19.2.35_19.2.35.0_x64__pccxv4s157z20, (Native error 1816., NeedsAssistance)]
[Microsoft.PowerAutomateDesktop_11.2411.200.0_x64__8wekyb3d8bbwe, (Native error 1816., NeedsAssistance)]
[SafeNetAuthenticationClient10.9_10.9.3283.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]"
"SessionHost needs assistance: The following MSIX packages have failed to properly stage: [ManagementStudioClient-2023.355.689-001A_2023.355.690.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[DWGSee_3.36.0.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[xPlan_9.2.20.0_x64__pccxv4s157z20, (Native error 1816., NeedsAssistance)]
[SAP-SAP-7.70_7.7.0.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]
[IBM-MQExplorer-9.3.1.0_9.3.1.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]
[GoToAssist-v11.9-1380_11.9.1380.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[Devolutions-Remote-Desktop-Manager-13.6.7.0_0.0.0.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[Oracle-SQLDeveloper-24.3.0.284.2209-x64_24.3.1.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[AbInitio-TRMC-4.1.6.0-MSIX_4.1.6.0_x64__pccxv4s157z20, (Native error 1816., NeedsAssistance)]
[BlockCrossClient_9.17.6393.0_x64__pccxv4s157z20, (Native error 1816., NeedsAssistance)]
[Seavus-Project-Viewer_16.0.51.0_x64__pccxv4s157z20, (Native error 1816., NeedsAssistance)]
[PowerAutomateProcessMining_6.1.2401.17492_x64__8wekyb3d8bbwe, (Unexpected network error, NeedsAssistance)]
[Pentana-Vision-PRD-6.0.1.7-01A_6.0.1.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[AbInitio-GDE-4.1.6.0_4.1.6.0_x64__pccxv4s157z20, (Native error 1816., NeedsAssistance)]
[Postman11_11.18.0.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[Notepad-plus-plus_8.7.3.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]
[Markit-EDM-19.2.35_19.2.35.0_x64__pccxv4s157z20, (Native error 1816., NeedsAssistance)]
[Microsoft.PowerAutomateDesktop_11.2411.200.0_x64__8wekyb3d8bbwe, (Native error 1816., NeedsAssistance)]
[Pentana-ExcelImporter_5.4.8.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[SafeNetAuthenticationClient10.9_10.9.3283.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]"
"SessionHost needs assistance: The following MSIX packages have failed to properly stage: [DWGSee_3.36.0.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[SAP-SAP-7.70_7.7.0.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]
[IBM-MQExplorer-9.3.1.0_9.3.1.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]
[GoToAssist-v11.9-1380_11.9.1380.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]
[BlockCrossClient_9.17.6393.0_x64__pccxv4s157z20, (Native error 1816., NeedsAssistance)]
[ITG-PositAlert-2018.3.2.59577_2018.3.2.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[QlikTech-QlikView_12.40.201.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[Notepad-plus-plus_8.7.3.0_x64__nmvg3h6wsd778, (Native error 1816., NeedsAssistance)]
[Markit-EDM-19.2.35_19.2.35.0_x64__pccxv4s157z20, (Unexpected network error, NeedsAssistance)]
[Microsoft.PowerAutomateDesktop_11.2411.200.0_x64__8wekyb3d8bbwe, (Unexpected network error, NeedsAssistance)]
[Pentana-ExcelImporter_5.4.8.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]
[SafeNetAuthenticationClient10.9_10.9.3283.0_x64__nmvg3h6wsd778, (Unexpected network error, NeedsAssistance)]"
SessionHost needs assistance: The following MSIX packages have failed to properly stage: [xPlan_9.2.20.0_x64__pccxv4s157z20, (Unexpected network error, NeedsAssistance)]

I would like to parse the Message column with three new columns and a duplicate row for each application if possible

Column called ErrorMessage with the text from Start of line to the first : ie SessionHost needs assistance: The following MSIX packages have failed to properly stage:
Column called Apps that contains each application name in the Message string
Colum called Error that takes the value between the trailing ( and ,) ie (Native error 1816.,


'evaluate' operator: Failed to resolve table or column or scalar or graph expression named 'AdditionalFailureDetails'
Request id: 1245cdc4-13f8-4751-b851-54ae64bd9bde

let HealthCheckIdToDescription = (idx: long) {
    case(
        idx == 0, "DomainJoin",
        idx == 1, "DomainTrust",
        idx == 2, "FSLogix",
        idx == 3, "SxSStack",
        idx == 4, "URLCheck",
        idx == 5, "GenevaAgent",
        idx == 6, "DomainReachable",
        idx == 7, "WebRTCRedirector",
        idx == 8, "SxSStackEncryption",
        idx == 9, "IMDSReachable",
        idx == 10, "MSIXPackageStaging",
        strcat("InvalidNameIndex: ", idx)
    )
};
let GetHealthCheckResult = (idx: long) {
    case(
        idx == 0, "Unknown",
        idx == 1, "Succeeded",
        idx == 2, "Failed",
        idx == 3, "SessionHostShutdown",
        strcat("InvalidResultIndex: ", idx)
    )
};
WVDAgentHealthStatus
// In some states (e.g. Unavailable, Upgrading) hosts are not running health checks
| where isnotempty(SessionHostHealthCheckResult)
| mv-expand SessionHostHealthCheckResult to typeof(dynamic)
| evaluate bag_unpack(SessionHostHealthCheckResult)
| evaluate bag_unpack(AdditionalFailureDetails)
// Map HealthCheckDesc
| extend HealthCheckDesc = HealthCheckIdToDescription(HealthCheckName)
// Filter for failures
| where HealthCheckResult == 2
// Filter specific messages (e.g., only "DomainJoin" and "FSLogix")
| where HealthCheckDesc == "DomainJoin" or HealthCheckDesc == "FSLogix"
// Select relevant columns
| project TimeGenerated, SessionHostName, HealthCheckDesc, HealthCheckResult, _ResourceId








// HealthChecks of SessionHost 

// Renders a summary of SessionHost health status. 

let HealthCheckIdToDescription = (idx: long) {
    case(
    idx == 0,
    "DomainJoin",
    idx == 1,
    "DomainTrust",
    idx == 2,
    "FSLogix",
    idx == 3,
    "SxSStack",
    idx == 4,
    "URLCheck",
    idx == 5,
    "GenevaAgent",
    idx == 6,
    "DomainReachable",
    idx == 7,
    "WebRTCRedirector",
    idx == 8,
    "SxSStackEncryption",
    idx == 9,
    "IMDSReachable",
    idx == 10,
    "MSIXPackageStaging",
    strcat("InvalidNameIndex: ", idx)
)
};
let GetHealthCheckResult = (idx: long) {
    case(
    idx == 0,
    "Unknown",
    idx == 1,
    "Succeeded",
    idx == 2,
    "Failed",
    idx == 3,
    "SessionHostShutdown",
    strcat("InvalidResultIndex: ", idx)
)
};
WVDAgentHealthStatus
// In some states (e.g. Unavailable, Upgrading) hosts are not running health checks
| where isnotempty(SessionHostHealthCheckResult)
| mv-expand SessionHostHealthCheckResult to typeof(dynamic)
| evaluate bag_unpack(SessionHostHealthCheckResult)
| evaluate bag_unpack(AdditionalFailureDetails)
| extend HealthCheckDesc = HealthCheckIdToDescription(HealthCheckName)
| where HealthCheckResult == 2



returns 

TimeGenerated [UTC]	OperationName	SessionHostName	SessionHostResourceId	AgentVersion	OSVersion	SxSStackVersion	AllowNewSessions	Status	StatusTimeStamp [UTC]	LastHeartBeat [UTC]	EndpointState	UpgradeState	UpgradeErrorMsg	LastUpgradeTimeStamp [UTC]	ActiveSessions	InactiveSessions	Type	_ResourceId	HealthCheckDesc
28/01/2025, 11:40:48.819	AgentUpdateHealthStatus	M01PSSPI1357.aberdeen.aberdeen-asset.com	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourceGroups/rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD/providers/Microsoft.Compute/virtualMachines/M01PSSPI1357	1.0.10292.900	10.0.22631.4751	rdp-sxs240705700	TRUE	NeedsAssistance	27/01/2025, 19:44:34.527	28/01/2025, 11:40:48.811	NeedsAssistance	Succeeded		27/01/2025, 19:44:34.527	1	0	WVDAgentHealthStatus	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent	MSIXPackageStaging
28/01/2025, 11:39:06.318	AgentUpdateHealthStatus	M01PSSPI1046.aberdeen.aberdeen-asset.com	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourceGroups/rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD/providers/Microsoft.Compute/virtualMachines/M01PSSPI1046	1.0.10292.900	10.0.22631.4751	rdp-sxs240705700	TRUE	NeedsAssistance	28/01/2025, 07:20:12.616	28/01/2025, 11:39:06.307	NeedsAssistance	Succeeded		28/01/2025, 07:20:12.616	1	0	WVDAgentHealthStatus	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent	MSIXPackageStaging
28/01/2025, 11:39:09.156	AgentUpdateHealthStatus	M01PSSPI1589.aberdeen.aberdeen-asset.com	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourceGroups/rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD/providers/Microsoft.Compute/virtualMachines/M01PSSPI1589	1.0.10292.900	10.0.22631.4751	rdp-sxs240705700	TRUE	NeedsAssistance	27/01/2025, 17:14:11.241	28/01/2025, 11:39:09.149	NeedsAssistance	Succeeded		27/01/2025, 17:14:11.241	1	0	WVDAgentHealthStatus	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent	MSIXPackageStaging
28/01/2025, 11:39:10.737	AgentUpdateHealthStatus	M01PSSPI0024.aberdeen.aberdeen-asset.com	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourceGroups/rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD/providers/Microsoft.Compute/virtualMachines/M01PSSPI0024	1.0.10292.900	10.0.22631.4751	rdp-sxs240705700	TRUE	NeedsAssistance	28/01/2025, 07:09:10.639	28/01/2025, 11:39:10.730	NeedsAssistance	Succeeded		28/01/2025, 07:09:10.639	1	0	WVDAgentHealthStatus	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent	MSIXPackageStaging
28/01/2025, 11:39:14.971	AgentUpdateHealthStatus	M01PSSPI1235.aberdeen.aberdeen-asset.com	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourceGroups/rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD/providers/Microsoft.Compute/virtualMachines/M01PSSPI1235	1.0.10292.900	10.0.22631.4751	rdp-sxs240705700	TRUE	NeedsAssistance	28/01/2025, 07:12:20.804	28/01/2025, 11:39:14.961	NeedsAssistance	Succeeded		28/01/2025, 07:12:20.804	1	0	WVDAgentHealthStatus	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent	MSIXPackageStaging
28/01/2025, 11:39:36.386	AgentUpdateHealthStatus	M01PSSPI1046.aberdeen.aberdeen-asset.com	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourceGroups/rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD/providers/Microsoft.Compute/virtualMachines/M01PSSPI1046	1.0.10292.900	10.0.22631.4751	rdp-sxs240705700	TRUE	NeedsAssistance	28/01/2025, 07:20:12.616	28/01/2025, 11:39:36.377	NeedsAssistance	Succeeded		28/01/2025, 07:20:12.616	1	0	WVDAgentHealthStatus	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent	MSIXPackageStaging
28/01/2025, 11:39:39.195	AgentUpdateHealthStatus	M01PSSPI1589.aberdeen.aberdeen-asset.com	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourceGroups/rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD/providers/Microsoft.Compute/virtualMachines/M01PSSPI1589	1.0.10292.900	10.0.22631.4751	rdp-sxs240705700	TRUE	NeedsAssistance	27/01/2025, 17:14:11.241	28/01/2025, 11:39:39.188	NeedsAssistance	Succeeded		27/01/2025, 17:14:11.241	1	0	WVDAgentHealthStatus	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent	MSIXPackageStaging
28/01/2025, 11:39:41.732	AgentUpdateHealthStatus	M01PSSPI0024.aberdeen.aberdeen-asset.com	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourceGroups/rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD/providers/Microsoft.Compute/virtualMachines/M01PSSPI0024	1.0.10292.900	10.0.22631.4751	rdp-sxs240705700	TRUE	NeedsAssistance	28/01/2025, 07:09:10.639	28/01/2025, 11:39:41.725	NeedsAssistance	Succeeded		28/01/2025, 07:09:10.639	1	0	WVDAgentHealthStatus	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent	MSIXPackageStaging
28/01/2025, 11:39:45.024	AgentUpdateHealthStatus	M01PSSPI1235.aberdeen.aberdeen-asset.com	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourceGroups/rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD/providers/Microsoft.Compute/virtualMachines/M01PSSPI1235	1.0.10292.900	10.0.22631.4751	rdp-sxs240705700	TRUE	NeedsAssistance	28/01/2025, 07:12:20.804	28/01/2025, 11:39:45.016	NeedsAssistance	Succeeded		28/01/2025, 07:12:20.804	1	0	WVDAgentHealthStatus	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent	MSIXPackageStaging
28/01/2025, 11:39:10.095	AgentUpdateHealthStatus	M01PSSPI1173.aberdeen.aberdeen-asset.com	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourceGroups/rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD/providers/Microsoft.Compute/virtualMachines/M01PSSPI1173	1.0.10292.900	10.0.22631.4751	rdp-sxs240705700	TRUE	NeedsAssistance	27/01/2025, 19:35:19.771	28/01/2025, 11:39:10.088	NeedsAssistance	Succeeded		27/01/2025, 19:35:19.771	1	0	WVDAgentHealthStatus	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent	MSIXPackageStaging
28/01/2025, 11:39:23.132	AgentUpdateHealthStatus	M01PSSPI1343.aberdeen.aberdeen-asset.com	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourceGroups/rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD/providers/Microsoft.Compute/virtualMachines/M01PSSPI1343	1.0.10292.900	10.0.22631.4751	rdp-sxs240705700	TRUE	NeedsAssistance	28/01/2025, 07:28:10.760	28/01/2025, 11:39:23.124	NeedsAssistance	Succeeded		28/01/2025, 07:28:10.760	1	0	WVDAgentHealthStatus	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent	MSIXPackageStaging
28/01/2025, 11:39:23.372	AgentUpdateHealthStatus	M01PSSPI1203.aberdeen.aberdeen-asset.com	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourceGroups/rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD/providers/Microsoft.Compute/virtualMachines/M01PSSPI1203	1.0.10292.900	10.0.22631.4751	rdp-sxs240705700	TRUE	NeedsAssistance	27/01/2025, 07:22:20.591	28/01/2025, 11:39:23.365	NeedsAssistance	Succeeded		27/01/2025, 07:22:20.591	1	0	WVDAgentHealthStatus	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent	MSIXPackageStaging
28/01/2025, 11:39:24.156	AgentUpdateHealthStatus	M01PSSPI1507.aberdeen.aberdeen-asset.com	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourceGroups/rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD/providers/Microsoft.Compute/virtualMachines/M01PSSPI1507	1.0.10292.900	10.0.22631.4751	rdp-sxs240705700	TRUE	NeedsAssistance	27/01/2025, 10:36:35.228	28/01/2025, 11:39:24.148	NeedsAssistance	Succeeded		27/01/2025, 10:36:35.228	1	0	WVDAgentHealthStatus	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent	MSIXPackageStaging
28/01/2025, 11:39:29.816	AgentUpdateHealthStatus	M01PSSPI0230.aberdeen.aberdeen-asset.com	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourceGroups/rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD/providers/Microsoft.Compute/virtualMachines/M01PSSPI0230	1.0.10292.900	10.0.22631.4751	rdp-sxs240705700	TRUE	NeedsAssistance	28/01/2025, 06:57:50.081	28/01/2025, 11:37:59.230	NeedsAssistance	Succeeded		28/01/2025, 06:57:50.081	1	0	WVDAgentHealthStatus	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent	MSIXPackageStaging
28/01/2025, 11:39:40.181	AgentUpdateHealthStatus	M01PSSPI1173.aberdeen.aberdeen-asset.com	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourceGroups/rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD/providers/Microsoft.Compute/virtualMachines/M01PSSPI1173	1.0.10292.900	10.0.22631.4751	rdp-sxs240705700	TRUE	NeedsAssistance	27/01/2025, 19:35:19.771	28/01/2025, 11:39:40.173	NeedsAssistance	Succeeded		27/01/2025, 19:35:19.771	1	0	WVDAgentHealthStatus	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent	MSIXPackageStaging
28/01/2025, 11:39:12.290	AgentUpdateHealthStatus	M01TSSPI0004.aberdeen.aberdeen-asset.com	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourceGroups/rg-EUS-RemoteDesktopDevices-UATVirtualDesktop-NEU-PRD/providers/Microsoft.Compute/virtualMachines/M01TSSPI0004	1.0.10292.900	10.0.22631.4602	rdp-sxs240705700	TRUE	NeedsAssistance	27/01/2025, 12:52:04.122	28/01/2025, 11:36:11.823	NeedsAssistance	Succeeded		27/01/2025, 12:52:04.122	1	0	WVDAgentHealthStatus	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_tst_sspersistent	MSIXPackageStaging






curl -v "https://management.azure.com/?api-version=2021-01-01"




% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed

  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0* Host management.azure.com:443 was resolved.
* IPv6: (none)
* IPv4: 4.150.241.10
*   Trying 4.150.241.10:443...
* Connected to management.azure.com (4.150.241.10) port 443
* schannel: disabled automatic use of client certificate
* ALPN: curl offers http/1.1
* ALPN: server accepted http/1.1
* using HTTP/1.x
> GET / HTTP/1.1

> Host: management.azure.com

> User-Agent: curl/8.7.1

> Accept: */*

> 

* Request completely sent off
* schannel: remote party requests renegotiation
* schannel: renegotiating SSL/TLS connection
* schannel: SSL/TLS connection renegotiated
< HTTP/1.1 400 Bad Request

< Cache-Control: no-cache

< Pragma: no-cache

< Content-Length: 137

< Content-Type: application/json; charset=utf-8

< Expires: -1

< x-ms-failure-cause: gateway

< x-ms-request-id: 0d8770af-4110-41d8-965b-ddab98a25b5a

< x-ms-correlation-request-id: 0d8770af-4110-41d8-965b-ddab98a25b5a

< x-ms-routing-request-id: WESTEUROPE:20250128T101355Z:0d8770af-4110-41d8-965b-ddab98a25b5a

< Strict-Transport-Security: max-age=31536000; includeSubDomains

< X-Content-Type-Options: nosniff

< X-Cache: CONFIG_NOCACHE

< X-MSEdge-Ref: Ref A: 34080C355823493AA6EEB68317DC3756 Ref B: DB3EDGE3217 Ref C: 2025-01-28T10:13:55Z

< Date: Tue, 28 Jan 2025 10:13:54 GMT

< 

{ [137 bytes data]

100   137  100   137    0     0   1249      0 --:--:-- --:--:-- --:--:--  1304
* Connection #0 to host management.azure.com left intact

{"error":{"code":"MissingApiVersionParameter","message":"The api-version query parameter (?api-version=) is required for all requests."}}



curl -v https://management.azure.com



TASKKILL /F /T /IM olk.exe
SYSTEM Context to remove from VM
Get-AppxPackage -AllUsers | Where-Object {$_.Name -Like '*OutlookForWindows*'} | Remove-AppxPackage
Get-AppxProvisionedPackage -Online | ? DisplayName -like '*OutlookForWindows*' | Remove-AppxProvisionedPackage -Online

Key: HKEY_CURRENT_USER\Software\Microsoft\Office\16.0\Outlook\Options\General
Type: REG_DWORD
Value: HideNewOutlookToggle
Data: 00000001






So the following is everything I've learned to do (so far) with Outlook Preview from a systems administration stance:

Uninstall Outlook Preview with PowerShell (USER context)

 Get-AppxPackage | Where-Object {$_.Name -Like '*OutlookForWindows*'} | Remove-AppxPackage
Uninstall Outlook Preview with PowerShell (SYSTEM context)

 Get-AppxPackage -AllUsers | Where-Object {$_.Name -Like '*OutlookForWindows*'} | Remove-AppxPackage
Uninstall Outlook Preview with Command Prompt / Batch Script (USER context)

 POWERSHELL -ExecutionPolicy Bypass -Command "Get-AppxPackage | Where-Object {$_.Name -Like '*OutlookForWindows*'} | Remove-AppxPackage"
Uninstall Outlook Preview with Command Prompt / Batch Script (SYSTEM context)

 POWERSHELL -ExecutionPolicy Bypass -Command "Get-AppxPackage -AllUsers | Where-Object {$_.Name -Like '*OutlookForWindows*'} | Remove-AppxPackage"
Block Outlook Preview from Outlook 365 in Windows Registry

Key: HKEY_CURRENT_USER\Software\Microsoft\Office\16.0\Outlook\Options\General

Type: REG_DWORD

Value: HideNewOutlookToggle

Data: 00000001



function Enable-VMHibernation {
    param (
        [Parameter(Mandatory=$true)]
        [string]$Subscription,

        [Parameter(Mandatory=$true)]
        [string]$ResourceGroupName,

        [string]$NameMatch = "SS|DV", # Default match string

        [switch]$ExcludePoweredOnVMs # Switch to exclude powered-on VMs
    )

    # Connect to the Azure subscription
    Connect-AzAccount -Subscription $Subscription

    # Retrieve VMs in the specified resource group and filter based on Name match
    $VMs = Get-AzVM -ResourceGroupName $ResourceGroupName | Where-Object { $_.Name -match $NameMatch }

    foreach ($VM in $VMs) {
        $RG = $ResourceGroupName
        $VM = $VM.Name

        try {
            # Check the current hibernation status
            Write-Output "Checking hibernation status for VM: $VM"
            $hibernationStatus = (Get-AzVM -ResourceGroupName $RG -Name $VM).AdditionalCapabilities

            if ($hibernationStatus.HibernationEnabled -eq $True) {
                Write-Output "Hibernation is already enabled on VM: $VM. Skipping..."
                continue
            } elseif ($hibernationStatus.HibernationEnabled) {
                Write-Output "Hibernation is not enabled on VM: $VM. Proceeding to enable..."
            } else {
                Write-Output "Hibernation status is unknown for VM: $VM. Proceeding to enable..."
            }

            # Check the power state of the VM
            Write-Output "Checking power state for VM: $VM"
            $powerState = (Get-AzVM -ResourceGroupName $RG -Name $VM -Status).Statuses | Where-Object { $_.Code -like 'PowerState/*' } | Select-Object -ExpandProperty Code

            if ($ExcludePoweredOnVMs) {
                if ($powerState -ne "PowerState/deallocated" -and $powerState -ne "PowerState/stopped") {
                    Write-Output "VM: $VM is powered on. Skipping due to ExcludePoweredOnVMs switch..."
                    continue
                }
            }

            if ($powerState -eq "PowerState/running") {
                # Stop the VM if it's running
                Write-Output "Stopping VM: $VM in Resource Group: $RG"
                Stop-AzVM -ResourceGroupName $RG -Name $VM -Force
            } else {
                Write-Output "VM: $VM is already stopped or deallocated. Proceeding with hibernation setup..."
            }

            # Get VM details and disk name
            Write-Output "Fetching VM details for: $VM"
            $vmdetails = Get-AzVM -Name $VM -ResourceGroupName $RG
            $diskname = $vmdetails.StorageProfile.OsDisk.Name
            $diskname=$vmdetails.StorageProfile.OsDisk.name

            # Enable hibernation on the OS disk
            Write-Output "Enabling hibernation on disk: $diskname"
            $disk = Get-AzDisk -ResourceGroupName $RG -DiskName $diskname
            $disk.SupportsHibernation = $True
            Update-AzDisk -ResourceGroupName $RG -DiskName $diskname -Disk $disk

            # Enable hibernation on the VM
            Write-Output "Enabling hibernation on VM: $VM"
            $VM = Get-AzVM -ResourceGroupName $RG -Name $VM
            $VM.AdditionalCapabilities.HibernationEnabled = $True
            Update-AzVM -ResourceGroupName $RG -VM $VM -HibernationEnabled

            Write-Output "Hibernation enabled successfully for VM: $VM"
        }
        catch {
            Write-Error "An error occurred while processing VM: $VM. Error: $_"
        }
    }
}

#NOTE ALL VMS in the Targeted Resource Group should be powered off gracefully in advance of the activity below

#Phase 1 Test - Validate Script works as expected. 
#Uncomment the relevent Enable-VMHibernation command
#NEU_DEV_SSPersistent
#Enable-VMHibernation -Subscription "RemoteDesktopDeveloperDevices-EMEA-NEU-PRD" -ResourceGroupName "rg-EUS-RemoteDesktopDeveloperDevices-WorkspaceAndStorage-NEU-PRD" -ExcludePoweredOnVMs

#Phase 2 UAT Rollout- Push to UAT Pools in NEU, EUS2 and SEA
#Uncomment the relevent Enable-VMHibernation command
#NEU_UAT_SSPersistent
#Enable-VMHibernation -Subscription "RemoteDesktopDevices-EMEA-NEU-PRD" -ResourceGroupName "rg-EUS-RemoteDesktopDevices-UATVirtualDesktop-NEU-PRD" -ExcludePoweredOnVMs
#EUS2_UAT_SSPersistent
#Enable-VMHibernation -Subscription "RemoteDesktopDevices-AMRS-EUS2-PRD" -ResourceGroupName "rg-EUS-RemoteDesktopDevices-UATVirtualDesktop-EUS2-PRD" -ExcludePoweredOnVMs
#SEA_UAT_SSPersistent
#Enable-VMHibernation -Subscription "RemoteDesktopDevices-APAC-SEA-PRD" -ResourceGroupName "rg-EUS-RemoteDesktopDevices-UATVirtualDesktop-SEA-PRD" -ExcludePoweredOnVMs

#Phase 3 PROD Rollout
#Uncomment the relevent Enable-VMHibernation command
#CUS_PRD_SSPersistent
#Enable-VMHibernation -Subscription "RemoteDesktopDevices-AMRS-CUS-PRD" -ResourceGroupName "rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-CUS-PRD" -ExcludePoweredOnVMs
#EUS2_PRD_SSPersistent
#Enable-VMHibernation -Subscription "RemoteDesktopDevices-AMRS-EUS2-PRD" -ResourceGroupName "rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-EUS2-PRD" -ExcludePoweredOnVMs
#NEU_PRD_SSPersistent
#Enable-VMHibernation -Subscription "RemoteDesktopDevices-EMEA-NEU-PRD" -ResourceGroupName "rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD" -ExcludePoweredOnVMs
#SEA_PRD_SSPersistent  
#Enable-VMHibernation -Subscription "RemoteDesktopDevices-APAC-SEA-PRD" -ResourceGroupName "rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-SEA-PRD" -ExcludePoweredOnVMs



# Disable the paging file for all drives first
$ComputerSystem = Get-WmiObject -Class Win32_ComputerSystem -EnableAllPrivileges
$ComputerSystem.AutomaticManagedPagefile = $false
$ComputerSystem.Put()

# Remove any existing paging files on all drives
Get-WmiObject -Class Win32_PageFileSetting | ForEach-Object { $_.Delete() }

# Create a system-managed paging file on the C: drive
$PageFile = ([WmiClass]"Win32_PageFileSetting").CreateInstance()
$PageFile.Name = "C:\pagefile.sys"
$PageFile.InitialSize = 0
$PageFile.MaximumSize = 0
$PageFile.Put()

# Enable system managed paging file on C drive
$ComputerSystem.AutomaticManagedPagefile = $true
$ComputerSystem.Put()

Write-Host "Paging file set to system managed on C: drive only."




#description: Configures Hyper-V and ensures Power service is running and set to automatic

<#
Notes:
This script will enable the Hyper-V feature, disable the Hyper-V tools, and ensure the Power service is running and set to automatic.
#>

# Enable Hyper-V feature
Write-Output "Enabling Hyper-V feature..."
try {
    Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All -NoRestart
    Write-Output "Hyper-V feature enabled successfully."
} catch {
    Write-Output "Failed to enable Hyper-V feature: $_"
}

# Disable Hyper-V tools
Write-Output "Disabling Hyper-V tools..."
try {
    Disable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-Tools-All -NoRestart
    Write-Output "Hyper-V tools disabled successfully."
} catch {
    Write-Output "Failed to disable Hyper-V tools: $_"
}

# Ensure Power service is set to automatic and started
Write-Output "Configuring Power service..."
try {
    Set-Service -Name POWER -StartupType Automatic
    Start-Service -Name POWER
    Write-Output "Power service is set to automatic and started successfully."
} catch {
    Write-Output "Failed to configure Power service: $_"
}

### End Script ###



DevicesDifference =
SUMX(
    'DevicesRunning-rows',
    VAR MatchingMaxUsers =
        CALCULATE(
            SUM('MaxUsersPerHostPool'[MaxUsers])
        )
    RETURN
        'DevicesRunning-rows'[NumOfDevices] - MatchingMaxUsers
)


The expression contains columns from multiple tables, but only columns from a single table can be used in a True/False expression that is used as a table filter expression.

DevicesDifference = 
SUMX(
    'DevicesRunning-rows',
    VAR MatchingMaxUsers =
        CALCULATE(
            SUM('MaxUsersPerHostPool'[MaxUsers]),
            'TimeGenerated'[TimeGenerated] = 'DevicesRunning-rows'[TimeGenerated]
        )
    RETURN
        'DevicesRunning-rows'[NumOfDevices] - MatchingMaxUsers
)



Table name TimeGenerated
Column Name TimeGenerated
Table name DevicesRunning-rows
Column Name NumOfDevices
Table name MaxUsersPerHostPool
Column name MaxUsers

I need a dax measure that subtracts MaxUsers from NumOfDevices in the matching TimeGenerated


let
    // Define the start and end times
    StartDateTime = DateTime.LocalNow() - #duration(30, 0, 0, 0), // 30 days ago
    RoundedStartDateTime = DateTime.From(DateTime.ToText(StartDateTime, "yyyy-MM-dd HH:00:00")), // Round down to the nearest hour
    EndDateTime = DateTime.LocalNow(), // Current datetime

    // Calculate the total number of 30-Hour increments
    DurationInMinutes = Duration.TotalMinutes(EndDateTime - RoundedStartDateTime),
    NumberOfIncrements = Number.RoundDown(DurationInMinutes / 60),

    // Generate the list of times
    TimeList = List.Transform({0..NumberOfIncrements}, each RoundedStartDateTime + #duration(0, 0, _ * 60, 0)),

    // Convert the list to a table
    TimeTable = Table.FromList(TimeList, Splitter.SplitByNothing(), {"TimeGenerated"}),

    // Set the column type
    TypedTable = Table.TransformColumnTypes(TimeTable, {{"TimeGenerated", type datetime}}),

    // Add Date and Time columns
    #"Added Date Column" = Table.AddColumn(TypedTable, "Date", each DateTime.Date([TimeGenerated]), type date),
    #"Added Time Column" = Table.AddColumn(#"Added Date Column", "Time", each DateTime.Time([TimeGenerated]), type time),

    // Add columns for Day of Week (Name and Number)
    #"Inserted Day of Week Name" = Table.AddColumn(#"Added Time Column", "Day of Week Name", each Date.ToText(DateTime.Date([TimeGenerated]), "dddd"), type text),
    #"Inserted Day of Week Number" = Table.AddColumn(#"Inserted Day of Week Name", "Day of Week Number", each Date.DayOfWeek(DateTime.Date([TimeGenerated]), Day.Monday) + 1, Int64.Type),

    // Add column for Start of Week (starting from Monday)
    #"Inserted Start of Week" = Table.AddColumn(#"Inserted Day of Week Number", "Start of Week", each Date.StartOfWeek(DateTime.Date([TimeGenerated]), Day.Monday), type date),

    // Add columns for Month Name
    #"Inserted Month Name" = Table.AddColumn(#"Inserted Start of Week", "Month Name", each Date.MonthName(DateTime.Date([TimeGenerated])), type text),

    // Add column for Day of Month
    #"Inserted Day of Month" = Table.AddColumn(#"Inserted Month Name", "Day of Month", each Date.Day(DateTime.Date([TimeGenerated])), Int64.Type),

    // Add column for Is Weekday (True if Monday-Friday, False otherwise)
    #"Inserted Is Weekday" = Table.AddColumn(#"Inserted Day of Month", "Is Weekday", each if Date.DayOfWeek(DateTime.Date([TimeGenerated]), Day.Monday) < 5 then true else false, type logical),

    // Add column for Is Weekend (True if Saturday or Sunday, False otherwise)
    #"Inserted Is Weekend" = Table.AddColumn(#"Inserted Is Weekday", "Is Weekend", each not [Is Weekday], type logical),

    // Add column for Relative Day (from today, 0 = today, -1 = yesterday, etc.)
    #"Inserted Relative Day" = Table.AddColumn(#"Inserted Is Weekend", "Relative Day", each Duration.Days(Duration.From(DateTime.Date([TimeGenerated]) - DateTime.Date(EndDateTime))), Int64.Type),

    // Add column for Week of the Month
    #"Inserted Week of Month" = Table.AddColumn(#"Inserted Relative Day", "Week of Month", 
        each Number.RoundUp((Date.Day(DateTime.Date([TimeGenerated])) + Date.DayOfWeek(Date.StartOfMonth(DateTime.Date([TimeGenerated])), Day.Monday)) / 7), Int64.Type),

    // Reorder columns for better readability
    #"Reordered Columns" = Table.ReorderColumns(#"Inserted Week of Month", 
        {"TimeGenerated", "Date", "Time", "Day of Week Name", "Day of Week Number", "Start of Week", 
         "Month Name", "Day of Month", "Week of Month", "Is Weekday", "Is Weekend", "Relative Day"})
in
    #"Reordered Columns"







let
    // Define the start and end times
    StartDateTime = DateTime.LocalNow() - #duration(30, 0, 0, 0), // 30 days ago
    RoundedStartDateTime = DateTime.From(DateTime.ToText(StartDateTime, "yyyy-MM-dd HH:00:00")), // Round down to the nearest hour
    EndDateTime = DateTime.LocalNow(), // Current datetime

    // Calculate the total number of 30-Hour increments
    DurationInMinutes = Duration.TotalMinutes(EndDateTime - RoundedStartDateTime),
    NumberOfIncrements = Number.RoundDown(DurationInMinutes / 60),

    // Generate the list of times
    TimeList = List.Transform({0..NumberOfIncrements}, each RoundedStartDateTime + #duration(0, 0, _ * 60, 0)),

    // Convert the list to a table
    TimeTable = Table.FromList(TimeList, Splitter.SplitByNothing(), {"TimeGenerated"}),

    // Set the column type
    TypedTable = Table.TransformColumnTypes(TimeTable, {{"TimeGenerated", type datetime}}),

    // Add columns for Day of Week (Name and Number)
    #"Inserted Day of Week Name" = Table.AddColumn(TypedTable, "Day of Week Name", each Date.ToText(DateTime.Date([TimeGenerated]), "dddd"), type text),
    #"Inserted Day of Week Number" = Table.AddColumn(#"Inserted Day of Week Name", "Day of Week Number", each Date.DayOfWeek(DateTime.Date([TimeGenerated]), Day.Monday) + 1, Int64.Type),

    // Add column for Start of Week (starting from Monday)
    #"Inserted Start of Week" = Table.AddColumn(#"Inserted Day of Week Number", "Start of Week", each Date.StartOfWeek(DateTime.Date([TimeGenerated]), Day.Monday), type date),

    // Add columns for Month Name
    #"Inserted Month Name" = Table.AddColumn(#"Inserted Start of Week", "Month Name", each Date.MonthName(DateTime.Date([TimeGenerated])), type text),

    // Add column for Day of Month
    #"Inserted Day of Month" = Table.AddColumn(#"Inserted Month Name", "Day of Month", each Date.Day(DateTime.Date([TimeGenerated])), Int64.Type),

    // Add column for Is Weekday (True if Monday-Friday, False otherwise)
    #"Inserted Is Weekday" = Table.AddColumn(#"Inserted Day of Month", "Is Weekday", each if Date.DayOfWeek(DateTime.Date([TimeGenerated]), Day.Monday) < 5 then true else false, type logical),

    // Add column for Is Weekend (True if Saturday or Sunday, False otherwise)
    #"Inserted Is Weekend" = Table.AddColumn(#"Inserted Is Weekday", "Is Weekend", each not [Is Weekday], type logical),

    // Add column for Relative Day (from today, 0 = today, -1 = yesterday, etc.)
    #"Inserted Relative Day" = Table.AddColumn(#"Inserted Is Weekend", "Relative Day", each Duration.Days(Duration.From(DateTime.Date([TimeGenerated]) - DateTime.Date(EndDateTime))), Int64.Type),

    // Add column for Week of the Month
    #"Inserted Week of Month" = Table.AddColumn(#"Inserted Relative Day", "Week of Month", 
        each Number.RoundUp((Date.Day(DateTime.Date([TimeGenerated])) + Date.DayOfWeek(Date.StartOfMonth(DateTime.Date([TimeGenerated])), Day.Monday)) / 7), Int64.Type),

    // Reorder columns for better readability
    #"Reordered Columns" = Table.ReorderColumns(#"Inserted Week of Month", 
        {"TimeGenerated", "Day of Week Name", "Day of Week Number", "Start of Week", 
         "Month Name", "Day of Month", "Week of Month", "Is Weekday", "Is Weekend", "Relative Day"})
in
    #"Reordered Columns"



let
    // Set the start date to 365 days ago and the end date to today
    StartDate = Date.AddDays(DateTime.Date(DateTime.LocalNow()), -365), 
    EndDate = DateTime.Date(DateTime.LocalNow()), 
    
    // Generate a list of dates from the StartDate to EndDate
    DatesList = List.Dates(StartDate, Duration.Days(EndDate - StartDate) + 1, #duration(1,0,0,0)),
    
    // Convert the list to a table
    #"Converted to Table" = Table.FromList(DatesList, Splitter.SplitByNothing(), {"Date"}, null, ExtraValues.Error),
    
    // Change column type to date
    #"Changed Type" = Table.TransformColumnTypes(#"Converted to Table", {{"Date", type date}}),
    
    // Add columns for Day of Week (Name and Number)
    #"Inserted Day of Week Name" = Table.AddColumn(#"Changed Type", "Day of Week Name", each Date.ToText([Date], "dddd"), type text),
    #"Inserted Day of Week Number" = Table.AddColumn(#"Inserted Day of Week Name", "Day of Week Number", each Date.DayOfWeek([Date], Day.Monday) + 1, Int64.Type),
    
    // Add column for Start of Week (starting from Monday)
    #"Inserted Start of Week" = Table.AddColumn(#"Inserted Day of Week Number", "Start of Week", each Date.StartOfWeek([Date], Day.Monday), type date),
    
    // Add columns for Month Name
    #"Inserted Month Name" = Table.AddColumn(#"Inserted Start of Week", "Month Name", each Date.MonthName([Date]), type text),
    
    // Add column for Day of Month
    #"Inserted Day of Month" = Table.AddColumn(#"Inserted Month Name", "Day of Month", each Date.Day([Date]), Int64.Type),
    
    // Add column for Is Weekday (True if Monday-Friday, False otherwise)
    #"Inserted Is Weekday" = Table.AddColumn(#"Inserted Day of Month", "Is Weekday", each if Date.DayOfWeek([Date], Day.Monday) < 5 then true else false, type logical),
    
    // Add column for Is Weekend (True if Saturday or Sunday, False otherwise)
    #"Inserted Is Weekend" = Table.AddColumn(#"Inserted Is Weekday", "Is Weekend", each not [Is Weekday], type logical),
    
    // Add column for Relative Day (from today, 0 = today, -1 = yesterday, etc.)
    #"Inserted Relative Day" = Table.AddColumn(#"Inserted Is Weekend", "Relative Day", each Duration.Days(Duration.From([Date] - EndDate)), Int64.Type),
    
    // Add column for Week of the Month
    #"Inserted Week of Month" = Table.AddColumn(#"Inserted Relative Day", "Week of Month", 
        each Number.RoundUp((Date.Day([Date]) + Date.DayOfWeek(Date.StartOfMonth([Date]), Day.Monday)) / 7), Int64.Type),
    
    // Reorder columns for better readability
    #"Reordered Columns" = Table.ReorderColumns(#"Inserted Week of Month", 
        {"Date", "Day of Week Name", "Day of Week Number", "Start of Week", 
         "Month Name", "Day of Month", "Week of Month", "Is Weekday", "Is Weekend", "Relative Day"})
in
    #"Reordered Columns"

In addition to TimeGenerated below can you add the same columns from the M-Qery above to the one below?

let
    // Define the start and end times
    StartDateTime = DateTime.LocalNow() - #duration(30, 0, 0, 0), // 30 days ago
    RoundedStartDateTime = DateTime.From(DateTime.ToText(StartDateTime, "yyyy-MM-dd HH:00:00")), // Round down to the nearest hour
    EndDateTime = DateTime.LocalNow(), // Current datetime

    // Calculate the total number of 30-Hour increments
    DurationInMinutes = Duration.TotalMinutes(EndDateTime - RoundedStartDateTime),
    NumberOfIncrements = Number.RoundDown(DurationInMinutes / 60),

    // Generate the list of times
    TimeList = List.Transform({0..NumberOfIncrements}, each RoundedStartDateTime + #duration(0, 0, _ * 60, 0)),

    // Convert the list to a table
    TimeTable = Table.FromList(TimeList, Splitter.SplitByNothing(), {"TimeGenerated"}),

    // Set the column type
    TypedTable = Table.TransformColumnTypes(TimeTable, {{"TimeGenerated", type datetime}})
in
    TypedTable








#Define Temporary background Colour
$R=255

$G=255

$B=255

$code = @"
using System;
using System.Drawing;
using System.Runtime.InteropServices;
using Microsoft.Win32;
 
 
namespace CurrentUser
{
    public class Desktop
    {
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        private static extern int SystemParametersInfo(int uAction, int uParm, string lpvParam, int fuWinIni);
        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern int SetSysColors(int cElements, int[] lpaElements, int[] lpRgbValues);
        public const int UpdateIniFile = 0x01;
        public const int SendWinIniChange = 0x02;
        public const int SetDesktopBackground = 0x0014;
        public const int COLOR_DESKTOP = 1;
        public int[] first = {COLOR_DESKTOP};
 
 
        public static void RemoveWallPaper()
        {
            SystemParametersInfo( SetDesktopBackground, 0, "", SendWinIniChange | UpdateIniFile );
            RegistryKey regkey = Registry.CurrentUser.OpenSubKey("Control Panel\\Desktop", true);
            regkey.SetValue(@"WallPaper", 0);
            regkey.Close();
        }
 
        public static void SetBackground(byte r, byte g, byte b)
        {
            int[] elements = {COLOR_DESKTOP};
 
            RemoveWallPaper();
            System.Drawing.Color color = System.Drawing.Color.FromArgb(r,g,b);
            int[] colors = { System.Drawing.ColorTranslator.ToWin32(color) };
 
            SetSysColors(elements.Length, elements, colors);
            RegistryKey key = Registry.CurrentUser.OpenSubKey("Control Panel\\Colors", true);
            key.SetValue(@"Background", string.Format("{0} {1} {2}", color.R, color.G, color.B));
            key.Close();
        }
    }
}
 
"@
try
{
    Add-Type -TypeDefinition $code -ReferencedAssemblies System.Drawing.dll 
}catch{
    # An error is thrown if the type [CurrentUser.Desktop] is already created
    # so we ignore it.
}
finally
{
    [CurrentUser.Desktop]::SetBackground($R, $G, $B)
}

Function Set-WallPaper {
 
<#
 
    .SYNOPSIS
    Applies a specified wallpaper to the current user's desktop
    
    .PARAMETER Image
    Provide the exact path to the image
 
    .PARAMETER Style
    Provide wallpaper style (Example: Fill, Fit, Stretch, Tile, Center, or Span)
  
    .EXAMPLE
    Set-WallPaper -Image "C:\Wallpaper\Default.jpg"
    Set-WallPaper -Image "C:\Wallpaper\Background.jpg" -Style Fit
  
#>
 
param (
    [parameter(Mandatory=$True)]
    # Provide path to image
    [string]$Image,
    # Provide wallpaper style that you would like applied
    [parameter(Mandatory=$False)]
    [ValidateSet('Fill', 'Fit', 'Stretch', 'Tile', 'Center', 'Span')]
    [string]$Style
)
 
$WallpaperStyle = Switch ($Style) {
  
    "Fill" {"10"}
    "Fit" {"6"}
    "Stretch" {"2"}
    "Tile" {"0"}
    "Center" {"0"}
    "Span" {"22"}
  
}
 
If($Style -eq "Tile") {
 
    New-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name WallpaperStyle -PropertyType String -Value $WallpaperStyle -Force
    New-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name TileWallpaper -PropertyType String -Value 1 -Force
 
}
Else {
 
    New-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name WallpaperStyle -PropertyType String -Value $WallpaperStyle -Force
    New-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name TileWallpaper -PropertyType String -Value 0 -Force
 
}
 
Add-Type -TypeDefinition @" 
using System; 
using System.Runtime.InteropServices;
  
public class Params
{ 
    [DllImport("User32.dll",CharSet=CharSet.Unicode)] 
    public static extern int SystemParametersInfo (Int32 uAction, 
                                                   Int32 uParam, 
                                                   String lpvParam, 
                                                   Int32 fuWinIni);
}
"@ 
  
    $SPI_SETDESKWALLPAPER = 0x0014
    $UpdateIniFile = 0x01
    $SendChangeEvent = 0x02
  
    $fWinIni = $UpdateIniFile -bor $SendChangeEvent
  
    $ret = [Params]::SystemParametersInfo($SPI_SETDESKWALLPAPER, 0, $Image, $fWinIni)
}
 
Set-WallPaper -Image "C:\Windows\Web\Wallpaper\Windows\AAMWallpaper.jpg" -Style Fit





let
    // Define the start and end times
    StartDateTime = DateTime.LocalNow() - #duration(30, 0, 0, 0), // 30 days ago
    RoundedStartDateTime = DateTime.From(DateTime.ToText(StartDateTime, "yyyy-MM-dd HH:00:00")), // Round down to the nearest hour
    EndDateTime = DateTime.LocalNow(), // Current datetime

    // Calculate the total number of 15-minute increments
    DurationInMinutes = Duration.TotalMinutes(EndDateTime - RoundedStartDateTime),
    NumberOfIncrements = Number.RoundDown(DurationInMinutes / 15),

    // Generate the list of times
    TimeList = List.Transform({0..NumberOfIncrements}, each RoundedStartDateTime + #duration(0, 0, _ * 15, 0)),

    // Convert the list to a table
    TimeTable = Table.FromList(TimeList, Splitter.SplitByNothing(), {"TimeGenerated"}),

    // Set the column type
    TypedTable = Table.TransformColumnTypes(TimeTable, {{"TimeGenerated", type datetime}})
in
    TypedTable


Expression.Error: The import Date.Hour matches no exports. Did you miss a module reference?

let
    // Define the start and end times
    StartDateTime = DateTime.LocalNow() - #duration(30, 0, 0, 0), // 30 days ago
    RoundedStartDateTime = #datetime(Date.Year(StartDateTime), Date.Month(StartDateTime), Date.Day(StartDateTime), Date.Hour(StartDateTime), 0, 0), // Round down to the nearest hour
    EndDateTime = DateTime.LocalNow(), // Current datetime

    // Calculate the total number of 15-minute increments
    DurationInMinutes = Duration.TotalMinutes(EndDateTime - RoundedStartDateTime),
    NumberOfIncrements = Number.RoundDown(DurationInMinutes / 15),

    // Generate the list of times
    TimeList = List.Transform({0..NumberOfIncrements}, each RoundedStartDateTime + #duration(0, 0, _ * 15, 0)),

    // Convert the list to a table
    TimeTable = Table.FromList(TimeList, Splitter.SplitByNothing(), {"TimeGenerated"}),

    // Set the column type
    TypedTable = Table.TransformColumnTypes(TimeTable, {{"TimeGenerated", type datetime}})
in
    TypedTable


DataFormat.Error: We couldn't parse the input provided as a DateTime value.
Details:
    18/12/2024 14:56:00:00

let
    // Define the start and end times
    StartDateTime = DateTime.From(DateTime.FixedLocalNow() - #duration(30, 0, 0, 0)), // 30 days ago
    RoundedStartDateTime = DateTime.From(DateTime.FromText(Text.Start(Text.From(StartDateTime), 17) & "00:00")), // Round down to the nearest hour
    EndDateTime = DateTime.From(DateTime.FixedLocalNow()), // Current datetime

    // Calculate the total number of 15-minute increments
    DurationInMinutes = Duration.TotalMinutes(EndDateTime - RoundedStartDateTime),
    NumberOfIncrements = Number.RoundDown(DurationInMinutes / 15),

    // Generate the list of times
    TimeList = List.Transform({0..NumberOfIncrements}, each RoundedStartDateTime + #duration(0, 0, _ * 15, 0)),

    // Convert the list to a table
    TimeTable = Table.FromList(TimeList, Splitter.SplitByNothing(), {"TimeGenerated"}),

    // Set the column type
    TypedTable = Table.TransformColumnTypes(TimeTable, {{"TimeGenerated", type datetime}})
in
    TypedTable


let
    // Define the start and end times
    StartDateTime = DateTime.From(DateTime.FixedLocalNow() - #duration(30, 0, 0, 0)), // 30 days ago
    RoundedStartDateTime = DateTime.From(DateTime.FromText(Text.Start(Text.From(StartDateTime), 17) & "00:00")), // Round down to the nearest hour
    EndDateTime = DateTime.From(DateTime.FixedLocalNow()), // Current datetime

    // Calculate the total number of 15-minute increments
    DurationInMinutes = Duration.TotalMinutes(EndDateTime - RoundedStartDateTime),
    NumberOfIncrements = Number.RoundDown(DurationInMinutes / 15),

    // Generate the list of times
    TimeList = List.Transform({0..NumberOfIncrements}, each RoundedStartDateTime + #duration(0, 0, _ * 15, 0)),

    // Convert the list to a table
    TimeTable = Table.FromList(TimeList, Splitter.SplitByNothing(), {"TimeGenerated"}),

    // Set the column type
    TypedTable = Table.TransformColumnTypes(TimeTable, {{"TimeGenerated", type datetime}})
in
    TypedTable


let
    // Define the start and end times
    StartDateTime = DateTime.LocalNow() - #duration(30, 0, 0, 0), // 30 days ago
    EndDateTime = DateTime.LocalNow(), // Now
    
    // Calculate the total number of 15-minute increments
    DurationInMinutes = Duration.TotalMinutes(EndDateTime - StartDateTime),
    NumberOfIncrements = Number.RoundDown(DurationInMinutes / 15),
    
    // Generate the list of times
    TimeList = List.Transform({0..NumberOfIncrements}, each StartDateTime + #duration(0, 0, _ * 15, 0)),
    
    // Convert the list to a table
    TimeTable = Table.FromList(TimeList, Splitter.SplitByNothing(), {"TimeGenerated"}),

    // Set the column type
    TypedTable = Table.TransformColumnTypes(TimeTable, {{"TimeGenerated", type datetime}})
in
    TypedTable



1/8/2025 12:30:00 AM
1/8/2025 12:45:00 AM
1/8/2025 1:00:00 AM
1/8/2025 1:15:00 AM
1/8/2025 1:30:00 AM
1/8/2025 1:45:00 AM
1/8/2025 2:00:00 AM
1/8/2025 2:15:00 AM
1/8/2025 2:30:00 AM
1/8/2025 2:45:00 AM
1/8/2025 3:00:00 AM
1/8/2025 3:15:00 AM
1/8/2025 3:30:00 AM
1/8/2025 3:45:00 AM
1/8/2025 4:00:00 AM
1/8/2025 4:15:00 AM
1/8/2025 4:30:00 AM
1/8/2025 4:45:00 AM
1/8/2025 5:00:00 AM
1/8/2025 5:15:00 AM
1/8/2025 5:30:00 AM
1/8/2025 5:45:00 AM
1/8/2025 6:00:00 AM
1/8/2025 6:15:00 AM
1/8/2025 6:30:00 AM
1/8/2025 6:45:00 AM
1/8/2025 7:00:00 AM
1/8/2025 7:15:00 AM
1/8/2025 7:30:00 AM
1/8/2025 7:45:00 AM
1/8/2025 8:00:00 AM
1/8/2025 8:15:00 AM
1/8/2025 8:30:00 AM
1/8/2025 8:45:00 AM
1/8/2025 9:00:00 AM
1/8/2025 9:15:00 AM
1/8/2025 9:30:00 AM
1/8/2025 9:45:00 AM
1/8/2025 10:00:00 AM
1/8/2025 10:15:00 AM
1/8/2025 10:30:00 AM
1/8/2025 10:45:00 AM
1/8/2025 11:00:00 AM
1/8/2025 11:15:00 AM
1/8/2025 11:30:00 AM
1/8/2025 11:45:00 AM
1/8/2025 12:00:00 PM
1/8/2025 12:15:00 PM
1/8/2025 12:30:00 PM
1/8/2025 12:45:00 PM
1/8/2025 1:00:00 PM
1/8/2025 1:15:00 PM
1/8/2025 1:30:00 PM
1/8/2025 1:45:00 PM
1/8/2025 2:00:00 PM
1/8/2025 2:15:00 PM
1/8/2025 2:30:00 PM
1/8/2025 2:45:00 PM
1/8/2025 3:00:00 PM
1/8/2025 3:15:00 PM
1/8/2025 3:30:00 PM
1/8/2025 3:45:00 PM
1/8/2025 4:00:00 PM
1/8/2025 4:15:00 PM
1/8/2025 4:30:00 PM
1/8/2025 4:45:00 PM
1/8/2025 5:00:00 PM
1/8/2025 5:15:00 PM
1/8/2025 5:30:00 PM
1/8/2025 5:45:00 PM
1/8/2025 6:00:00 PM
1/8/2025 6:15:00 PM
1/8/2025 6:30:00 PM
1/8/2025 6:45:00 PM
1/8/2025 7:00:00 PM
1/8/2025 7:15:00 PM
1/8/2025 7:30:00 PM
1/8/2025 7:45:00 PM
1/8/2025 8:00:00 PM
1/8/2025 8:15:00 PM
1/8/2025 8:30:00 PM
1/8/2025 8:45:00 PM
1/8/2025 9:00:00 PM
1/8/2025 9:15:00 PM
1/8/2025 9:30:00 PM
1/8/2025 9:45:00 PM
1/8/2025 10:00:00 PM
1/8/2025 10:15:00 PM
1/8/2025 10:30:00 PM
1/8/2025 10:45:00 PM
1/8/2025 11:00:00 PM
1/8/2025 11:15:00 PM
1/8/2025 11:30:00 PM
1/8/2025 11:45:00 PM
1/9/2025 12:00:00 AM
1/9/2025 12:15:00 AM
1/9/2025 12:30:00 AM
1/9/2025 12:45:00 AM
1/9/2025 1:00:00 AM
1/9/2025 1:15:00 AM
1/9/2025 1:30:00 AM
1/9/2025 1:45:00 AM
1/9/2025 2:00:00 AM
1/9/2025 2:15:00 AM
1/9/2025 2:30:00 AM
1/9/2025 2:45:00 AM
1/9/2025 3:00:00 AM
1/9/2025 3:15:00 AM
1/9/2025 3:30:00 AM
1/9/2025 3:45:00 AM
1/9/2025 4:00:00 AM
1/9/2025 4:15:00 AM
1/9/2025 4:30:00 AM
1/9/2025 4:45:00 AM
1/9/2025 5:00:00 AM
1/9/2025 5:15:00 AM



Heartbeat
| distinct TimeGenerated

WVDManagement
| where Route == "ArmHostPool::GetAllUserSessions"
| extend SplitAll = split(_ResourceId, '/')
| extend HostPool = SplitAll[8]
| where HostPool contains "prd" or HostPool contains "uat" or HostPool contains "prod"
| summarize ObjectsTotals = avg(ObjectsFetched) by tostring(HostPool), bin(TimeGenerated, 30m)



let AnalyticsQuery =
let Source = Json.Document(Web.Contents("https://api.loganalytics.io/v1/workspaces/ce4e1e84-3765-4cfe-ac40-5de8d7633df4/query", 
[Query=[#"query"="WVDManagement
| where Route == ""ArmHostPool::GetAllUserSessions""
| extend SplitAll=split(_ResourceId, '/')
| extend HostPool=SplitAll[8]
| where HostPool contains ""prd"" or HostPool contains ""uat"" or HostPool contains ""prod""
| summarize ObjectsTotals = avg(ObjectsFetched) by tostring(HostPool), bin(TimeGenerated, 30m)
",#"x-ms-app"="OmsAnalyticsPBI",#"timespan"="2025-01-01T15:02:05.000Z/2025-01-15T15:02:05.000Z",#"prefer"="ai.response-thinning=true"],Timeout=#duration(0,0,4,0)])),
TypeMap = #table(
{ "AnalyticsTypes", "Type" }, 
{ 
{ "string",   Text.Type },
{ "int",      Int32.Type },
{ "long",     Int64.Type },
{ "real",     Double.Type },
{ "timespan", Duration.Type },
{ "datetime", DateTimeZone.Type },
{ "bool",     Logical.Type },
{ "guid",     Text.Type },
{ "dynamic",  Text.Type }
}),
DataTable = Source[tables]{0},
Columns = Table.FromRecords(DataTable[columns]),
ColumnsWithType = Table.Join(Columns, {"type"}, TypeMap , {"AnalyticsTypes"}),
Rows = Table.FromRows(DataTable[rows], Columns[name]), 
Table = Table.TransformColumnTypes(Rows, Table.ToList(ColumnsWithType, (c) => { c{0}, c{3}}))
in
Table
in AnalyticsQuery




Heartbeat
| where TimeGenerated >= ago(30d)
| extend 
    Hostpool = case(
        Computer startswith "M09PSSPG", "CUS_PRD_SSPersistent",
        Computer startswith "M13PMSNI", "EAS_PRD_MSPooled",
        Computer startswith "M13PSSPI", "EAS_PRD_SSPersistent",
        Computer startswith "M06PSSPG", "EUS2_PRD_SSPersistent",
        Computer startswith "M06USSPG", "EUS2_UAT_SSPersistent",
        Computer startswith "M01DDEVT", "NEU_DEV_SSPersistent",
        Computer startswith "M01DVLDT", "NEU_DEV_SSPersistent",
        Computer startswith "M01NACRI", "NEU_NPA_CRIMS_RMPooled",
        Computer startswith "M01NBCRI", "NEU_NPB_CRIMS_RMPooled",
        Computer startswith "M01OHCRI", "NEU_OAT_High_CRIMS_RMPooled",
        Computer startswith "M01OLCRI", "NEU_OAT_Low_CRIMS_RMPooled",
        Computer startswith "M01OMCRI", "NEU_OAT_Med_CRIMS_RMPooled",
        Computer startswith "M01PADM", "NEU_PRD_ADM_RMPooled",
        Computer startswith "M01PHCRI", "NEU_PRD_High_CRIMS_RMPooled",
        Computer startswith "M01PLCRI", "NEU_PRD_Low_CRIMS_RMPooled",
        Computer startswith "M01PMCRI", "NEU_PRD_Med_CRIMS_RMPooled",
        Computer startswith "M01PMSNI", "NEU_PRD_MSPooled",
        Computer startswith "M01PSSPI", "NEU_PRD_SSPersistent",
        Computer startswith "M01PQNT", "NEU_Prod_Quantum_RMPooled",
        Computer startswith "M01TMSNI", "NEU_TST_MSPooled",
        Computer startswith "M01TSSPI", "NEU_TST_SSPersistent",
        Computer startswith "M01UMSNI", "NEU_UAT_MULTISESSION",
        Computer startswith "M01UQNT", "NEU_UAT_Quantum_RMPooled",
        Computer startswith "M01USSPI", "NEU_UAT_SSPersistent",
        Computer startswith "M14PMSNI", "SEA_PRD_MSPooled",
        Computer startswith "M14PSSPI", "SEA_PRD_SSPersistent",
        Computer startswith "M14UMSNI", "SEA_UAT_MSPooled",
        Computer startswith "M14USSPI", "SEA_UAT_SSPersistent",
        Computer startswith "M04PHCRI", "WEU_PRD_High_CRIMS_RMPooled",
        Computer startswith "M04PLCRI", "WEU_PRD_Low_CRIMS_RMPooled",
        Computer startswith "M04PMCRI", "WEU_PRD_Med_CRIMS_RMPooled",
        Computer startswith "M04PMSNI", "WEU_PRD_MSPooled",
        Computer startswith "M04PSSPI", "WEU_PRD_SSPersistent",
        "Other"
    )
| summarize Count = dcount(Computer) by bin(TimeGenerated, 1h), Hostpool
| project TimeGenerated, HostPoolName = Hostpool, NumOfDevices = Count
| order by TimeGenerated desc

Heartbeat
| where TimeGenerated >= ago(30d)
| extend 
    Hostpool = case(
        Computer startswith "M09PSSPG", "CUS_PRD_SSPersistent",
        Computer startswith "M13PMSNI", "EAS_PRD_MSPooled",
        Computer startswith "M13PSSPI", "EAS_PRD_SSPersistent",
        Computer startswith "M06PSSPG", "EUS2_PRD_SSPersistent",
        Computer startswith "M06USSPG", "EUS2_UAT_SSPersistent",
        Computer startswith "M01DDEVT", "NEU_DEV_SSPersistent",
        Computer startswith "M01DVLDT", "NEU_DEV_SSPersistent",
        Computer startswith "M01NACRI", "NEU_NPA_CRIMS_RMPooled",
        Computer startswith "M01NBCRI", "NEU_NPB_CRIMS_RMPooled",
        Computer startswith "M01OHCRI", "NEU_OAT_High_CRIMS_RMPooled",
        Computer startswith "M01OLCRI", "NEU_OAT_Low_CRIMS_RMPooled",
        Computer startswith "M01OMCRI", "NEU_OAT_Med_CRIMS_RMPooled",
        Computer startswith "M01PADM", "NEU_PRD_ADM_RMPooled",
        Computer startswith "M01PHCRI", "NEU_PRD_High_CRIMS_RMPooled",
        Computer startswith "M01PLCRI", "NEU_PRD_Low_CRIMS_RMPooled",
        Computer startswith "M01PMCRI", "NEU_PRD_Med_CRIMS_RMPooled",
        Computer startswith "M01PMSNI", "NEU_PRD_MSPooled",
        Computer startswith "M01PSSPI", "NEU_PRD_SSPersistent",
        Computer startswith "M01PQNT", "NEU_Prod_Quantum_RMPooled",
        Computer startswith "M01TMSNI", "NEU_TST_MSPooled",
        Computer startswith "M01TSSPI", "NEU_TST_SSPersistent",
        Computer startswith "M01UMSNI", "NEU_UAT_MULTISESSION",
        Computer startswith "M01UQNT", "NEU_UAT_Quantum_RMPooled",
        Computer startswith "M01USSPI", "NEU_UAT_SSPersistent",
        Computer startswith "M14PMSNI", "SEA_PRD_MSPooled",
        Computer startswith "M14PSSPI", "SEA_PRD_SSPersistent",
        Computer startswith "M14UMSNI", "SEA_UAT_MSPooled",
        Computer startswith "M14USSPI", "SEA_UAT_SSPersistent",
        Computer startswith "M04PHCRI", "WEU_PRD_High_CRIMS_RMPooled",
        Computer startswith "M04PLCRI", "WEU_PRD_Low_CRIMS_RMPooled",
        Computer startswith "M04PMCRI", "WEU_PRD_Med_CRIMS_RMPooled",
        Computer startswith "M04PMSNI", "WEU_PRD_MSPooled",
        Computer startswith "M04PSSPI", "WEU_PRD_SSPersistent",
        "Other"
    )
| summarize
    CUS_PRD_SSPersistent = dcountif(Computer, Hostpool == "CUS_PRD_SSPersistent"),
    EAS_PRD_MSPooled = dcountif(Computer, Hostpool == "EAS_PRD_MSPooled"),
    EAS_PRD_SSPersistent = dcountif(Computer, Hostpool == "EAS_PRD_SSPersistent"),
    EUS2_PRD_SSPersistent = dcountif(Computer, Hostpool == "EUS2_PRD_SSPersistent"),
    EUS2_UAT_SSPersistent = dcountif(Computer, Hostpool == "EUS2_UAT_SSPersistent"),
    NEU_DEV_SSPersistent = dcountif(Computer, Hostpool == "NEU_DEV_SSPersistent"),
    NEU_NPA_CRIMS_RMPooled = dcountif(Computer, Hostpool == "NEU_NPA_CRIMS_RMPooled"),
    NEU_NPB_CRIMS_RMPooled = dcountif(Computer, Hostpool == "NEU_NPB_CRIMS_RMPooled"),
    NEU_OAT_High_CRIMS_RMPooled = dcountif(Computer, Hostpool == "NEU_OAT_High_CRIMS_RMPooled"),
    NEU_OAT_Low_CRIMS_RMPooled = dcountif(Computer, Hostpool == "NEU_OAT_Low_CRIMS_RMPooled"),
    NEU_OAT_Med_CRIMS_RMPooled = dcountif(Computer, Hostpool == "NEU_OAT_Med_CRIMS_RMPooled"),
    NEU_PRD_ADM_RMPooled = dcountif(Computer, Hostpool == "NEU_PRD_ADM_RMPooled"),
    NEU_PRD_High_CRIMS_RMPooled = dcountif(Computer, Hostpool == "NEU_PRD_High_CRIMS_RMPooled"),
    NEU_PRD_Low_CRIMS_RMPooled = dcountif(Computer, Hostpool == "NEU_PRD_Low_CRIMS_RMPooled"),
    NEU_PRD_Med_CRIMS_RMPooled = dcountif(Computer, Hostpool == "NEU_PRD_Med_CRIMS_RMPooled"),
    NEU_PRD_MSPooled = dcountif(Computer, Hostpool == "NEU_PRD_MSPooled"),
    NEU_PRD_SSPersistent = dcountif(Computer, Hostpool == "NEU_PRD_SSPersistent"),
    NEU_Prod_Quantum_RMPooled = dcountif(Computer, Hostpool == "NEU_Prod_Quantum_RMPooled"),
    NEU_TST_MSPooled = dcountif(Computer, Hostpool == "NEU_TST_MSPooled"),
    NEU_TST_SSPersistent = dcountif(Computer, Hostpool == "NEU_TST_SSPersistent"),
    NEU_UAT_MULTISESSION = dcountif(Computer, Hostpool == "NEU_UAT_MULTISESSION"),
    NEU_UAT_Quantum_RMPooled = dcountif(Computer, Hostpool == "NEU_UAT_Quantum_RMPooled"),
    NEU_UAT_SSPersistent = dcountif(Computer, Hostpool == "NEU_UAT_SSPersistent"),
    SEA_PRD_MSPooled = dcountif(Computer, Hostpool == "SEA_PRD_MSPooled"),
    SEA_PRD_SSPersistent = dcountif(Computer, Hostpool == "SEA_PRD_SSPersistent"),
    SEA_UAT_MSPooled = dcountif(Computer, Hostpool == "SEA_UAT_MSPooled"),
    SEA_UAT_SSPersistent = dcountif(Computer, Hostpool == "SEA_UAT_SSPersistent"),
    WEU_PRD_High_CRIMS_RMPooled = dcountif(Computer, Hostpool == "WEU_PRD_High_CRIMS_RMPooled"),
    WEU_PRD_Low_CRIMS_RMPooled = dcountif(Computer, Hostpool == "WEU_PRD_Low_CRIMS_RMPooled"),
    WEU_PRD_Med_CRIMS_RMPooled = dcountif(Computer, Hostpool == "WEU_PRD_Med_CRIMS_RMPooled"),
    WEU_PRD_MSPooled = dcountif(Computer, Hostpool == "WEU_PRD_MSPooled"),
    WEU_PRD_SSPersistent = dcountif(Computer, Hostpool == "WEU_PRD_SSPersistent"),
    Others = dcountif(Computer, Hostpool == "Other")
    by bin(TimeGenerated, 1h)
| sort by TimeGenerated desc



let AnalyticsQuery =
let Source = Json.Document(Web.Contents("https://api.loganalytics.io/v1/workspaces/ce4e1e84-3765-4cfe-ac40-5de8d7633df4/query", 
[Query=[#"query"="Heartbeat
| where TimeGenerated >= ago(30d)
| extend 
    Hostpool = case(
        Computer startswith ""M09PSSPG"", ""CUS_PRD_SSPersistent"",
        Computer startswith ""M13PMSNI"", ""EAS_PRD_MSPooled"",
        Computer startswith ""M13PSSPI"", ""EAS_PRD_SSPersistent"",
        Computer startswith ""M06PSSPG"", ""EUS2_PRD_SSPersistent"",
        Computer startswith ""M06USSPG"", ""EUS2_UAT_SSPersistent"",
        Computer startswith ""M01DDEVT"", ""NEU_DEV_SSPersistent"",
        Computer startswith ""M01DVLDT"", ""NEU_DEV_SSPersistent"",
        Computer startswith ""M01NACRI"", ""NEU_NPA_CRIMS_RMPooled"",
        Computer startswith ""M01NBCRI"", ""NEU_NPB_CRIMS_RMPooled"",
        Computer startswith ""M01OHCRI"", ""NEU_OAT_High_CRIMS_RMPooled"",
        Computer startswith ""M01OLCRI"", ""NEU_OAT_Low_CRIMS_RMPooled"",
        Computer startswith ""M01OMCRI"", ""NEU_OAT_Med_CRIMS_RMPooled"",
        Computer startswith ""M01PADM"", ""NEU_PRD_ADM_RMPooled"",
        Computer startswith ""M01PHCRI"", ""NEU_PRD_High_CRIMS_RMPooled"",
        Computer startswith ""M01PLCRI"", ""NEU_PRD_Low_CRIMS_RMPooled"",
        Computer startswith ""M01PMCRI"", ""NEU_PRD_Med_CRIMS_RMPooled"",
        Computer startswith ""M01PMSNI"", ""NEU_PRD_MSPooled"",
        Computer startswith ""M01PSSPI"", ""NEU_PRD_SSPersistent"",
        Computer startswith ""M01PQNT"", ""NEU_Prod_Quantum_RMPooled"",
        Computer startswith ""M01TMSNI"", ""NEU_TST_MSPooled"",
        Computer startswith ""M01TSSPI"", ""NEU_TST_SSPersistent"",
        Computer startswith ""M01UMSNI"", ""NEU_UAT_MULTISESSION"",
        Computer startswith ""M01UQNT"", ""NEU_UAT_Quantum_RMPooled"",
        Computer startswith ""M01USSPI"", ""NEU_UAT_SSPersistent"",
        Computer startswith ""M14PMSNI"", ""SEA_PRD_MSPooled"",
        Computer startswith ""M14PSSPI"", ""SEA_PRD_SSPersistent"",
        Computer startswith ""M14UMSNI"", ""SEA_UAT_MSPooled"",
        Computer startswith ""M14USSPI"", ""SEA_UAT_SSPersistent"",
        Computer startswith ""M04PHCRI"", ""WEU_PRD_High_CRIMS_RMPooled"",
        Computer startswith ""M04PLCRI"", ""WEU_PRD_Low_CRIMS_RMPooled"",
        Computer startswith ""M04PMCRI"", ""WEU_PRD_Med_CRIMS_RMPooled"",
        Computer startswith ""M04PMSNI"", ""WEU_PRD_MSPooled"",
        Computer startswith ""M04PSSPI"", ""WEU_PRD_SSPersistent"",
        ""Other""
    )
| summarize
    CUS_PRD_SSPersistent = dcountif(Computer, Hostpool == ""CUS_PRD_SSPersistent""),
    EAS_PRD_MSPooled = dcountif(Computer, Hostpool == ""EAS_PRD_MSPooled""),
    EAS_PRD_SSPersistent = dcountif(Computer, Hostpool == ""EAS_PRD_SSPersistent""),
    EUS2_PRD_SSPersistent = dcountif(Computer, Hostpool == ""EUS2_PRD_SSPersistent""),
    EUS2_UAT_SSPersistent = dcountif(Computer, Hostpool == ""EUS2_UAT_SSPersistent""),
    NEU_DEV_SSPersistent = dcountif(Computer, Hostpool == ""NEU_DEV_SSPersistent""),
    NEU_NPA_CRIMS_RMPooled = dcountif(Computer, Hostpool == ""NEU_NPA_CRIMS_RMPooled""),
    NEU_NPB_CRIMS_RMPooled = dcountif(Computer, Hostpool == ""NEU_NPB_CRIMS_RMPooled""),
    NEU_OAT_High_CRIMS_RMPooled = dcountif(Computer, Hostpool == ""NEU_OAT_High_CRIMS_RMPooled""),
    NEU_OAT_Low_CRIMS_RMPooled = dcountif(Computer, Hostpool == ""NEU_OAT_Low_CRIMS_RMPooled""),
    NEU_OAT_Med_CRIMS_RMPooled = dcountif(Computer, Hostpool == ""NEU_OAT_Med_CRIMS_RMPooled""),
    NEU_PRD_ADM_RMPooled = dcountif(Computer, Hostpool == ""NEU_PRD_ADM_RMPooled""),
    NEU_PRD_High_CRIMS_RMPooled = dcountif(Computer, Hostpool == ""NEU_PRD_High_CRIMS_RMPooled""),
    NEU_PRD_Low_CRIMS_RMPooled = dcountif(Computer, Hostpool == ""NEU_PRD_Low_CRIMS_RMPooled""),
    NEU_PRD_Med_CRIMS_RMPooled = dcountif(Computer, Hostpool == ""NEU_PRD_Med_CRIMS_RMPooled""),
    NEU_PRD_MSPooled = dcountif(Computer, Hostpool == ""NEU_PRD_MSPooled""),
    NEU_PRD_SSPersistent = dcountif(Computer, Hostpool == ""NEU_PRD_SSPersistent""),
    NEU_Prod_Quantum_RMPooled = dcountif(Computer, Hostpool == ""NEU_Prod_Quantum_RMPooled""),
    NEU_TST_MSPooled = dcountif(Computer, Hostpool == ""NEU_TST_MSPooled""),
    NEU_TST_SSPersistent = dcountif(Computer, Hostpool == ""NEU_TST_SSPersistent""),
    NEU_UAT_MULTISESSION = dcountif(Computer, Hostpool == ""NEU_UAT_MULTISESSION""),
    NEU_UAT_Quantum_RMPooled = dcountif(Computer, Hostpool == ""NEU_UAT_Quantum_RMPooled""),
    NEU_UAT_SSPersistent = dcountif(Computer, Hostpool == ""NEU_UAT_SSPersistent""),
    SEA_PRD_MSPooled = dcountif(Computer, Hostpool == ""SEA_PRD_MSPooled""),
    SEA_PRD_SSPersistent = dcountif(Computer, Hostpool == ""SEA_PRD_SSPersistent""),
    SEA_UAT_MSPooled = dcountif(Computer, Hostpool == ""SEA_UAT_MSPooled""),
    SEA_UAT_SSPersistent = dcountif(Computer, Hostpool == ""SEA_UAT_SSPersistent""),
    WEU_PRD_High_CRIMS_RMPooled = dcountif(Computer, Hostpool == ""WEU_PRD_High_CRIMS_RMPooled""),
    WEU_PRD_Low_CRIMS_RMPooled = dcountif(Computer, Hostpool == ""WEU_PRD_Low_CRIMS_RMPooled""),
    WEU_PRD_Med_CRIMS_RMPooled = dcountif(Computer, Hostpool == ""WEU_PRD_Med_CRIMS_RMPooled""),
    WEU_PRD_MSPooled = dcountif(Computer, Hostpool == ""WEU_PRD_MSPooled""),
    WEU_PRD_SSPersistent = dcountif(Computer, Hostpool == ""WEU_PRD_SSPersistent""),
    Others = dcountif(Computer, Hostpool == ""Other"")
    by bin(TimeGenerated, 1h)
| sort by TimeGenerated desc
",#"x-ms-app"="OmsAnalyticsPBI",#"prefer"="ai.response-thinning=true"],Timeout=#duration(0,0,4,0)])),
TypeMap = #table(
{ "AnalyticsTypes", "Type" }, 
{ 
{ "string",   Text.Type },
{ "int",      Int32.Type },
{ "long",     Int64.Type },
{ "real",     Double.Type },
{ "timespan", Duration.Type },
{ "datetime", DateTimeZone.Type },
{ "bool",     Logical.Type },
{ "guid",     Text.Type },
{ "dynamic",  Text.Type }
}),
DataTable = Source[tables]{0},
Columns = Table.FromRecords(DataTable[columns]),
ColumnsWithType = Table.Join(Columns, {"type"}, TypeMap , {"AnalyticsTypes"}),
Rows = Table.FromRows(DataTable[rows], Columns[name]), 
Table = Table.TransformColumnTypes(Rows, Table.ToList(ColumnsWithType, (c) => { c{0}, c{3}}))
in
Table
in AnalyticsQuery


(device.manufacturer -eq "Microsoft Corporation") and (device.model -eq "Virtual Machine") and (device.operatingSystemSKU -eq "ServerRdsh")





resources
| where ['type'] == "microsoft.compute/virtualmachines"
| extend 
    Hostpool = case(
        name contains "IMG", "Gold Images",
        name startswith "M04PCRIMS", "Crims Images",
        name startswith "M04CRIMS1", "Crims Images",
        name startswith "NMW-", "Nerdio Helper VM",
        "Other"
    )
// Filter by subscription IDs with placeholder comments for each
| where subscriptionId in (
    // Subscription for Production Environment
    "35ad321e-e46e-4c1c-a919-38b0fafbacdd",
    // Subscription for Development and Testing
    "58cb357e-51af-4f62-8982-a8c2b9059362",
    // Subscription for Azure Virtual Desktop (AVD)
    "031f411c-34a6-49ea-a4fe-0be328271783",
    // Subscription for Backup and Recovery
    "6c05505a-2a53-46a1-a54c-d463f021bcdc",
    // Subscription for Networking and Security
    "23bcd608-7846-4fe2-a900-fd2220458d84",
    // Subscription for Shared Services
    "5e0dd0c1-0273-41f3-8a68-63a549fc300e",
    // Subscription for Application Hosting
    "d0440ed0-d440-456e-bf57-e6514e3dab37",
    // Subscription for End User Devices
    "01f03a19-5500-482a-b480-3bb664e0ebc2",
    // Subscription for Legacy Systems
    "8d14bfce-8436-4954-8bbd-e5ffc4eae668"
)
// Exclude VMs with the tag NMW_ARM_HOST_POOL
| where Hostpool == "Other"
| where not(todynamic(tags) has "NMW_ARM_HOST_POOL")




let
    // Set the start date to 365 days ago and the end date to today
    StartDate = Date.AddDays(DateTime.Date(DateTime.LocalNow()), -365), 
    EndDate = DateTime.Date(DateTime.LocalNow()), 
    
    // Generate a list of dates from the StartDate to EndDate
    DatesList = List.Dates(StartDate, Duration.Days(EndDate - StartDate) + 1, #duration(1,0,0,0)),
    
    // Convert the list to a table
    #"Converted to Table" = Table.FromList(DatesList, Splitter.SplitByNothing(), {"Date"}, null, ExtraValues.Error),
    
    // Change column type to date
    #"Changed Type" = Table.TransformColumnTypes(#"Converted to Table", {{"Date", type date}}),
    
    // Add columns for Day of Week (Name and Number)
    #"Inserted Day of Week Name" = Table.AddColumn(#"Changed Type", "Day of Week Name", each Date.ToText([Date], "dddd"), type text),
    #"Inserted Day of Week Number" = Table.AddColumn(#"Inserted Day of Week Name", "Day of Week Number", each Date.DayOfWeek([Date], Day.Monday) + 1, Int64.Type),
    
    // Add column for Start of Week (starting from Monday)
    #"Inserted Start of Week" = Table.AddColumn(#"Inserted Day of Week Number", "Start of Week", each Date.StartOfWeek([Date], Day.Monday), type date),
    
    // Add columns for Month Name
    #"Inserted Month Name" = Table.AddColumn(#"Inserted Start of Week", "Month Name", each Date.MonthName([Date]), type text),
    
    // Add column for Day of Month
    #"Inserted Day of Month" = Table.AddColumn(#"Inserted Month Name", "Day of Month", each Date.Day([Date]), Int64.Type),
    
    // Add column for Is Weekday (True if Monday-Friday, False otherwise)
    #"Inserted Is Weekday" = Table.AddColumn(#"Inserted Day of Month", "Is Weekday", each if Date.DayOfWeek([Date], Day.Monday) < 5 then true else false, type logical),
    
    // Add column for Is Weekend (True if Saturday or Sunday, False otherwise)
    #"Inserted Is Weekend" = Table.AddColumn(#"Inserted Is Weekday", "Is Weekend", each not [Is Weekday], type logical),
    
    // Add column for Relative Day (from today, 0 = today, -1 = yesterday, etc.)
    #"Inserted Relative Day" = Table.AddColumn(#"Inserted Is Weekend", "Relative Day", each Duration.Days(Duration.From([Date] - EndDate)), Int64.Type),
    
    // Add column for Week of the Month
    #"Inserted Week of Month" = Table.AddColumn(#"Inserted Relative Day", "Week of Month", 
        each Number.RoundUp((Date.Day([Date]) + Date.DayOfWeek(Date.StartOfMonth([Date]), Day.Monday)) / 7), Int64.Type),
    
    // Reorder columns for better readability
    #"Reordered Columns" = Table.ReorderColumns(#"Inserted Week of Month", 
        {"Date", "Day of Week Name", "Day of Week Number", "Start of Week", 
         "Month Name", "Day of Month", "Week of Month", "Is Weekday", "Is Weekend", "Relative Day"})
in
    #"Reordered Columns"






let
    // Set the start date to 365 days ago and the end date to today
    StartDate = Date.AddDays(DateTime.Date(DateTime.LocalNow()), -365), 
    EndDate = DateTime.Date(DateTime.LocalNow()), 
    
    // Generate a list of dates from the StartDate to EndDate
    DatesList = List.Dates(StartDate, Duration.Days(EndDate - StartDate) + 1, #duration(1,0,0,0)),
    
    // Convert the list to a table
    #"Converted to Table" = Table.FromList(DatesList, Splitter.SplitByNothing(), {"Date"}, null, ExtraValues.Error),
    
    // Change column type to date
    #"Changed Type" = Table.TransformColumnTypes(#"Converted to Table", {{"Date", type date}}),
    
    // Add columns for Day of Week (Name and Number)
    #"Inserted Day of Week Name" = Table.AddColumn(#"Changed Type", "Day of Week Name", each Date.ToText([Date], "dddd"), type text),
    #"Inserted Day of Week Number" = Table.AddColumn(#"Inserted Day of Week Name", "Day of Week Number", each Date.DayOfWeek([Date], Day.Monday) + 1, Int64.Type),
    
    // Add column for Start of Week (starting from Monday)
    #"Inserted Start of Week" = Table.AddColumn(#"Inserted Day of Week Number", "Start of Week", each Date.StartOfWeek([Date], Day.Monday), type date),
    
    // Add columns for Month Name
    #"Inserted Month Name" = Table.AddColumn(#"Inserted Start of Week", "Month Name", each Date.MonthName([Date]), type text),
    
    // Add column for Day of Month
    #"Inserted Day of Month" = Table.AddColumn(#"Inserted Month Name", "Day of Month", each Date.Day([Date]), Int64.Type),
    
    // Add column for Is Weekday (True if Monday-Friday, False otherwise)
    #"Inserted Is Weekday" = Table.AddColumn(#"Inserted Day of Month", "Is Weekday", each if Date.DayOfWeek([Date], Day.Monday) < 5 then true else false, type logical),
    
    // Add column for Is Weekend (True if Saturday or Sunday, False otherwise)
    #"Inserted Is Weekend" = Table.AddColumn(#"Inserted Is Weekday", "Is Weekend", each not [Is Weekday], type logical),
    
    // Add column for Relative Day (from today, 0 = today, -1 = yesterday, etc.)
    #"Inserted Relative Day" = Table.AddColumn(#"Inserted Is Weekend", "Relative Day", each Duration.Days(Duration.From([Date] - EndDate)), Int64.Type),
    
    // Reorder columns for better readability
    #"Reordered Columns" = Table.ReorderColumns(#"Inserted Relative Day", 
        {"Date", "Day of Week Name", "Day of Week Number", "Start of Week", 
         "Month Name", "Day of Month", "Is Weekday", "Is Weekend", "Relative Day"})
in
    #"Reordered Columns"




resources
| where ['type'] == "microsoft.compute/virtualmachines" 
| extend 
    Hostpool = case(
        name startswith "M09PSSPG", "CUS_PRD_SSPersistent",
        name startswith "M13PMSNI", "EAS_PRD_MSPooled",
        name startswith "M13PSSPI", "EAS_PRD_SSPersistent",
        name startswith "M06PSSPG", "EUS2_PRD_SSPersistent",
        name startswith "M06USSPG", "EUS2_UAT_SSPersistent",
        name startswith "M01DDEVT", "NEU_DEV_SSPersistent",
        name startswith "M01DVLDT", "NEU_DEV_SSPersistent",
        name startswith "M01NACRI", "NEU_NPA_CRIMS_RMPooled",
        name startswith "M01NBCRI", "NEU_NPB_CRIMS_RMPooled",
        name startswith "M01OHCRI", "NEU_OAT_High_CRIMS_RMPooled",
        name startswith "M01OLCRI", "NEU_OAT_Low_CRIMS_RMPooled",
        name startswith "M01OMCRI", "NEU_OAT_Med_CRIMS_RMPooled",
        name startswith "M01PADM", "NEU_PRD_ADM_RMPooled",
        name startswith "M01PHCRI", "NEU_PRD_High_CRIMS_RMPooled",
        name startswith "M01PLCRI", "NEU_PRD_Low_CRIMS_RMPooled",
        name startswith "M01PMCRI", "NEU_PRD_Med_CRIMS_RMPooled",
        name startswith "M01PMSNI", "NEU_PRD_MSPooled",
        name startswith "M01PSSPI", "NEU_PRD_SSPersistent",
        name startswith "M01PQNT", "NEU_Prod_Quantum_RMPooled",
        name startswith "M01TMSNI", "NEU_TST_MSPooled",
        name startswith "M01TSSPI", "NEU_TST_SSPersistent",
        name startswith "M01UMSNI", "NEU_UAT_MULTISESSION",
        name startswith "M01UQNT", "NEU_UAT_Quantum_RMPooled",
        name startswith "M01USSPI", "NEU_UAT_SSPersistent",
        name startswith "M14PMSNI", "SEA_PRD_MSPooled",
        name startswith "M14PSSPI", "SEA_PRD_SSPersistent",
        name startswith "M14UMSNI", "SEA_UAT_MSPooled",
        name startswith "M14USSPI", "SEA_UAT_SSPersistent",
        name startswith "M04PHCRI", "WEU_PRD_High_CRIMS_RMPooled",
        name startswith "M04PLCRI", "WEU_PRD_Low_CRIMS_RMPooled",
        name startswith "M04PMCRI", "WEU_PRD_Med_CRIMS_RMPooled",
        name startswith "M04PMSNI", "WEU_PRD_MSPooled",
        name startswith "M04PSSPI", "WEU_PRD_SSPersistent",
        "Other"
    )
| where Hostpool == "Other"
| where subscriptionId in (
    "35ad321e-e46e-4c1c-a919-38b0fafbacdd",
    "58cb357e-51af-4f62-8982-a8c2b9059362",
    "031f411c-34a6-49ea-a4fe-0be328271783",
    "6c05505a-2a53-46a1-a54c-d463f021bcdc",
    "23bcd608-7846-4fe2-a900-fd2220458d84",
    "5e0dd0c1-0273-41f3-8a68-63a549fc300e",
    "d0440ed0-d440-456e-bf57-e6514e3dab37",
    "01f03a19-5500-482a-b480-3bb664e0ebc2",
    "8d14bfce-8436-4954-8bbd-e5ffc4eae668"
)



# Function to create and apply a registry entry
function Set-RegistryValue {
    param (
        [string]$Path,
        [string]$ValueName,
        [string]$ValueType,
        [string]$ValueData
    )

    try {
        # Ensure the registry path exists
        if (-not (Test-Path $Path)) {
            New-Item -Path $Path -Force | Out-Null
        }

        # Set the registry value
        New-ItemProperty -Path $Path -Name $ValueName -PropertyType $ValueType -Value $ValueData -Force | Out-Null

        Write-Host "Successfully set $ValueName in $Path to $ValueData" -ForegroundColor Green
    } catch {
        Write-Host "Failed to set $ValueName" -ForegroundColor Red
    }
}

# Array of registry entries
$regEntries = @(
    @{
        Path      = "HKCU:\Control Panel\Desktop"
        ValueName = "MenuShowDelay"
        ValueType = "String"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
        ValueName = "SubscribedContent-338393Enabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
        ValueName = "SubscribedContent-353696Enabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
        ValueName = "SubscribedContent-338388Enabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
        ValueName = "SubscribedContent-338389Enabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
        ValueName = "SystemPaneSuggestionsEnabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Search"
        ValueName = "BingSearchEnabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\SearchSettings"
        ValueName = "IsAADCloudSearchEnabled"
        ValueType = "DWord"
        ValueData = "0"
    }
)

# Loop through each registry entry and apply it
foreach ($entry in $regEntries) {
    Set-RegistryValue -Path $entry.Path -ValueName $entry.ValueName -ValueType $entry.ValueType -ValueData $entry.ValueData
}

Write-Host "All registry entries have been successfully applied."


Get-AppxPackage | Where-Object { $_.PackageFullName -like "*MicrosoftWindows.Client.CBS*" } | ForEach-Object { Reset-AppxPackage -Package $_.PackageFullName }


MicrosoftWindows.Client.CBS_1000.22700.1055.0_x64__cw5n1h2txyewy


# Function to create and apply a registry entry
function Set-RegistryValue {
    param (
        [string]$Path,
        [string]$ValueName,
        [string]$ValueType,
        [string]$ValueData
    )

    try {
        # Ensure the registry path exists
        if (-not (Test-Path $Path)) {
            New-Item -Path $Path -Force | Out-Null
        }

        # Set the registry value
        New-ItemProperty -Path $Path -Name $ValueName -PropertyType $ValueType -Value $ValueData -Force | Out-Null

        Write-Host "Successfully set $ValueName in $Path to $ValueData" -ForegroundColor Green
    } catch {
        Write-Host "Failed to set $ValueName" -ForegroundColor Red
    }
}

# Array of registry entries
$regEntries = @(
    @{
        Path      = "HKCU:\Control Panel\Desktop"
        ValueName = "MenuShowDelay"
        ValueType = "String"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
        ValueName = "SubscribedContent-338393Enabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
        ValueName = "SubscribedContent-353696Enabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
        ValueName = "SubscribedContent-338388Enabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
        ValueName = "SubscribedContent-338389Enabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
        ValueName = "SystemPaneSuggestionsEnabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Search"
        ValueName = "BingSearchEnabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\SearchSettings"
        ValueName = "IsAADCloudSearchEnabled"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"
        ValueName = "Start_NotifyNewApps"
        ValueType = "DWord"
        ValueData = "0"
    },
    @{
        Path      = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Feeds"
        ValueName = "ShellFeedsTaskbarViewMode"
        ValueType = "DWord"
        ValueData = "2"
    }
)

# Loop through each registry entry and apply it
foreach ($entry in $regEntries) {
    Set-RegistryValue -Path $entry.Path -ValueName $entry.ValueName -ValueType $entry.ValueType -ValueData $entry.ValueData
}

Write-Host "All registry entries have been successfully applied." -ForegroundColor Cyan




function Save-ZipModules {
    param(
        [array]$Modules = @(), # Array of hashtables or a single hashtable, e.g., @{Name="Module1"; Version="1.0.0"} or @(@{Name="Module1"; Version="1.0.0"})
        [string]$DestinationPath,
        [switch]$DeleteExistingContents
    )

    # Normalize input: If a single hashtable is provided, wrap it in an array
    if ($Modules -isnot [array]) {
        $Modules = @($Modules)
    }

    # Append "\Modules" to the DestinationPath
    $ModulesPath = Join-Path -Path $DestinationPath -ChildPath "Modules"

    # Check if the optional switch is set to delete existing contents
    if ($DeleteExistingContents) {
        if (Test-Path -Path $ModulesPath) {
            # Clear out the existing contents (folders and subfolders)
            Remove-Item -Path $ModulesPath -Recurse -Force
        }
    }

    # Validate that DestinationPath exists, if it does not, create it
    if (-not (Test-Path -Path $ModulesPath)) {
        New-Item -ItemType Directory -Path $ModulesPath | Out-Null
    }

    # Iterate over each module in the Modules array
    foreach ($module in $Modules) {
        $ModuleName = $module.Name
        $ModuleVersion = $module.Version

        # Validate the module exists; if it does, continue
        $foundModule = Find-Module -Name $ModuleName -RequiredVersion $ModuleVersion
        if (-not $foundModule) {
            Write-Error "Module $ModuleName version $ModuleVersion not found in repository."
            continue
        }

        # Save the module to the DestinationPath
        Save-Module -Name $ModuleName -RequiredVersion $ModuleVersion -Path $ModulesPath
    }

    # Create a Zip file of the folders in the DestinationPath\Modules path
    $ZipFilePath = Join-Path -Path $DestinationPath -ChildPath "Modules.zip"
    Compress-Archive -Path (Join-Path -Path $ModulesPath -ChildPath "*") -DestinationPath $ZipFilePath -Force

    Write-Host "Modules have been saved to $ModulesPath and zipped to $ZipFilePath."
}

# Example script to call the function with different inputs

# Single module input
$Module1 = @{Name="Module1"; Version="1.0.0"}
Save-ZipModules -Modules $Module1 -DestinationPath "C:\MyModules" -DeleteExistingContents

# Multiple modules input
$Modules = @(
    @{Name="Module2"; Version="2.0.0"},
    @{Name="Module3"; Version="3.1.0"}
)
Save-ZipModules -Modules $Modules -DestinationPath "C:\MyOtherModules"




# Unblock all files in the PowerShellGet module
Get-ChildItem -Path "C:\Program Files\WindowsPowerShell\Modules\PowerShellGet" -Recurse |
    Unblock-File


Import-Module : Could not load file or assembly 'file:///C:\Program
Files\WindowsPowerShell\Modules\PackageManagement\1.4.8.1\fullclr\Microsoft.PackageManagement.dll' or one of its
dependencies. Operation is not supported. (Exception from HRESULT: 0x80131515)
At line:1 char:1
+ Import-Module PowerShellGet -Scope Global -Force
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [Import-Module], FileLoadException
    + FullyQualifiedErrorId : System.IO.FileLoadException,Microsoft.PowerShell.Commands.ImportModuleCommand


Find-Module -Name PowerShellGet | Select Name, Version, Repository



Get-PSRepository

Name                      InstallationPolicy   SourceLocation
----                      ------------------   --------------
PSGallery                 Untrusted            https://www.powershellgallery.com/api/v2



PackageManagement\Get-Package : The term 'PackageManagement\Get-Package' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the 
name, or if a path was included, verify that the path is correct and try again.
At C:\Program Files\WindowsPowerShell\Modules\PowerShellGet\2.2.5\PSModule.psm1:9445 char:9
+         PackageManagement\Get-Package @PSBoundParameters | Microsoft. ...
+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (PackageManagement\Get-Package:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 
Get-Content : Cannot find path 'C:\Windows\system32\azlist.txt' because it does not exist.
At line:7 char:1
+ Get-Content .\azlist.txt | ForEach-Object {
+ ~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (C:\Windows\system32\azlist.txt:String) [Get-Content], ItemNotFoundException
    + FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.GetContentCommand


# Run as Administrator

# Remove the specific version of PackageManagement
Remove-Item -Path "C:\Program Files\WindowsPowerShell\Modules\PackageManagement\1.4.8.1" -Recurse -Force

# Verify the removal
Get-Module -ListAvailable -Name PackageManagement




PS C:\Windows\system32> Get-Module -ListAvailable -Name PackageManagement


    Directory: C:\Program Files\WindowsPowerShell\Modules


ModuleType Version    Name                                ExportedCommands                                                                                                                    
---------- -------    ----                                ----------------                                                                                                                    
Script     1.4.8.1    PackageManagement                   {Find-Package, Get-Package, Get-PackageProvider, Get-PackageSource...}                                                              
Binary     1.0.0.1    PackageManagement                   {Find-Package, Get-Package, Get-PackageProvider, Get-PackageSource...}  



Name                      InstallationPolicy   SourceLocation
----                      ------------------   --------------
PSGallery                 Untrusted            https://www.powershellgallery.com/api/v2



Copy-Item -Path "C:\Temp\Modules\*" -Destination "C:\Program Files\WindowsPowerShell\Modules" -Recurse


# Specify the destination path for saving modules
$DestinationPath = "C:\Temp\Modules"

# Save PowerShellGet and NuGet dependencies
Save-Module -Name PowerShellGet -Path $DestinationPath
Save-Module -Name PackageManagement -Path $DestinationPath





Uninstall-Module -Name Az -AllVersions -Force
Get-Module -ListAvailable -Name Az.* | ForEach-Object { Uninstall-Module -Name $_.Name -AllVersions -Force }

Install-Module -Name Az -RequiredVersion 10.2.0 -AllowClobber

Import-Module -Name Az -RequiredVersion 10.2.0

Register-PSRepository -Name "PSGallery" -SourceLocation "https://www.powershellgallery.com/api/v2" -InstallationPolicy Trusted






Failed to assign role: Method 'get_SerializationSettings' in type 'Microsoft.Azure.Management.Internal.Resources.ResourceManagementClient' from assembly 'Microsoft.Azure.PowerShell.Clients.ResourceManager, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' does not have an implementation.


WARNING: Unable to acquire token for tenant 'organizations' with error 'InteractiveBrowserCredential authentication failed: A window handle must be configured. See https://aka.ms/msal-net-wam#parent-window-handles'
WARNING: Please run 'Connect-AzAccount -DeviceCode' if browser is not supported in this session.
Connect-AzAccount : InteractiveBrowserCredential authentication failed: A window handle must be configured. See https://aka.ms/msal-net-wam#parent-window-handles
At line:3 char:1
+ Connect-AzAccount -Subscription $Subscription
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : CloseError: (:) [Connect-AzAccount], AuthenticationFailedException
    + FullyQualifiedErrorId : Microsoft.Azure.Commands.Profile.ConnectAzureRmAccountCommand
 
New-AzRoleAssignment : Object reference not set to an instance of an object.
At line:5 char:1
+ New-AzRoleAssignment -ResourceName $AzureVMName -ResourceGroupName "r ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : CloseError: (:) [New-AzRoleAssignment], NullReferenceException
    + FullyQualifiedErrorId : Microsoft.Azure.Commands.Resources.NewAzureRoleAssignmentCommand


Method 'get_SerializationSettings' in type 'Microsoft.Azure.Management.Internal.Resources.ResourceManagementClient' from assembly 'Microsoft.Azure.PowerShell.Clients.ResourceManager, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' does not have an implementation.
Method 'get_SerializationSettings' in type 'Microsoft.Azure.Management.Internal.Resources.ResourceManagementClient' from assembly 'Microsoft.Azure.PowerShell.Clients.ResourceManager, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' does not have an implementation.
Method 'get_SerializationSettings' in type 'Microsoft.Azure.Management.Internal.Resources.ResourceManagementClient' from assembly 'Microsoft.Azure.PowerShell.Clients.ResourceManager, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' does not have an implementation.
System.Management.Automation.ParameterBindingValidationException: Cannot bind argument to parameter 'Context' because it is null.
   at System.Management.Automation.ParameterBinderBase.ValidateNullOrEmptyArgument(CommandParameterInternal parameter, CompiledCommandParameter parameterMetadata, Type argumentType, Object parameterValue, Boolean recurseIntoCollections)
   at System.Management.Automation.ParameterBinderBase.BindParameter(CommandParameterInternal parameter, CompiledCommandParameter parameterMetadata, ParameterBindingFlags flags)
   at System.Management.Automation.CmdletParameterBinderController.BindParameter(CommandParameterInternal argument, MergedCompiledCommandParameter parameter, ParameterBindingFlags flags)
   at System.Management.Automation.CmdletParameterBinderController.BindParameter(UInt32 parameterSets, CommandParameterInternal argument, MergedCompiledCommandParameter parameter, ParameterBindingFlags flags)
   at System.Management.Automation.CmdletParameterBinderController.BindParameters(UInt32 parameterSets, Collection`1 arguments)
   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParametersNoValidation(Collection`1 arguments)
   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParameters(Collection`1 arguments)
   at System.Management.Automation.CommandProcessor.BindCommandLineParameters()
   at System.Management.Automation.CommandProcessor.Prepare(IDictionary psDefaultParameterValues)
   at System.Management.Automation.CommandProcessorBase.DoPrepare(IDictionary psDefaultParameterValues)
   at System.Management.Automation.Internal.PipelineProcessor.Start(Boolean incomingStream)
   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)
   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)
   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)
   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)



# Ensure the PowerShellGet module is up to date
Install-Module -Name PowerShellGet -Force -AllowClobber

# Update all installed modules
Update-Module -Name Az -Force

# Verify the version of the Az module
Get-Module -Name Az -ListAvailable







Failed to assign role: Method 'get_SerializationSettings' in type 'Microsoft.Azure.Management.Internal.Resources.ResourceManagementClient' from assembly 'Microsoft.Azure.PowerShell.Clients.ResourceManager, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' does not have an implementation.

#description: Outputs specific Nerdio variables and assigns a role with error handling
#tags: Nerdio, Debug, RoleAssignment

Write-Output "DesktopUser: $DesktopUser"
Write-Output "AzureVMName: $AzureVMName"
Write-Output "AzureResourceGroupName: $AzureResourceGroupName"

try {
    # Attempt to assign the role
    Write-Output "Assigning 'Virtual Machine Administrator Login' role to $DesktopUser for VM $AzureVMName in resource group $AzureResourceGroupName..."
    New-AzRoleAssignment -ResourceName $AzureVMName -ResourceGroupName $AzureResourceGroupName -SignInName $DesktopUser -RoleDefinitionName "Virtual Machine Administrator Login" -ResourceType "Microsoft.Compute/virtualMachines"
    Write-Output "Role assignment successful."
} catch {
    # Output any errors to standard output
    Write-Output "Failed to assign role: $_"
}

### End Script ###



#description: Outputs specific Nerdio variables
#tags: Nerdio, Debug, Variables

Write-Output "DesktopUser: $DesktopUser"
Write-Output "AzureVMName: $AzureVMName"
Write-Output "AzureResourceGroupName: $AzureResourceGroupName"

New-AzRoleAssignment -ResourceName $AzureVMName -ResourceGroupName $AzureResourceGroupName -SignInName $DesktopUser -RoleDefinitionName "Virtual Machine Administrator Login" -ResourceType "Microsoft.Compute/virtualMachines"

### End Script ###


Install-Module -Name Az -AllowClobber -Scope CurrentUser
Import-Module -Name Az


New-AzRoleAssignment -ResourceName $AzureVMName -ResourceGroupName $AzureResourceGroupName -SignInName $DesktopUser -RoleDefinitionName "Virtual Machine Administrator Login" -ResourceType "Microsoft.Compute/virtualMachines"


Heartbeat
| extend NormalizedResourceGroup = tolower(ResourceGroup)  // Convert ResourceGroup to lowercase
| summarize MachineCount = dcount(Computer) by bin(TimeGenerated, 1h), NormalizedResourceGroup
| sort by TimeGenerated desc, NormalizedResourceGroup



Heartbeat
| summarize count() by ResourceGroup, bin(TimeGenerated, 1m)
| summarize avg(count_) by ResourceGroup, bin(TimeGenerated, 5m)
| order by TimeGenerated


Heartbeat
| summarize MachineCount = dcount(Computer) by bin(TimeGenerated, 1h)
| sort by TimeGenerated desc
 


New-AzRoleAssignment -ObjectId <objectId> -RoleDefinitionName <roleName> -Scope /subscriptions/<subscriptionId>/resourcegroups/<resourceGroupName>/providers/<providerName>/<resourceType>/<resourceSubType>/<resourceName>



Get-AzRoleDefinition | Where-Object { $_.Name -like "*Virtual Machine*" } | Format-Table -Property Name, IsCustom, Id



Get-AzRoleDefinition | Format-Table -Property Name, IsCustom, Id


#description: Outputs specific Nerdio variables
#tags: Nerdio, Debug, Variables

Write-Output "DesktopUser: $DesktopUser"
Write-Output "AzureVMName: $AzureVMName"
Write-Output "AzureResourceGroupName: $AzureResourceGroupName"
Write-Output "AzureSubscriptionId: $AzureSubscriptionId"

### End Script ###




#description: Outputs pre-populated Nerdio variables to standard output
#tags: Nerdio, Debug, Variables

<#
Notes:
This script outputs the values of all pre-populated Nerdio variables to the standard output.
It handles cases where certain variables may not be available in the current context.
#>

# Define a function to output variable values safely
function Output-Variable {
    param (
        [string]$VariableName,
        [object]$VariableValue
    )

    if ($null -ne $VariableValue) {
        Write-Output "$VariableName: $VariableValue"
    } else {
        Write-Output "$VariableName: Not available in this context"
    }
}

# Output each pre-populated variable
Output-Variable "HostPoolId" $HostPoolId
Output-Variable "HostPoolName" $HostPoolName
Output-Variable "AzureSubscriptionId" $AzureSubscriptionId
Output-Variable "AzureSubscriptionName" $AzureSubscriptionName
Output-Variable "AzureResourceGroupName" $AzureResourceGroupName
Output-Variable "AzureRegionName" $AzureRegionName
Output-Variable "AzureVMName" $AzureVMName
Output-Variable "ADUsername" $ADUsername
Output-Variable "ADPassword" $ADPassword
Output-Variable "DesktopUser" $DesktopUser

### End Script ###





https://drive.google.com/file/d/1i8z6Q7l7P7NgftLmEUSnoHGfqQzKhmHj/view?pli=1


# Set "MenuShowDelay" to "0"
$regEntry = [PSCustomObject]@{
    Path = "HKCU:\Control Panel\Desktop"
    ValueName = "MenuShowDelay"
    ValueType = "String"
    ValueData = "0"
}
$regEntries += $regEntry

# Disable "SubscribedContent-338393Enabled"
$regEntry = [PSCustomObject]@{
    Path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
    ValueName = "SubscribedContent-338393Enabled"
    ValueType = "DWord"
    ValueData = "0"
}
$regEntries += $regEntry

# Disable "SubscribedContent-353696Enabled"
$regEntry = [PSCustomObject]@{
    Path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
    ValueName = "SubscribedContent-353696Enabled"
    ValueType = "DWord"
    ValueData = "0"
}
$regEntries += $regEntry

# Disable "SubscribedContent-338388Enabled"
$regEntry = [PSCustomObject]@{
    Path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
    ValueName = "SubscribedContent-338388Enabled"
    ValueType = "DWord"
    ValueData = "0"
}
$regEntries += $regEntry

# Disable "SubscribedContent-338389Enabled"
$regEntry = [PSCustomObject]@{
    Path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
    ValueName = "SubscribedContent-338389Enabled"
    ValueType = "DWord"
    ValueData = "0"
}
$regEntries += $regEntry

# Disable "SystemPaneSuggestionsEnabled"
$regEntry = [PSCustomObject]@{
    Path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
    ValueName = "SystemPaneSuggestionsEnabled"
    ValueType = "DWord"
    ValueData = "0"
}
$regEntries += $regEntry

# Disable "BingSearchEnabled"
$regEntry = [PSCustomObject]@{
    Path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Search"
    ValueName = "BingSearchEnabled"
    ValueType = "DWord"
    ValueData = "0"
}
$regEntries += $regEntry

# Disable "IsAADCloudSearchEnabled"
$regEntry = [PSCustomObject]@{
    Path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\SearchSettings"
    ValueName = "IsAADCloudSearchEnabled"
    ValueType = "DWord"
    ValueData = "0"
}
$regEntries += $regEntry






# Removes the "New" tag on Start menu apps
$regEntry = [PSCustomObject]@{
Path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"
ValueName = "Start_NotifyNewApps"
ValueType = "DWord"
ValueData = "0"
}
$regEntries += $regEntry



check if these are showing on your SSP.
 
        "HivePath" = "HKCU:\Control Panel\Desktop"
 
        "KeyName" = "MenuShowDelay"
 
        "PropertyType" = "STRING"
 
        "PropertyValue" = "0"
 
 
        "HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
 
        "KeyName" = "SubscribedContent-338393Enabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 
        "HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
 
        "KeyName" = "SubscribedContent-353696Enabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 
        "HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
 
        "KeyName" = "SubscribedContent-338388Enabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 

       "HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
 
        "KeyName" = "SubscribedContent-338389Enabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 
        "HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
 
        "KeyName" = "SystemPaneSuggestionsEnabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 
         
"HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Search"
 
        "KeyName" = "BingSearchEnabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 
       
"HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\SearchSettings"
 
        "KeyName" = "IsAADCloudSearchEnabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"







The value of the following registry key:

Key: HKLM\Software\Microsoft\MSRDC\Policies
Type: REG_DWORD
Name: AutomaticUpdates


#description: Installs RSAT Active Directory DS-LDS Tools
#tags: Nerdio, RSAT, ActiveDirectory

<#
Notes:
This script installs the RSAT Active Directory DS-LDS Tools capability using the Add-WindowsCapability command.
Ensure that the system has internet access for downloading the feature.
#>

# Define the capability name as a string literal
$CapabilityName = "Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0"

# Attempt to add the Windows capability
Write-Output "Adding Windows capability: $CapabilityName..."
try {
    Add-WindowsCapability -Online -Name "$CapabilityName"
    Write-Output "Windows capability $CapabilityName added successfully."
} catch {
    Write-Output "Failed to add Windows capability $CapabilityName: $_"
    Exit 1
}

### End Script ###


Failed to validate script:
Line 19: Variable reference is not valid. ':' was not followed by a valid variable name character. Consider using ${} to delimit the name

#description: Installs RSAT Active Directory DS-LDS Tools
#tags: Nerdio, RSAT, ActiveDirectory

<#
Notes:
This script installs the RSAT Active Directory DS-LDS Tools capability using the Add-WindowsCapability command.
Ensure that the system has internet access for downloading the feature.
#>

# Define the capability name
$CapabilityName = "Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0"

# Attempt to add the Windows capability
Write-Output "Adding Windows capability: $CapabilityName..."
try {
    Add-WindowsCapability -Online -Name $CapabilityName
    Write-Output "Windows capability $CapabilityName added successfully."
} catch {
    Write-Output "Failed to add Windows capability $CapabilityName: $_"
    Exit 1
}

### End Script ###










#description: Updates the fDisabledAllowList registry key to 1
#tags: Nerdio, Registry, TerminalServices

<#
Notes:
This script changes the `fDisabledAllowList` registry key value in 
`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Terminal Server\TSAppAllowList` 
from `0` to `1`.
#>

# Define registry key details
$RegistryPath = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Terminal Server\TSAppAllowList"
$ValueName = "fDisabledAllowList"
$DesiredValue = 1  # New value to set

# Check if the registry path exists
Write-Output "Checking registry path: $RegistryPath"
if (-not (Test-Path $RegistryPath)) {
    Write-Output "Registry path not found: $RegistryPath. Exiting."
    Exit 1
}

# Check the current value of the registry key
try {
    $CurrentValue = Get-ItemProperty -Path $RegistryPath -Name $ValueName -ErrorAction Stop | Select-Object -ExpandProperty $ValueName
    Write-Output "Current value of $ValueName: $CurrentValue"
} catch {
    Write-Output "Registry key $ValueName not found. Exiting."
    Exit 1
}

# Update the value if it is not already set to the desired value
if ($CurrentValue -ne $DesiredValue) {
    Write-Output "Updating $ValueName to $DesiredValue..."
    try {
        Set-ItemProperty -Path $RegistryPath -Name $ValueName -Value $DesiredValue
        Write-Output "$ValueName updated successfully to $DesiredValue."
    } catch {
        Write-Output "Failed to update $ValueName: $_"
        Exit 1
    }
} else {
    Write-Output "$ValueName is already set to $DesiredValue. No action needed."
}

### End Script ###










https://icofx.ro/


dism /online /add-capability /capabilityname:Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0 /source:C:\FoDPackages /limitaccess



dism /online /get-capabilities | findstr "Rsat.ActiveDirectory.DS-LDS.Tools"


Add-WindowsCapability -Online -Name Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0


nmw-app-kv-fwjv4wn75m4qg


Operation returned an invalid status code 'Forbidden'
Code: Forbidden
Message: Client address is not authorized and caller was ignored because bypass is set to None
Client address: 108.141.18.87
Caller: appid=eb605535-c9fe-4771-bd01-458f4ce9f627;oid=41a4ba88-e620-416e-9b9f-33b9f34b45f8
Vault: nmw-app-kv-fwjv4wn75m4qg;location=westeurope
Operation returned an invalid status code 'Forbidden'
Code: Forbidden
Message: Client address is not authorized and caller was ignored because bypass is set to None
Client address: 108.141.18.87
Caller: appid=eb605535-c9fe-4771-bd01-458f4ce9f627;oid=41a4ba88-e620-416e-9b9f-33b9f34b45f8
Vault: nmw-app-kv-fwjv4wn75m4qg;location=westeurope
The remote server returned an error: (403) Forbidden.
System.Management.Automation.CommandNotFoundException: The term 'C:\Users\ContainerAdministrator\AppData\Local\Temp\fde5216d-3ef1-4037-956d-dc72fe4a1207.ps1' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
   at System.Management.Automation.CommandDiscovery.LookupCommandInfo(String commandName, CommandTypes commandTypes, SearchResolutionOptions searchResolutionOptions, CommandOrigin commandOrigin, ExecutionContext context)
   at System.Management.Automation.CommandDiscovery.LookupCommandProcessor(String commandName, CommandOrigin commandOrigin, Nullable`1 useLocalScope)
   at System.Management.Automation.ExecutionContext.CreateCommand(String command, Boolean dotSource)
   at System.Management.Automation.PipelineOps.AddCommand(PipelineProcessor pipe, CommandParameterInternal[] commandElements, CommandBaseAst commandBaseAst, CommandRedirection[] redirections, ExecutionContext context)
   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)
   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)
   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)

# Sign in to your Azure account
Connect-AzAccount

# Define parameters
$ResourceGroupName = "YourResourceGroupName"   # Replace with your resource group name
$VmName = "YourVMName"                         # Replace with your VM name
$UserEmail = "user@example.com"                # Replace with the email of the user to assign the role

# Get the VM resource
$vm = Get-AzResource -ResourceGroupName $ResourceGroupName -ResourceType "Microsoft.Compute/virtualMachines" -ResourceName $VmName

# Validate the VM was retrieved successfully
if (-not $vm) {
    Write-Error "VM $VmName not found in resource group $ResourceGroupName."
    return
}

# Role definition ID for "Virtual Machine Administrator Login"
$RoleDefinitionId = "b2a65916-879d-4a5d-93e5-87a5d9d5c1c3"

# Get the user object ID
$user = Get-AzADUser -UserPrincipalName $UserEmail

# Validate the user was found
if (-not $user) {
    Write-Error "User $UserEmail not found in Azure AD."
    return
}

# Create the role assignment
New-AzRoleAssignment -ObjectId $user.Id -RoleDefinitionId $RoleDefinitionId -Scope $vm.Id

Write-Host "Role 'Virtual Machine Administrator Login' successfully assigned to user $UserEmail for VM $VmName."





https://learn.microsoft.com/en-us/entra/identity/devices/howto-vm-sign-in-azure-ad-windows

https://apps.microsoft.com/detail/9wzdncrfj3ps?rtc=1&hl=en-gb&gl=GB




"HivePath" = "HKCU:\Control Panel\Desktop"
 
        "KeyName" = "MenuShowDelay"
 
        "PropertyType" = "STRING"
 
        "PropertyValue" = "0"
 
 
        "HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
 
        "KeyName" = "SubscribedContent-338393Enabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 
        "HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
 
        "KeyName" = "SubscribedContent-353696Enabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 
        "HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
 
        "KeyName" = "SubscribedContent-338388Enabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 

       "HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
 
        "KeyName" = "SubscribedContent-338389Enabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 
        "HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager"
 
        "KeyName" = "SystemPaneSuggestionsEnabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 
         
	"HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Search"
 
        "KeyName" = "BingSearchEnabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"
 
 
       
	"HivePath" = "HKCU:\Software\Microsoft\Windows\CurrentVersion\SearchSettings"
 
        "KeyName" = "IsAADCloudSearchEnabled"
 
        "PropertyType" = "DWORD"
 
        "PropertyValue" = "0"

# Removes the "New" tag on Start menu apps
$regEntry = [PSCustomObject]@{
Path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"
ValueName = "Start_NotifyNewApps"
ValueType = "DWord"
ValueData = "0"
}
$regEntries += $regEntry




let paramRangeStart = todatetime('<replace_with_actual_start_datetime>');
let paramRangeEnd = todatetime('<replace_with_actual_end_datetime>');
let binSize = 24h;

Perf
| extend 
    LocalTime = case(
        Computer startswith "M01" or Computer startswith "M04", datetime_add('hour', 0, TimeGenerated), // EMEA (UTC+0)
        Computer startswith "M13" or Computer startswith "M14", datetime_add('hour', 8, TimeGenerated), // APAC (UTC+8)
        Computer startswith "M06" or Computer startswith "M09", datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)
        datetime_add('hour', 0, TimeGenerated) // Default fallback
    ),
    Geo = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    ),
    Region = case(
        Computer startswith "M01", "NEU",
        Computer startswith "M04", "WEU",
        Computer startswith "M13", "EAS",
        Computer startswith "M14", "SEA",
        Computer startswith "M06", "EUS2",
        Computer startswith "M09", "CUS",
        "Other"
    ),
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        "Other"
    ),
    ManagementPlane = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        "Other"
    )
| extend 
    DayOfWeek = dayofweek(LocalTime),
    HourOfDay = hourofday(LocalTime),
    SessionHostName = trim(" ", tolower(Computer))
| project-away Computer
| where LocalTime between (paramRangeStart .. paramRangeEnd)
| where ObjectName == "Memory" and CounterName == "% Committed Bytes In Use"
| where dayofweek(LocalTime) between (1d .. 5d) // Only weekdays
| where hourofday(LocalTime) between (8 .. 17) // Business hours
| summarize 
    AVG_RAM_CommittedBytesInUse = round(avg(CounterValue), 2),
    MAX_RAM_CommittedBytesInUse = round(max(CounterValue), 2),
    MIN_RAM_CommittedBytesInUse = round(min(CounterValue), 2),
    MED_RAM_CommittedBytesInUse = round(percentile(CounterValue, 50), 2),
    ItemsPerTimeBin = count()
    by bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, SessionHostPoolType, ManagementPlane
| extend SessionHostKey = substring(SessionHostName, 0, 8)
| project 
    TimeGenerated = LocalTime,
    SessionHostName, 
    SessionHostPoolType, 
    SessionHostKey, 
    Geo, 
    Region, 
    Environment, 
    ManagementPlane, 
    AVG_RAM_CommittedBytesInUse, 
    MAX_RAM_CommittedBytesInUse, 
    MED_RAM_CommittedBytesInUse, 
    MIN_RAM_CommittedBytesInUse, 
    ItemsPerTimeBin






let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let paramRangeStart = todatetime('", 
            DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", 
            DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let binSize = 24h;",
            "Perf",
            "| extend LocalTime = case(",
            "        Computer startswith 'M01' or Computer startswith 'M04', datetime_add('hour', 0, TimeGenerated),",
            "        Computer startswith 'M13' or Computer startswith 'M14', datetime_add('hour', 8, TimeGenerated),",
            "        Computer startswith 'M06' or Computer startswith 'M09', datetime_add('hour', -5, TimeGenerated),",
            "        datetime_add('hour', 0, TimeGenerated)",
            "    ),",
            "    Geo = case(",
            "        Computer startswith 'M01' or Computer startswith 'M04', 'EMEA',",
            "        Computer startswith 'M13' or Computer startswith 'M14', 'APAC',",
            "        Computer startswith 'M06' or Computer startswith 'M09', 'AMRS',",
            "        'Other'",
            "    ),",
            "    Region = case(",
            "        Computer startswith 'M01', 'NEU',",
            "        Computer startswith 'M04', 'WEU',",
            "        Computer startswith 'M13', 'EAS',",
            "        Computer startswith 'M14', 'SEA',",
            "        Computer startswith 'M06', 'EUS2',",
            "        Computer startswith 'M09', 'CUS',",
            "        'Other'",
            "    ),",
            "    Environment = case(",
            "        substring(Computer, 3, 1) == 'T', 'TST',",
            "        substring(Computer, 3, 1) == 'U', 'UAT',",
            "        substring(Computer, 3, 1) == 'D', 'DEV',",
            "        Computer contains 'NACR', 'CRIMS NonProdA',",
            "        Computer contains 'NBCR', 'CRIMS NonProdB',",
            "        Computer contains 'OHCR', 'OAT CRIMS High',",
            "        Computer contains 'OMCR', 'OAT CRIMS Medium',",
            "        Computer contains 'OLCR', 'OAT CRIMS Low',",
            "        Computer contains 'PHCR', 'PRD CRIMS High',",
            "        Computer contains 'PMCR', 'PRD CRIMS High',",
            "        Computer contains 'PLCR', 'PRD CRIMS Low',",
            "        substring(Computer, 3, 1) == 'P', 'PRD',",
            "        'Other'",
            "    ),",
            "    SessionHostPoolType = case(",
            "        Computer contains 'MSN', 'MultiSession',",
            "        Computer contains 'SSP', 'Personal',",
            "        Computer contains 'NACR', 'MultiSession',",
            "        Computer contains 'NBCR', 'MultiSession',",
            "        Computer contains 'OHCR', 'MultiSession',",
            "        Computer contains 'OMCR', 'MultiSession',",
            "        Computer contains 'OLCR', 'MultiSession',",
            "        Computer contains 'PHCR', 'MultiSession',",
            "        Computer contains 'PMCR', 'MultiSession',",
            "        Computer contains 'PLCR', 'MultiSession',",
            "        Computer contains 'DVLDT', 'Personal',",
            "        'Other'",
            "    ),",
            "    ManagementPlane = case(",
            "        substring(Computer, 7, 1) == 'I', 'Intune',",
            "        substring(Computer, 7, 1) == 'G', 'GPO',",
            "        Computer contains 'DVLDT', 'Intune',",
            "        'Other'",
            "    )",
            "| extend DayOfWeek = dayofweek(LocalTime)",
            "| extend HourOfDay = hourofday(LocalTime)",
            "| extend SessionHostName = trim(' ', tolower(Computer))",
            "| project-away Computer",
            "| where LocalTime between (paramRangeStart .. paramRangeEnd)",
            "| where ObjectName == 'Memory' and CounterName == '% Committed Bytes In Use'",
            "| where dayofweek(LocalTime) between (1d .. 5d)",
            "| where hourofday(LocalTime) between (8 .. 17)",
            "| summarize AVG_RAM_CommittedBytesInUse = round(avg(CounterValue), 2),",
            "          MAX_RAM_CommittedBytesInUse = round(max(CounterValue), 2),",
            "          MIN_RAM_CommittedBytesInUse = round(min(CounterValue), 2),",
            "          MED_RAM_CommittedBytesInUse = round(percentile(CounterValue, 50), 2),",
            "          ItemsPerTimeBin = count()",
            "  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, SessionHostPoolType, ManagementPlane",
            "| extend SessionHostKey = substring(SessionHostName, 0, 8)",
            "| project TimeGenerated = BinnedTime, SessionHostName, SessionHostPoolType, SessionHostKey, Geo, Region, Environment, ManagementPlane, AVG_RAM_CommittedBytesInUse, MAX_RAM_CommittedBytesInUse, MED_RAM_CommittedBytesInUse, MIN_RAM_CommittedBytesInUse, ItemsPerTimeBin"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    )
in
    Source





Processor Information(_Total)\% Processor Time
Memory(*)\% Committed Bytes In Use
Memory(*)\Page Faults/sec
Memory(*)\Pages/sec
LogicalDisk(C:)\% Free Space
LogicalDisk(C:)\Current Disk Queue Length
PhysicalDisk(*)\Avg. Disk sec/Read
PhysicalDisk(*)\Avg. Disk sec/Write
PhysicalDisk(*)\Avg. Disk sec/Transfer



Heartbeat
| extend 
    Geo = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    ),
    Region = case(
        Computer startswith "M01", "NEU",
        Computer startswith "M04", "WEU",
        Computer startswith "M13", "EAS",
        Computer startswith "M14", "SEA",
        Computer startswith "M06", "EUS2",
        Computer startswith "M09", "CUS",
        "Other"
    ), 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        "Other"
    )
| summarize 
    CountComputers_EMEA = dcountif(Computer, Geo == "EMEA"),
    CountComputers_APAC = dcountif(Computer, Geo == "APAC"),
    CountComputers_AMRS = dcountif(Computer, Geo == "AMRS"),
    CountComputers_Geo_Other = dcountif(Computer, Geo == "Other"),
    CountComputers_NEU = dcountif(Computer, Region == "NEU"),
    CountComputers_SEA = dcountif(Computer, Region == "SEA"),
    CountComputers_EUS2 = dcountif(Computer, Region == "EUS2"),
    CountComputers_Region_Other = dcountif(Computer, Region == "Other"),
    CountComputers_PRD = dcountif(Computer, Environment == "PRD"),
    CountComputers_UAT = dcountif(Computer, Environment == "UAT"),
    CountComputers_DEV = dcountif(Computer, Environment == "DEV"),
    CountComputers_Environment_Other = dcountif(Computer, Environment == "Other"),
    CountComputers_Personal = dcountif(Computer, SessionHostPoolType == "Personal"),
    CountComputers_MultiSession = dcountif(Computer, SessionHostPoolType == "MultiSession"),
    CountComputers_SessionHostPool_Other = dcountif(Computer, SessionHostPoolType == "Other")
    by bin(TimeGenerated, 1h)
| sort by TimeGenerated desc





Heartbeat
| extend 
    Geo = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    ),
    Region = case(
        Computer startswith "M01", "NEU",
        Computer startswith "M04", "WEU",
        Computer startswith "M13", "EAS",
        Computer startswith "M14", "SEA",
        Computer startswith "M06", "EUS2",
        Computer startswith "M09", "CUS",
        "Other"
    ), 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        "Other"
    )
| summarize 
    CountComputers_EMEA = dcountif(Computer, Geo == "EMEA"),
    CountComputers_APAC = dcountif(Computer, Geo == "APAC"),
    CountComputers_AMRS = dcountif(Computer, Geo == "AMRS"),
    CountComputers_NEU = dcountif(Computer, Region == "NEU"),
    CountComputers_SEA = dcountif(Computer, Region == "SEA"),
    CountComputers_EUS2 = dcountif(Computer, Region == "EUS2"),
    CountComputers_PRD = dcountif(Computer, Environment == "PRD"),
    CountComputers_UAT = dcountif(Computer, Environment == "UAT"),
    CountComputers_DEV = dcountif(Computer, Environment == "DEV"),
    CountComputers_Personal = dcountif(Computer, SessionHostPoolType == "Personal"),
    CountComputers_MultiSession = dcountif(Computer, SessionHostPoolType == "MultiSession")
    by bin(TimeGenerated, 1h)
| sort by TimeGenerated desc









let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let paramRangeStart = todatetime('", 
            DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", 
            DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let binSize = 24h;",
            "Perf",
            "| extend LocalTime = case(",
            "    Computer startswith 'M01' or Computer startswith 'M04', datetime_add('hour', 0, TimeGenerated),",  // EMEA (UTC+0)
            "    Computer startswith 'M13' or Computer startswith 'M14', datetime_add('hour', 8, TimeGenerated),",  // APAC (UTC+8)
            "    Computer startswith 'M06' or Computer startswith 'M09', datetime_add('hour', -5, TimeGenerated),", // AMRS (UTC-5)
            "    datetime_add('hour', 0, TimeGenerated)",  // Default fallback
            "),",
            "Geo = case(",
            "    Computer startswith 'M01' or Computer startswith 'M04', 'EMEA',",
            "    Computer startswith 'M13' or Computer startswith 'M14', 'APAC',",
            "    Computer startswith 'M06' or Computer startswith 'M09', 'AMRS',",
            "    'Other'",
            "),",
            "Region = case(",
            "    Computer startswith 'M01', 'NEU',",
            "    Computer startswith 'M04', 'WEU',",
            "    Computer startswith 'M13', 'EAS',",
            "    Computer startswith 'M14', 'SEA',",
            "    Computer startswith 'M06', 'EUS2',",
            "    Computer startswith 'M09', 'CUS',",
            "    'Other'",
            "),",
            "Environment = case(",
            "    substring(Computer, 3, 1) == 'T', 'TST',",
            "    substring(Computer, 3, 1) == 'U', 'UAT',",
            "    substring(Computer, 3, 1) == 'D', 'DEV',",
            "    Computer contains 'NACR', 'CRIMS NonProdA',",
            "    Computer contains 'NBCR', 'CRIMS NonProdB',",
            "    Computer contains 'OHCR', 'OAT CRIMS High',",
            "    Computer contains 'OMCR', 'OAT CRIMS Medium',",
            "    Computer contains 'OLCR', 'OAT CRIMS Low',",
            "    Computer contains 'PHCR', 'PRD CRIMS High',",
            "    Computer contains 'PMCR', 'PRD CRIMS High',",
            "    Computer contains 'PLCR', 'PRD CRIMS Low',",
            "    substring(Computer, 3, 1) == 'P', 'PRD',",
            "    'Other'",
            "),",
            "SessionHostPoolType = case(",
            "    Computer contains 'MSN', 'MultiSession',",
            "    Computer contains 'SSP', 'Personal',",
            "    Computer contains 'NACR', 'MultiSession',",
            "    Computer contains 'NBCR', 'MultiSession',",
            "    Computer contains 'OHCR', 'MultiSession',",
            "    Computer contains 'OMCR', 'MultiSession',",
            "    Computer contains 'OLCR', 'MultiSession',",
            "    Computer contains 'PHCR', 'MultiSession',",
            "    Computer contains 'PMCR', 'MultiSession',",
            "    Computer contains 'PLCR', 'MultiSession',",
            "    Computer contains 'DVLDT', 'Personal',",
            "    'Other'",
            "),",
            "ManagementPlane = case(",
            "    substring(Computer, 7, 1) == 'I', 'Intune',",
            "    substring(Computer, 7, 1) == 'G', 'GPO',",
            "    Computer contains 'DVLDT', 'Intune',",
            "    'Other'",
            "),",
            "| extend DayOfWeek = dayofweek(LocalTime)",
            "| extend HourOfDay = hourofday(LocalTime)",
            "| extend SessionHostName = trim(' ', tolower(Computer))",
            "| project-away Computer",
            "| where LocalTime between (paramRangeStart .. paramRangeEnd)",
            "| where ObjectName == 'Memory' and CounterName == '% Committed Bytes In Use'",
            "| where dayofweek(LocalTime) between (1d .. 5d)",
            "| where hourofday(LocalTime) between (8 .. 17)",
            "| summarize AVG_RAM_CommittedBytesInUse = round(avg(CounterValue), 2),",
            "          MAX_RAM_CommittedBytesInUse = round(max(CounterValue), 2),",
            "          MIN_RAM_CommittedBytesInUse = round(min(CounterValue), 2),",
            "          MED_RAM_CommittedBytesInUse = round(percentile(CounterValue, 50), 2),",
            "          ItemsPerTimeBin = count()",
            "  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, ManagementPlane, SessionHostPoolType",
            "| project TimeGenerated = BinnedTime, SessionHostName, SessionHostPoolType, Geo, Region, Environment, ManagementPlane, AVG_RAM_CommittedBytesInUse, MAX_RAM_CommittedBytesInUse, MIN_RAM_CommittedBytesInUse, MED_RAM_CommittedBytesInUse, ItemsPerTimeBin"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    )
in
    Source



'summarize' operator: Failed to resolve scalar expression named 'SessionHostName'
Request id: 21739e04-8fcc-4535-b158-c221450d4704

Heartbeat
| extend 
    LocalTime = case(
        Computer startswith "M01" or Computer startswith "M04", datetime_add('hour', 0, TimeGenerated),  // EMEA (UTC+0)
        Computer startswith "M13" or Computer startswith "M14", datetime_add('hour', 8, TimeGenerated),  // APAC (UTC+8)
        Computer startswith "M06" or Computer startswith "M09", datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)
        datetime_add('hour', 0, TimeGenerated) // Default fallback
    ),
    Geo = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    ),
    Region = case(
        Computer startswith "M01", "NEU",
        Computer startswith "M04", "WEU",
        Computer startswith "M13", "EAS",
        Computer startswith "M14", "SEA",
        Computer startswith "M06", "EUS2",
        Computer startswith "M09", "CUS",
        "Other"
    ), 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        Computer contains "DVLDT", "Personal",
        "Other"
    )
| summarize 
    Geo_Unique_Computers = dcountif(SessionHostName, Geo == "EMEA") by bin(LocalTime, 1h),
    Region_Unique_Computers = dcountif(SessionHostName, Geo == "APAC"),
    Environment_Unique_Computers = dcountif(SessionHostName, Geo == "AMRS")





//let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');
//let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');
Heartbeat
| extend 
    LocalTime = case(
        Computer startswith "M01" or Computer startswith "M04", datetime_add('hour', 0, TimeGenerated),  // EMEA (UTC+0)
        Computer startswith "M13" or Computer startswith "M14", datetime_add('hour', 8, TimeGenerated),  // APAC (UTC+8)
        Computer startswith "M06" or Computer startswith "M09", datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)
        datetime_add('hour', 0, TimeGenerated) // Default fallback
    ),
    Geo = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    ),
    Region = case(
        Computer startswith "M01", "NEU",
        Computer startswith "M04", "WEU",
        Computer startswith "M13", "EAS",
        Computer startswith "M14", "SEA",
        Computer startswith "M06", "EUS2",
        Computer startswith "M09", "CUS",
        "Other"
    ), 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        Computer contains "DVLDT", "Personal",
        "Other"
    ),
    ManagementPlane = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        Computer contains "DVLDT", "Intune",
        "Other"
    )
| extend SessionHostName = trim(' ', tolower(Computer))
| project-away Computer
| project LocalTime, Geo, Region, Environment, SessionHostPoolType, ManagementPlane, SessionHostName, ResourceGroup

returns
LocalTime [UTC]	Geo	Region	Environment	SessionHostPoolType	ManagementPlane	SessionHostName	ResourceGroup
28/11/2024, 10:04:42.629	EMEA	NEU	PRD	Personal	Intune	m01psspi0227.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 10:05:12.905	EMEA	NEU	PRD	Personal	Intune	m01psspi0180.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 18:12:49.421	APAC	SEA	PRD	Personal	Intune	m14psspi0152.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-SEA-PRD
28/11/2024, 10:19:01.015	EMEA	NEU	PRD	Personal	Intune	m01psspi0353.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 11:34:33.011	EMEA	NEU	PRD	Personal	Intune	m01psspi0310.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:36:22.379	EMEA	NEU	PRD	Personal	Intune	m01psspi0878.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:41:28.323	EMEA	NEU	PRD	Personal	Intune	m01psspi0300.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:42:28.321	EMEA	NEU	PRD	Personal	Intune	m01psspi0300.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:43:28.335	EMEA	NEU	PRD	Personal	Intune	m01psspi0300.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:44:28.338	EMEA	NEU	PRD	Personal	Intune	m01psspi0300.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:45:28.360	EMEA	NEU	PRD	Personal	Intune	m01psspi0300.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 21:45:49.451	APAC	SEA	PRD	Personal	Intune	m14psspi0121.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-SEA-PRD
28/11/2024, 13:46:28.378	EMEA	NEU	PRD	Personal	Intune	m01psspi0300.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:47:28.398	EMEA	NEU	PRD	Personal	Intune	m01psspi0300.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:48:28.409	EMEA	NEU	PRD	Personal	Intune	m01psspi0300.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:49:28.412	EMEA	NEU	PRD	Personal	Intune	m01psspi0300.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:00.333	EMEA	NEU	PRD	Personal	Intune	m01psspi0678.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 08:50:00.461	AMRS	EUS2	PRD	Personal	GPO	m06psspg0090.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-EUS2-PRD
28/11/2024, 08:50:00.561	AMRS	EUS2	UAT	Personal	GPO	m06usspg0012.aberdeen.aberdeen-asset.com	RG-EUS-REMOTEDESKTOPDEVICES-UATVIRTUALDESKTOP-EUS2-PRD
28/11/2024, 13:50:01.065	EMEA	NEU	PRD	Personal	Intune	m01psspi0736.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:01.122	EMEA	NEU	PRD	Personal	Intune	m01psspi0167.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:01.407	EMEA	NEU	PRD	Personal	Intune	m01psspi0886.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:01.455	EMEA	NEU	PRD	Personal	Intune	m01psspi0346.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 21:50:01.538	APAC	SEA	PRD	Personal	Intune	m14psspi0017.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-SEA-PRD
28/11/2024, 13:50:01.615	EMEA	NEU	PRD	Personal	Intune	m01psspi0712.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:01.806	EMEA	NEU	PRD	Personal	Intune	m01psspi0679.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:02.242	EMEA	NEU	PRD	Personal	Intune	m01psspi0443.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:02.423	EMEA	NEU	PRD	Personal	Intune	m01psspi0318.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 21:50:03.280	APAC	SEA	PRD	Personal	Intune	m14psspi0038.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-SEA-PRD
28/11/2024, 13:50:04.538	EMEA	NEU	PRD	Personal	Intune	m01psspi0729.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 08:50:04.768	AMRS	EUS2	PRD	Personal	GPO	m06psspg0014.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-EUS2-PRD
28/11/2024, 13:50:04.860	EMEA	NEU	PRD	MultiSession	Intune	m01pmsni0021.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-NonPersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:04.939	EMEA	NEU	UAT	Personal	Intune	m01usspi0017.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-UATVirtualDesktop-NEU-PRD
28/11/2024, 21:50:05.394	APAC	SEA	PRD	Personal	Intune	m14psspi0053.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-SEA-PRD
28/11/2024, 08:50:05.669	AMRS	EUS2	PRD	Personal	GPO	m06psspg0042.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-EUS2-PRD
28/11/2024, 13:50:05.740	EMEA	NEU	PRD	Personal	Intune	m01psspi0465.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:05.810	EMEA	NEU	UAT	Personal	Intune	m01usspi0002.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-UATVirtualDesktop-NEU-PRD
28/11/2024, 13:50:05.828	EMEA	NEU	PRD	Personal	Intune	m01psspi0563.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:05.980	EMEA	NEU	UAT	Personal	Intune	m01usspi0028.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-UATVirtualDesktop-NEU-PRD
28/11/2024, 13:50:06.259	EMEA	NEU	PRD	Personal	Intune	m01psspi0026.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 08:50:06.430	AMRS	EUS2	UAT	Personal	GPO	m06usspg0010.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-UATVirtualDesktop-EUS2-PRD
28/11/2024, 13:50:06.436	EMEA	NEU	PRD	MultiSession	Intune	m01pmsni0019.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-NonPersistentVirtualDesktop-NEU-PRD
28/11/2024, 08:50:06.728	AMRS	EUS2	PRD	Personal	GPO	m06psspg0005.aberdeen.aberdeen-asset.com	RG-EUS-REMOTEDESKTOPDEVICES-PERSISTENTVIRTUALDESKTOP-EUS2-PRD
28/11/2024, 13:50:07.417	EMEA	NEU	PRD	Personal	Intune	m01psspi0034.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:07.671	EMEA	NEU	PRD	Personal	Intune	m01psspi0730.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:08.487	EMEA	NEU	PRD	Personal	Intune	m01psspi0665.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:08.721	EMEA	NEU	PRD	Personal	Intune	m01psspi0580.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:09.248	EMEA	NEU	PRD	Personal	Intune	m01psspi0030.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 21:50:09.388	APAC	SEA	PRD	Personal	Intune	m14psspi0122.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-SEA-PRD
28/11/2024, 13:50:09.802	EMEA	NEU	PRD	Personal	Intune	m01psspi0028.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:09.942	EMEA	NEU	PRD	Personal	Intune	m01psspi0293.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:10.139	EMEA	NEU	PRD	Personal	Intune	m01psspi0692.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 21:50:10.225	APAC	SEA	PRD	Personal	Intune	m14psspi0094.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-SEA-PRD
28/11/2024, 08:50:10.595	AMRS	EUS2	UAT	Personal	GPO	m06usspg0017.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-UATVirtualDesktop-EUS2-PRD
28/11/2024, 13:50:10.637	EMEA	NEU	PRD	Personal	Intune	m01psspi0695.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 13:50:10.685	EMEA	NEU	PRD	Personal	Intune	m01psspi0597.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD
28/11/2024, 21:50:10.846	APAC	SEA	PRD	Personal	Intune	m14psspi0097.aberdeen.aberdeen-asset.com	RG-EUS-REMOTEDESKTOPDEVICES-PERSISTENTVIRTUALDESKTOP-SEA-PRD
28/11/2024, 13:50:11.087	EMEA	NEU	PRD	MultiSession	Intune	m01pmsni0070.aberdeen.aberdeen-asset.com	rg-EUS-RemoteDesktopDevices-NonPersistentVirtualDesktop-NEU-PRD






//let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');
//let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');
Heartbeat
| extend 
    LocalTime = case(
        Computer startswith "M01" or Computer startswith "M04", datetime_add('hour', 0, TimeGenerated),  // EMEA (UTC+0)
        Computer startswith "M13" or Computer startswith "M14", datetime_add('hour', 8, TimeGenerated),  // APAC (UTC+8)
        Computer startswith "M06" or Computer startswith "M09", datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)
        datetime_add('hour', 0, TimeGenerated) // Default fallback
    ),
    Geo = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    ),
    Region = case(
        Computer startswith "M01", "NEU",
        Computer startswith "M04", "WEU",
        Computer startswith "M13", "EAS",
        Computer startswith "M14", "SEA",
        Computer startswith "M06", "EUS2",
        Computer startswith "M09", "CUS",
        "Other"
    ), 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        Computer contains "DVLDT", "Personal",
        "Other"
    ),
    ManagementPlane = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        Computer contains "DVLDT", "Intune",
        "Other"
    )
| extend DayOfWeek = dayofweek (LocalTime)
| extend HourOfDay = hourofday(LocalTime)
| extend SessionHostName = trim(' ', tolower(Computer))
| project-away Computer

returns
TimeGenerated [UTC]	SourceComputerId	ComputerIP	Category	OSType	OSName	OSMajorVersion	OSMinorVersion	Version	SCAgentChannel	RemoteIPLongitude	LocalTime [UTC]	Geo	Region	Environment	SessionHostPoolType	ManagementPlane	DayOfWeek	HourOfDay	SessionHostName
28/11/2024, 10:22:45.664	83d388de-13fe-452c-b174-c0792f3a271d	148.64.15.68	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 10:22:45.664	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	10	m01psspi0795.aberdeen.aberdeen-asset.com
28/11/2024, 10:23:10.544	10a325d4-8245-4aea-a9ab-999f40a08f87	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 10:23:10.544	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	10	m01psspi0836.aberdeen.aberdeen-asset.com
28/11/2024, 10:23:16.404	a7d5d940-495d-4cf1-9932-fc7a6ec360f4	148.64.15.9	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 10:23:16.404	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	10	m01psspi0794.aberdeen.aberdeen-asset.com
28/11/2024, 12:50:51.690	aab8f7c5-8230-4a87-a9ea-8d318446f631	148.64.15.23	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 12:50:51.690	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	12	m01psspi0828.aberdeen.aberdeen-asset.com
28/11/2024, 14:36:51.690	6e0e38ec-3083-4b21-be75-7ddcea58c020	148.64.15.68	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 14:36:51.690	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	14	m01psspi0478.aberdeen.aberdeen-asset.com
28/11/2024, 14:51:43.952	c87afc8b-60cd-46f5-85f9-5bf5ce1e6f0f	148.64.15.63	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 14:51:43.952	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	14	m01psspi0126.aberdeen.aberdeen-asset.com
28/11/2024, 15:21:31.352	24b44269-ed4a-40f4-affe-40f8ce90a5c6	148.64.15.9	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:21:31.352	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0127.aberdeen.aberdeen-asset.com
28/11/2024, 15:33:27.039	56848ab4-d251-4bd8-94f5-6dc0557304b8	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:33:27.039	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0227.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.114	3bd049a1-6e86-4943-8801-57dcb0091883	148.64.15.23	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:00.114	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0706.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.142	7325c47d-dd91-4937-ba83-995c160f3320	148.64.15.23	Azure Monitor Agent	Windows	Windows 10 Enterprise multi-session	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:00.142	EMEA	NEU	PRD	MultiSession	Intune	4.00:00:00	15	m01pmsni0005.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.143	dbab448e-97c0-4ed9-a8ca-b6447e47d693	148.64.15.68	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:00.143	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0459.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.277	7ba88fd1-31db-4049-a464-8a4e0e8820a3	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:00.277	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0229.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.292	6337efed-da0e-43c0-90ba-0875bd783c49	148.64.15.83	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:00.292	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0419.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.534	d94dbd6c-a185-413b-a7d0-3c0d821f2a16	103.246.37.6	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	103.86	28/11/2024, 23:34:00.534	APAC	SEA	PRD	Personal	Intune	4.00:00:00	23	m14psspi0007.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.567	741f13bc-04f6-4571-b83e-2aea804d13f3	148.64.15.83	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:00.567	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0352.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.596	657bd78a-8660-4416-95ac-8a37d8a53c8e	148.64.15.83	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:00.596	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0147.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.664	ed278c28-dde3-421e-9e84-b433f9b3ec90	148.64.15.68	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:00.664	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0328.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.668	790a2df4-9049-46b0-9957-ab94a1a8e56f	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:00.668	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0162.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.685	4545ec9e-e635-4bbd-921d-a16bbbd57c65	103.246.37.60	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.29.0.0	Direct	103.86	28/11/2024, 23:34:00.685	APAC	SEA	PRD	Personal	Intune	4.00:00:00	23	m14psspi0004.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.734	50bd831b-622b-41dd-9247-e48babce3e13	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:00.734	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0753.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:00.899	849d9732-b5c1-4856-a057-1dac834a9dac	148.64.15.23	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:00.899	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0628.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:01.523	559e9d82-f0ba-406c-a576-a4bebe584091	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:01.523	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0348.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:01.789	8ccf30a2-afa4-4854-ae47-eaf34e35b291	148.64.15.23	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:01.789	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0359.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:01.999	b7850780-d171-4961-9c48-39a6fbeb2b02	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:01.999	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0167.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:02.030	73402096-924a-4129-9ed6-62495fbed6f2	148.64.15.68	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:02.030	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0736.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:02.229	f5002e6e-4cfd-4d36-ad43-ebcdf83ec9bc	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:02.229	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0886.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:02.277	dbb31b6c-1b40-4146-b782-4c2ad74886c2	148.64.15.63	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:02.277	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0346.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:02.322	92477145-7350-4ae3-985b-c9edea541b22	148.64.15.63	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:02.322	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0712.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:02.419	a3e1e696-acba-480f-bb2d-e591ded91418	103.246.37.6	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.29.0.0	Direct	103.86	28/11/2024, 23:34:02.419	APAC	SEA	PRD	Personal	Intune	4.00:00:00	23	m14psspi0017.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:02.583	9aac51a0-d357-4972-99c7-2efdd20e95db	148.64.15.63	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:02.583	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0679.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:02.963	85d75255-5038-4064-bdcf-797b6e9da500	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:02.963	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0128.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:02.998	27f97d61-c360-48dd-9bfa-2bf81ccf6a5c	148.64.15.63	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:02.998	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0674.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:03.156	abca6335-31df-4c6f-b299-54cd5319cb78	148.64.15.63	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:03.156	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0318.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:03.264	b2dce851-f146-4f11-936e-5b6c1642aa5b	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:03.264	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0151.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:03.648	b7a2f582-1df0-45fb-b73b-7eda59105289	148.64.15.9	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:03.648	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0443.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:03.764	32e878a3-a5f4-47ce-84a6-5aac8c5ba3e2	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:03.764	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0251.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:04.030	095449b1-5e69-4569-9261-db99fcb06974	103.246.37.5	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	103.86	28/11/2024, 23:34:04.030	APAC	SEA	PRD	Personal	Intune	4.00:00:00	23	m14psspi0038.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:04.446	6742d53c-8069-4685-b3f6-8b6529aa800b	148.64.15.68	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:04.446	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0064.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:04.817	132b46c5-201c-4abc-b8f1-5e0a2f9d3fb9	148.64.15.23	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:04.817	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0002.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:05.261	776b99db-4b83-484d-8030-a28637dd4d1b	148.64.15.23	Azure Monitor Agent	Windows	Windows 10 Enterprise multi-session	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:05.261	EMEA	NEU	PRD	MultiSession	Intune	4.00:00:00	15	m01pmsni0024.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:05.304	0e77c7ec-41f2-4c6d-a811-5506294c347e	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:05.304	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0729.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:05.356	948f91e1-0ae1-45cd-9612-11ffd8ac8c78	148.64.15.83	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:05.356	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0450.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:05.492	3c56be89-c869-427c-8e10-aa55f5c21bea	148.64.15.9	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:05.492	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0361.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:05.586	61e204fe-c74a-4d31-b840-fd7ee6183d59	148.64.15.23	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:05.586	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0845.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:05.700	3e1c24d5-5562-4c04-b782-1a580f89f92a	148.64.15.83	Azure Monitor Agent	Windows	Windows 10 Enterprise multi-session	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:05.700	EMEA	NEU	PRD	MultiSession	Intune	4.00:00:00	15	m01pmsni0021.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:05.715	3bc3f501-200e-485c-89fc-3e513b6b6ed7	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise multi-session	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:05.715	EMEA	NEU	CRIMS NonProdA	MultiSession	Intune	4.00:00:00	15	m01nacri0002.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:05.907	bcc29029-25e4-479b-b633-191f6d69a2d9	148.64.15.9	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.29.0.0	Direct	-6.24	28/11/2024, 15:34:05.907	EMEA	NEU	UAT	Personal	Intune	4.00:00:00	15	m01usspi0002.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:06.157	7993ae96-2183-49a6-b259-cc3132241585	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:06.157	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0149.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:06.201	b8ff1215-bb7c-4a93-8af8-720a49a6a0a6	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:06.201	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0551.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:06.239	f0cdbf07-0d3a-45c3-a1d1-acf6e928fffc	148.64.15.83	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:06.239	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0015.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:06.379	a65764a8-9b77-437f-be67-50a8ca20c561	103.246.37.60	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	103.86	28/11/2024, 23:34:06.379	APAC	SEA	PRD	Personal	Intune	4.00:00:00	23	m14psspi0053.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:06.585	aa6fce97-8119-4f93-8a53-5d1a28ec74a3	148.64.15.83	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:06.585	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0638.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:06.662	78cf9c65-8717-4684-812f-4683ce38039a	148.64.15.9	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:06.662	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0129.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:06.795	337223d1-13e0-41fc-a504-eb17a2455599	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:06.795	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0664.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:06.815	e043256a-6338-416b-9d2b-0c3f6918e524	148.64.15.68	Azure Monitor Agent	Windows	Windows 10 Enterprise multi-session	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:06.815	EMEA	NEU	PRD	MultiSession	Intune	4.00:00:00	15	m01pmsni0016.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:06.852	ed1bbb79-0d6d-4a74-b09c-37e2a784abc9	148.64.15.63	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:06.852	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0563.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:07.032	cd5d9f99-dac5-410b-aa22-ba17bb7a2d44	148.64.15.63	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:07.032	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0026.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:07.037	d08b026c-8a7c-44ad-8af7-c1013fb7ffb5	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:07.037	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0568.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:07.107	353734ae-b6cf-43f6-b68c-3422288694f1	148.64.15.38	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:07.107	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0657.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:07.145	408e4998-49e2-4ce0-a170-72a6c1a1ebfd	148.64.15.83	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:07.145	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0353.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:07.217	4888b063-c87f-420f-993e-871482df7d15	148.64.15.23	Azure Monitor Agent	Windows	Windows 10 Enterprise multi-session	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:07.217	EMEA	NEU	PRD	MultiSession	Intune	4.00:00:00	15	m01pmsni0019.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:07.554	2d9462eb-eca7-49c0-8838-8a8777a4bc28	148.64.15.23	Azure Monitor Agent	Windows	Windows 10 Enterprise multi-session	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:07.554	EMEA	NEU	PRD	MultiSession	Intune	4.00:00:00	15	m01pmsni0017.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:08.018	ef1310ae-23f5-4d95-b5f4-5518cf6d9d66	148.64.15.68	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:08.018	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0021.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:08.226	fd6d3512-948c-41fe-b6c8-baec19125ea5	148.64.15.83	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:08.226	EMEA	NEU	TST	Personal	Intune	4.00:00:00	15	m01tsspi0017.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:08.241	d7968b4e-9520-4a14-b558-26c38606c496	103.246.37.94	Azure Monitor Agent	Windows	Windows 10 Enterprise multi-session	10	0	1.30.0.0	Direct	103.86	28/11/2024, 23:34:08.241	APAC	SEA	UAT	MultiSession	Intune	4.00:00:00	23	m14umsni0001.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:08.248	03bbef68-6e8a-4adf-b8f5-6c0752cd76a3	148.64.15.68	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:08.248	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0034.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:08.573	dc446104-4fae-4d05-bb1d-8ad3ac9f3ea6	148.64.15.9	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:08.573	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0357.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:08.981	48da92f5-20ce-40b1-a0d5-b27f95525960	148.64.15.9	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:08.981	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0377.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:09.390	c8c39bcf-1d5b-4009-84ca-513a7823bc0c	148.64.15.68	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:09.390	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0665.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:09.766	aa27ee30-f632-40f8-8eb8-08d6ae682c46	148.64.15.63	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:09.766	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0580.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:09.821	6f059104-c9bb-4d39-9550-b3dbc8bf1cd1	148.64.15.9	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:09.821	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0686.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:10.191	13487f86-3062-4105-93a6-0a8099734976	168.149.146.15	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-77.47	28/11/2024, 10:34:10.191	AMRS	EUS2	PRD	Personal	GPO	4.00:00:00	10	m06psspg0055.aberdeen.aberdeen-asset.com
28/11/2024, 15:34:10.386	7ffa73e5-f262-4d6d-9ec9-2c3409c8f893	148.64.15.68	Azure Monitor Agent	Windows	Windows 10 Enterprise	10	0	1.30.0.0	Direct	-6.24	28/11/2024, 15:34:10.386	EMEA	NEU	PRD	Personal	Intune	4.00:00:00	15	m01psspi0028.aberdeen.aberdeen-asset.com



let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let paramRangeStart = todatetime('", 
            DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", 
            DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let binSize = 24h;",
            "Perf",
            "| extend LocalTime = case(",
            "    Computer startswith 'M01' or Computer startswith 'M04', datetime_add('hour', 0, TimeGenerated),",  // EMEA (UTC+0)
            "    Computer startswith 'M13' or Computer startswith 'M14', datetime_add('hour', 8, TimeGenerated),",  // APAC (UTC+8)
            "    Computer startswith 'M06' or Computer startswith 'M09', datetime_add('hour', -5, TimeGenerated),", // AMRS (UTC-5)
            "    datetime_add('hour', 0, TimeGenerated)",  // Default fallback
            "),",
            "Geo = case(",
            "    Computer startswith 'M01' or Computer startswith 'M04', 'EMEA',",
            "    Computer startswith 'M13' or Computer startswith 'M14', 'APAC',",
            "    Computer startswith 'M06' or Computer startswith 'M09', 'AMRS',",
            "    'Other'",
            "),",
            "Region = case(",
            "    Computer startswith 'M01', 'NEU',",
            "    Computer startswith 'M04', 'WEU',",
            "    Computer startswith 'M13', 'EAS',",
            "    Computer startswith 'M14', 'SEA',",
            "    Computer startswith 'M06', 'EUS2',",
            "    Computer startswith 'M09', 'CUS',",
            "    'Other'",
            "),",
            "Environment = case(",
            "    substring(Computer, 3, 1) == 'T', 'TST',",
            "    substring(Computer, 3, 1) == 'U', 'UAT',",
            "    substring(Computer, 3, 1) == 'D', 'DEV',",
            "    Computer contains 'NACR', 'CRIMS NonProdA',",
            "    Computer contains 'NBCR', 'CRIMS NonProdB',",
            "    Computer contains 'OHCR', 'OAT CRIMS High',",
            "    Computer contains 'OMCR', 'OAT CRIMS Medium',",
            "    Computer contains 'OLCR', 'OAT CRIMS Low',",
            "    Computer contains 'PHCR', 'PRD CRIMS High',",
            "    Computer contains 'PMCR', 'PRD CRIMS High',",
            "    Computer contains 'PLCR', 'PRD CRIMS Low',",
            "    substring(Computer, 3, 1) == 'P', 'PRD',",
            "    'Other'",
            "),",
            "SessionHostPoolType = case(",
            "    Computer contains 'MSN', 'MultiSession',",
            "    Computer contains 'SSP', 'Personal',",
            "    Computer contains 'NACR', 'MultiSession',",
            "    Computer contains 'NBCR', 'MultiSession',",
            "    Computer contains 'OHCR', 'MultiSession',",
            "    Computer contains 'OMCR', 'MultiSession',",
            "    Computer contains 'OLCR', 'MultiSession',",
            "    Computer contains 'PHCR', 'MultiSession',",
            "    Computer contains 'PMCR', 'MultiSession',",
            "    Computer contains 'PLCR', 'MultiSession',",
            "    Computer contains 'DVLDT', 'Personal',",
            "    'Other'",
            "),",
            "ManagementPlane = case(",
            "    substring(Computer, 7, 1) == 'I', 'Intune',",
            "    substring(Computer, 7, 1) == 'G', 'GPO',",
            "    Computer contains 'DVLDT', 'Intune',",
            "    'Other'",
            "),",
            "| extend DayOfWeek = dayofweek(LocalTime)",
            "| extend HourOfDay = hourofday(LocalTime)",
            "| extend SessionHostName = trim(' ', tolower(Computer))",
            "| project-away Computer",
            "| where LocalTime between (paramRangeStart .. paramRangeEnd)",
            "| where ObjectName == 'Memory' and CounterName == '% Committed Bytes In Use'",
            "| where dayofweek(LocalTime) between (1d .. 5d)",
            "| where hourofday(LocalTime) between (8 .. 17)",
            "| summarize AVG_RAM_CommittedBytesInUse = round(avg(CounterValue), 2),",
            "          MAX_RAM_CommittedBytesInUse = round(max(CounterValue), 2),",
            "          MIN_RAM_CommittedBytesInUse = round(min(CounterValue), 2),",
            "          MED_RAM_CommittedBytesInUse = round(percentile(CounterValue, 50), 2),",
            "          ItemsPerTimeBin = count()",
            "  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, ManagementPlane, SessionHostPoolType",
            "| project TimeGenerated = BinnedTime, SessionHostName, SessionHostPoolType, Geo, Region, Environment, ManagementPlane, AVG_RAM_CommittedBytesInUse, MAX_RAM_CommittedBytesInUse, MIN_RAM_CommittedBytesInUse, MED_RAM_CommittedBytesInUse, ItemsPerTimeBin"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    )
in
    Source



let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents("https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg", "nmw-app-law-fwjv4wn75m4qg", "let paramRangeStart = todatetime('"", DateTime.ToText(strRangeStart, ""yyyy-MM-ddTHH:mm:ss""), ""');#(lf)let paramRangeEnd = todatetime('"", DateTime.ToText(strRangeEnd, ""yyyy-MM-ddTHH:mm:ss""), ""');#(lf)let binSize = 24h;#(lf)Perf#(lf)| extend #(lf)    LocalTime = case(#(lf)        Computer startswith ""M01"" or Computer startswith ""M04"", datetime_add('hour', 0, TimeGenerated),  // EMEA (UTC+0)#(lf)        Computer startswith ""M13"" or Computer startswith ""M14"", datetime_add('hour', 8, TimeGenerated),  // APAC (UTC+8)#(lf)        Computer startswith ""M06"" or Computer startswith ""M09"", datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)#(lf)        datetime_add('hour', 0, TimeGenerated) // Default fallback#(lf)    ),#(lf)    Geo = case(#(lf)        Computer startswith ""M01"" or Computer startswith ""M04"", ""EMEA"",#(lf)        Computer startswith ""M13"" or Computer startswith ""M14"", ""APAC"",#(lf)        Computer startswith ""M06"" or Computer startswith ""M09"", ""AMRS"",#(lf)        ""Other""#(lf)    ),#(lf)    Region = case(#(lf)        Computer startswith ""M01"", ""NEU"",#(lf)        Computer startswith ""M04"", ""WEU"",#(lf)        Computer startswith ""M13"", ""EAS"",#(lf)        Computer startswith ""M14"", ""SEA"",#(lf)        Computer startswith ""M06"", ""EUS2"",#(lf)        Computer startswith ""M09"", ""CUS"",#(lf)        ""Other""#(lf)    ), #(lf)    Environment = case(#(lf)        substring(Computer, 3, 1) == ""T"", ""TST"", #(lf)        substring(Computer, 3, 1) == ""U"", ""UAT"", #(lf)        substring(Computer, 3, 1) == ""D"", ""DEV"", #(lf)        Computer contains ""NACR"", ""CRIMS NonProdA"",#(lf)        Computer contains ""NBCR"", ""CRIMS NonProdB"",#(lf)        Computer contains ""OHCR"", ""OAT CRIMS High"",#(lf)        Computer contains ""OMCR"", ""OAT CRIMS Medium"",#(lf)        Computer contains ""OLCR"", ""OAT CRIMS Low"",#(lf)        Computer contains ""PHCR"", ""PRD CRIMS High"",#(lf)        Computer contains ""PMCR"", ""PRD CRIMS High"",#(lf)        Computer contains ""PLCR"", ""PRD CRIMS Low"",#(lf)        substring(Computer, 3, 1) == ""P"", ""PRD"", #(lf)        ""Other""#(lf)    ),#(lf)    SessionHostPoolType = case(#(lf)        Computer contains ""MSN"", ""MultiSession"",#(lf)        Computer contains ""SSP"", ""Personal"",#(lf)        Computer contains ""NACR"", ""MultiSession"",#(lf)        Computer contains ""NBCR"", ""MultiSession"",#(lf)        Computer contains ""OHCR"", ""MultiSession"",#(lf)        Computer contains ""OMCR"", ""MultiSession"",#(lf)        Computer contains ""OLCR"", ""MultiSession"",#(lf)        Computer contains ""PHCR"", ""MultiSession"",#(lf)        Computer contains ""PMCR"", ""MultiSession"",#(lf)        Computer contains ""PLCR"", ""MultiSession"",#(lf)        Computer contains ""DVLDT"", ""Personal"",#(lf)        ""Other""#(lf)    ),#(lf)    ManagementPlane = case(#(lf)        substring(Computer, 7, 1) == ""I"", ""Intune"",#(lf)        substring(Computer, 7, 1) == ""G"", ""GPO"",#(lf)        Computer contains ""DVLDT"", ""Intune"",#(lf)        ""Other""#(lf)    )#(lf)| extend DayOfWeek = dayofweek (LocalTime)#(lf)| extend HourOfDay = hourofday(LocalTime)#(lf)| extend SessionHostName = trim(' ', tolower(Computer))#(lf)| project-away Computer#(lf)| where LocalTime  between (paramRangeStart .. paramRangeEnd)#(lf)| where ObjectName == 'Memory' and CounterName == '% Committed Bytes In Use'#(lf)| where dayofweek(LocalTime) between (1d .. 5d)#(lf)| where hourofday(LocalTime)  between (8 .. 17)#(lf)| summarize AVG_RAM_CommittedBytesInUse = round(avg(CounterValue), 2), #(lf)            MAX_RAM_CommittedBytesInUse = round(max(CounterValue), 2), #(lf)            MIN_RAM_CommittedBytesInUse = round(min(CounterValue), 2),#(lf)            MED_RAM_CommittedBytesInUse = round(percentile(CounterValue, 50), 2),#(lf)            ItemsPerTimeBin = count() // Counting the number of entries per time bin#(lf)  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, ManagementPlane, SessionHostPoolType#(lf)  | project TimeGenerated = BinnedTime, SessionHostName, SessionHostPoolType, Geo, Region, Environment, ManagementPlane, AVG_RAM_CommittedBytesInUse, MAX_RAM_CommittedBytesInUse, MIN_RAM_CommittedBytesInUse, MED_RAM_CommittedBytesInUse, ItemsPerTimeBin", [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null])
in
    Source






let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let paramRangeStart = todatetime('", 
            DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", 
            DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let binSize = 24h;",
            "Perf",
            "| extend LocalTime = case(",
            "        Computer startswith 'M01' or Computer startswith 'M04', datetime_add('hour', 0, TimeGenerated),  // EMEA (UTC+0)",
            "        Computer startswith 'M13' or Computer startswith 'M14', datetime_add('hour', 8, TimeGenerated),  // APAC (UTC+8)",
            "        Computer startswith 'M06' or Computer startswith 'M09', datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)",
            "        datetime_add('hour', 0, TimeGenerated) // Default fallback",
            "    ),",
            "    Geo = case(",
            "        Computer startswith 'M01' or Computer startswith 'M04', 'EMEA',",
            "        Computer startswith 'M13' or Computer startswith 'M14', 'APAC',",
            "        Computer startswith 'M06' or Computer startswith 'M09', 'AMRS',",
            "        'Other'",
            "    ),",
            "    Region = case(",
            "        Computer startswith 'M01', 'NEU',",
            "        Computer startswith 'M04', 'WEU',",
            "        Computer startswith 'M13', 'EAS',",
            "        Computer startswith 'M14', 'SEA',",
            "        Computer startswith 'M06', 'EUS2',",
            "        Computer startswith 'M09', 'CUS',",
            "        'Other'",
            "    ),",
            "    Environment = case(",
            "        substring(Computer, 3, 1) == 'T', 'TST',",
            "        substring(Computer, 3, 1) == 'U', 'UAT',",
            "        substring(Computer, 3, 1) == 'D', 'DEV',",
            "        Computer contains 'NACR', 'CRIMS NonProdA',",
            "        Computer contains 'NBCR', 'CRIMS NonProdB',",
            "        Computer contains 'OHCR', 'OAT CRIMS High',",
            "        Computer contains 'OMCR', 'OAT CRIMS Medium',",
            "        Computer contains 'OLCR', 'OAT CRIMS Low',",
            "        Computer contains 'PHCR', 'PRD CRIMS High',",
            "        Computer contains 'PMCR', 'PRD CRIMS High',",
            "        Computer contains 'PLCR', 'PRD CRIMS Low',",
            "        substring(Computer, 3, 1) == 'P', 'PRD',",
            "        'Other'",
            "    ),",
            "    SessionHostPoolType = case(",
            "        Computer contains 'MSN', 'MultiSession',",
            "        Computer contains 'SSP', 'Personal',",
            "        Computer contains 'NACR', 'MultiSession',",
            "        Computer contains 'NBCR', 'MultiSession',",
            "        Computer contains 'OHCR', 'MultiSession',",
            "        Computer contains 'OMCR', 'MultiSession',",
            "        Computer contains 'OLCR', 'MultiSession',",
            "        Computer contains 'PHCR', 'MultiSession',",
            "        Computer contains 'PMCR', 'MultiSession',",
            "        Computer contains 'PLCR', 'MultiSession',",
            "        Computer contains 'DVLDT', 'Personal',",
            "        'Other'",
            "    ),",
            "    ManagementPlane = case(",
            "        substring(Computer, 7, 1) == 'I', 'Intune',",
            "        substring(Computer, 7, 1) == 'G', 'GPO',",
            "        Computer contains 'DVLDT', 'Intune',",
            "        'Other'",
            "    )",
            "| extend DayOfWeek = dayofweek(LocalTime)",
            "| extend HourOfDay = hourofday(LocalTime)",
            "| extend SessionHostName = trim(' ', tolower(Computer))",
            "| project-away Computer",
            "| where LocalTime between (paramRangeStart .. paramRangeEnd)",
            "| where ObjectName == 'Memory' and CounterName == '% Committed Bytes In Use'",
            "| where dayofweek(LocalTime) between (1d .. 5d)",
            "| where hourofday(LocalTime) between (8 .. 17)",
            "| summarize AVG_RAM_CommittedBytesInUse = round(avg(CounterValue), 2),",
            "          MAX_RAM_CommittedBytesInUse = round(max(CounterValue), 2),",
            "          MIN_RAM_CommittedBytesInUse = round(min(CounterValue), 2),",
            "          MED_RAM_CommittedBytesInUse = round(percentile(CounterValue, 50), 2),",
            "          ItemsPerTimeBin = count()",
            "  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, ManagementPlane, SessionHostPoolType",
            "| project TimeGenerated = BinnedTime, SessionHostName, SessionHostPoolType, Geo, Region, Environment, ManagementPlane, AVG_RAM_CommittedBytesInUse, MAX_RAM_CommittedBytesInUse, MIN_RAM_CommittedBytesInUse, MED_RAM_CommittedBytesInUse, ItemsPerTimeBin"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    )
in
    Source








let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');
let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');
let binSize = 24h;
let timeRangeStart = now(-1d);
let timeRangeEnd = now();
Perf
| extend 
    LocalTime = case(
        Computer startswith "M01" or Computer startswith "M04", datetime_add('hour', 0, TimeGenerated),  // EMEA (UTC+0)
        Computer startswith "M13" or Computer startswith "M14", datetime_add('hour', 8, TimeGenerated),  // APAC (UTC+8)
        Computer startswith "M06" or Computer startswith "M09", datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)
        datetime_add('hour', 0, TimeGenerated) // Default fallback
    ),
    Geo = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    ),
    Region = case(
        Computer startswith "M01", "NEU",
        Computer startswith "M04", "WEU",
        Computer startswith "M13", "EAS",
        Computer startswith "M14", "SEA",
        Computer startswith "M06", "EUS2",
        Computer startswith "M09", "CUS",
        "Other"
    ), 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        Computer contains "DVLDT", "Personal",
        "Other"
    ),
    ManagementPlane = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        Computer contains "DVLDT", "Intune",
        "Other"
    )
| extend DayOfWeek = dayofweek (LocalTime)
| extend HourOfDay = hourofday(LocalTime)
| extend SessionHostName = trim(' ', tolower(Computer))
| project-away Computer
| where LocalTime  between (paramRangeStart .. paramRangeEnd)
| where ObjectName == 'Memory' and CounterName == '% Committed Bytes In Use'
| where dayofweek(LocalTime) between (1d .. 5d)
| where hourofday(LocalTime)  between (8 .. 17)
| summarize AVG_RAM_CommittedBytesInUse = round(avg(CounterValue), 2), 
            MAX_RAM_CommittedBytesInUse = round(max(CounterValue), 2), 
            MIN_RAM_CommittedBytesInUse = round(min(CounterValue), 2),
            MED_RAM_CommittedBytesInUse = round(percentile(CounterValue, 50), 2),
            ItemsPerTimeBin = count() // Counting the number of entries per time bin
  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, ManagementPlane, SessionHostPoolType
  | project TimeGenerated = BinnedTime, SessionHostName, SessionHostPoolType, Geo, Region, Environment, ManagementPlane, AVG_RAM_CommittedBytesInUse, MAX_RAM_CommittedBytesInUse, MIN_RAM_CommittedBytesInUse, MED_RAM_CommittedBytesInUse, ItemsPerTimeBin
Swap out the KQL below for the one above

let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let paramRangeStart = todatetime('", 
            DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", 
            DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let binSize = 24h;",
            "Perf",
            "| extend LocalTime = case(",
            "        Computer startswith 'M01' or Computer startswith 'M04', datetime_add('hour', 0, TimeGenerated),",
            "        Computer startswith 'M13' or Computer startswith 'M14', datetime_add('hour', 8, TimeGenerated),",
            "        Computer startswith 'M06' or Computer startswith 'M09', datetime_add('hour', -5, TimeGenerated),",
            "        datetime_add('hour', 0, TimeGenerated)",
            "    ),",
            "    Geo = case(",
            "        Computer startswith 'M01' or Computer startswith 'M04', 'EMEA',",
            "        Computer startswith 'M13' or Computer startswith 'M14', 'APAC',",
            "        Computer startswith 'M06' or Computer startswith 'M09', 'AMRS',",
            "        'Other'",
            "    ),",
            "    Region = case(",
            "        Computer startswith 'M01', 'NEU',",
            "        Computer startswith 'M04', 'WEU',",
            "        Computer startswith 'M13', 'EAS',",
            "        Computer startswith 'M14', 'SEA',",
            "        Computer startswith 'M06', 'EUS2',",
            "        Computer startswith 'M09', 'CUS',",
            "        'Other'",
            "    ),",
            "    Environment = case(",
            "        substring(Computer, 3, 1) == 'T', 'TST',",
            "        substring(Computer, 3, 1) == 'U', 'UAT',",
            "        substring(Computer, 3, 1) == 'D', 'DEV',",
            "        Computer contains 'NACR', 'CRIMS NonProdA',",
            "        Computer contains 'NBCR', 'CRIMS NonProdB',",
            "        Computer contains 'OHCR', 'OAT CRIMS High',",
            "        Computer contains 'OMCR', 'OAT CRIMS Medium',",
            "        Computer contains 'OLCR', 'OAT CRIMS Low',",
            "        Computer contains 'PHCR', 'PRD CRIMS High',",
            "        Computer contains 'PMCR', 'PRD CRIMS High',",
            "        Computer contains 'PLCR', 'PRD CRIMS Low',",
            "        substring(Computer, 3, 1) == 'P', 'PRD',",
            "        'Other'",
            "    ),",
            "    SessionHostPoolType = case(",
            "        Computer contains 'MSN', 'MultiSession',",
            "        Computer contains 'SSP', 'Personal',",
            "        Computer contains 'NACR', 'MultiSession',",
            "        Computer contains 'NBCR', 'MultiSession',",
            "        Computer contains 'OHCR', 'MultiSession',",
            "        Computer contains 'OMCR', 'MultiSession',",
            "        Computer contains 'OLCR', 'MultiSession',",
            "        Computer contains 'PHCR', 'MultiSession',",
            "        Computer contains 'PMCR', 'MultiSession',",
            "        Computer contains 'PLCR', 'MultiSession',",
            "        Computer contains 'DVLDT', 'Personal',",
            "        'Other'",
            "    ),",
            "    ManagementPlane = case(",
            "        substring(Computer, 7, 1) == 'I', 'Intune',",
            "        substring(Computer, 7, 1) == 'G', 'GPO',",
            "        Computer contains 'DVLDT', 'Intune',",
            "        'Other'",
            "    )",
            "| extend DayOfWeek = dayofweek(LocalTime)",
            "| extend HourOfDay = hourofday(LocalTime)",
            "| extend SessionHostName = trim(' ', tolower(Computer))",
            "| project-away Computer",
            "| where LocalTime between (paramRangeStart .. paramRangeEnd)",
            "| where ObjectName == 'Processor Information' and CounterName == '% Processor Time'",
            "| where dayofweek(LocalTime) between (1d .. 5d)",
            "| where hourofday(LocalTime) between (8 .. 17)",
            "| summarize AVG_CPU = round(avg(CounterValue), 2),",
            "          MAX_CPU = round(max(CounterValue), 2),",
            "          MIN_CPU = round(min(CounterValue), 2),",
            "          MED_CPU = round(percentile(CounterValue, 50), 2),",
            "          ItemsPerTimeBin = count()",
            "  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, SessionHostPoolType, ManagementPlane",
            "| extend SessionHostKey = substring(SessionHostName, 0, 8)",
            "| project TimeGenerated = BinnedTime, SessionHostName, SessionHostPoolType, SessionHostKey, Geo, Region, Environment, ManagementPlane, AVG_CPU, MAX_CPU, MED_CPU, MIN_CPU, ItemsPerTimeBin"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    )
in
    Source







let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "Perf",
            "| where TimeGenerated between (paramRangeStart..paramRangeEnd)",
            "| extend SessionHostName = trim(' ', tolower(Computer))",
            "| project-away Computer",
            "| summarize arg_max(TimeGenerated, *) by SessionHostName",
            "| extend SessionHostKey = substring(SessionHostName, 0, 8)",
            "| project TimeGenerated, SessionHostName, SessionHostKey"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    ),
    #"Removed Duplicates" = Table.Distinct(Source)
in
    #"Removed Duplicates"


let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');
let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');
Perf
| where TimeGenerated between (paramRangeStart..paramRangeEnd)
| extend SessionHostName = trim(' ', tolower(Computer))
|project-away Computer
| summarize arg_max(TimeGenerated, *) by SessionHostName
| extend SessionHostKey = substring(SessionHostName, 0, 8)
| project TimeGenerated, SessionHostName, SessionHostKey

replace KQL in M-Query below with KQL above.

let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "WVDConnections",
            "| where TimeGenerated between (paramRangeStart..paramRangeEnd)",
            "| where SessionHostName != '<>'",
            "| extend HostPoolName = tostring(split(_ResourceId, '/')[-1])",
            "| summarize arg_max(TimeGenerated, *) by SessionHostName",
            "| extend SessionHostName = trim(' ', tolower(SessionHostName))",
            "| project TimeGenerated, SessionHostName, HostPoolName"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    ),
    #"Removed Duplicates" = Table.Distinct(Source)
in
    #"Removed Duplicates"

Working KQL for CPU

let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');
let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');
let binSize = 24h;
let timeRangeStart = now(-1d);
let timeRangeEnd = now();
Perf
| extend 
    LocalTime = case(
        Computer startswith "M01" or Computer startswith "M04", datetime_add('hour', 0, TimeGenerated),  // EMEA (UTC+0)
        Computer startswith "M13" or Computer startswith "M14", datetime_add('hour', 8, TimeGenerated),  // APAC (UTC+8)
        Computer startswith "M06" or Computer startswith "M09", datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)
        datetime_add('hour', 0, TimeGenerated) // Default fallback
    ),
    Geo = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    ),
    Region = case(
        Computer startswith "M01", "NEU",
        Computer startswith "M04", "WEU",
        Computer startswith "M13", "EAS",
        Computer startswith "M14", "SEA",
        Computer startswith "M06", "EUS2",
        Computer startswith "M09", "CUS",
        "Other"
    ), 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        Computer contains "DVLDT", "Personal",
        "Other"
    ),
    ManagementPlane = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        Computer contains "DVLDT", "Intune",
        "Other"
    )
| extend DayOfWeek = dayofweek (LocalTime)
| extend HourOfDay = hourofday(LocalTime)
| extend SessionHostName = trim(' ', tolower(Computer))
| project-away Computer
| where LocalTime  between (paramRangeStart .. paramRangeEnd)
| where ObjectName == "Processor Information" and CounterName == "% Processor Time"
| where dayofweek(LocalTime) between (1d .. 5d)
| where hourofday(LocalTime)  between (8 .. 17)
| summarize AVG_CPU = round(avg(CounterValue), 2), 
            MAX_CPU = round(max(CounterValue), 2), 
            MIN_CPU = round(min(CounterValue), 2),
            MED_CPU = round(percentile(CounterValue, 50), 2),
            ItemsPerTimeBin = count() // Counting the number of entries per time bin
  by BinnedTime = bin(LocalTime, binSize), SessionHostName, Geo, Region, Environment, ManagementPlane
  | project TimeGenerated = BinnedTime, SessionHostName, Geo, Region, Environment, ManagementPlane, AVG_CPU, MAX_CPU, MED_CPU, MIN_CPU, ItemsPerTimeBin
