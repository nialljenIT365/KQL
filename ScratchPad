let
    // Source query from Azure Data Explorer
    Source = AzureDataExplorer.Contents(
        LAWClusterURLAVD, 
        LAWNameAVD, 
        "WVDConnections" &
        "#(lf)| where TimeGenerated >= ago(30d)" &
        "#(lf)| where State in (""Connected"")" &
        "#(lf)| where not(isempty(UserName)) and UserName != ""<>""" &  // Check for empty or "<>"
        "#(lf)| extend UserName = trim(@""\\s"", tolower(UserName))" &
        "#(lf)| extend Protocol = iff(UdpUse in (""0"", ""<>""), ""TCP"", ""UDP"")" &
        "#(lf)| extend ClientType = " &
        "iff(ClientType == ""com.microsoft.rdc.windows.msrdc.x64"", ""Win RD x64 (MSI)"", " &
        "iff(ClientType == ""com.igel.rdc.linux"", ""IGEL"", " &
        "iff(ClientType == ""com.microsoft.rdc.windows.store"", ""Win RD Store"", " &
        "iff(ClientType == ""com.microsoft.rdc.html"", ""Web Browser (HTML5)"", " &
        "iff(ClientType == ""com.microsoft.rdc.macos"", ""MAC OS"", " &
        "iff(ClientType == ""com.microsoft.rdc.macos.beta"", ""MAC OS (Beta)"", " &
        "iff(ClientType == ""com.microsoft.rdc.osx.beta"", ""MAC OSx (Beta)"", " &
        "iff(ClientType == ""cpc.web.beta"", ""Windows Web App (Preview)"", " &
        "iff(ClientType == ""com.microsoft.rdc.windows.msrdc.arm64"", ""Win RD ARM 64 (MSI)"", " &
        "iff(ClientType == ""com.microsoft.rdc.windows.wa.msrdc.msix.arm64"", ""Win RD ARM 64 (MSI)"", " &
        "iff(ClientType == ""com.microsoft.rdc.ios"", ""iOS"", " &
        "iff(ClientType == ""com.microsoft.rdc.androidx.beta"", ""Android OS (Beta)"", " &
        "iff(ClientType == ""com.microsoft.rdc.androidx"", ""Android OS"", " &
        "iff(ClientType == ""com.microsoft.rdc.windows.msrdc.msix.x64"", ""Win RD x64 (MSIX)"", " &
        "iff(ClientType == ""com.microsoft.rdc.windows.wa.msrdc.msix.x64"", ""Win App x64 (MSIX)"", " &
        """Other"")))))))))))))))" &
        "#(lf)| extend HostPoolName = tostring(split(_ResourceId, ""/"")[-1])" &
        "#(lf)| extend HostPoolName = trim("" "", tolower(HostPoolName))" &       // Trim spaces and convert to lowercase
        "#(lf)| extend Timekey = format_datetime(TimeGenerated, 'HHmm')",  // Format time without colons and period

        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    ),
    #"Duplicated Column" = Table.DuplicateColumn(Source, "TimeGenerated", "TimeGenerated - Copy"),
    #"Duplicated Column1" = Table.DuplicateColumn(#"Duplicated Column", "TimeGenerated", "TimeGenerated - Copy.1"),
    #"Reordered Columns" = Table.ReorderColumns(#"Duplicated Column1",{"TenantId", "TimeGenerated", "TimeGenerated - Copy", "TimeGenerated - Copy.1", "CorrelationId", "UserName", "State", "ClientOS", "ClientVersion", "ClientType", "ClientIPAddress", "ClientSideIPAddress", "PredecessorConnectionId", "ConnectionType", "ResourceAlias", "SessionHostName", "SessionHostPoolType", "SessionHostAzureVmId", "SessionHostIPAddress", "SessionHostOSVersion", "SessionHostOSDescription", "SessionHostAgentVersion", "SessionHostSxSStackVersion", "SessionHostSessionId", "AadTenantId", "GatewayRegion", "UdpUse", "SessionHostJoinType", "IsClientPrivateLink", "IsSessionHostPrivateLink", "TransportType", "SourceSystem", "Type", "_ResourceId", "Protocol", "HostPoolName", "Timekey"}),
    #"Renamed Columns" = Table.RenameColumns(#"Reordered Columns",{{"TimeGenerated - Copy", "Date"}, {"TimeGenerated - Copy.1", "Time"}}),
    #"Changed Type" = Table.TransformColumnTypes(#"Renamed Columns",{{"Date", type date}, {"Time", type text}}),
    #"Extracted Text After Delimiter" = Table.TransformColumns(#"Changed Type", {{"Time", each Text.AfterDelimiter(_, "T"), type text}}),
    #"Extracted First Characters" = Table.TransformColumns(#"Extracted Text After Delimiter", {{"Time", each Text.Start(_, 12), type text}}),
    #"Changed Type1" = Table.TransformColumnTypes(#"Extracted First Characters",{{"Time", type time}})
in
    #"Changed Type1"
