let
    IPToNumber = (
        ip as text
    ) => let
        // Error handling: if IP is blank or contains invalid characters like "<>", return "0.0.0.0"
        currentIP = if Text.Contains(ip, "<") or Text.Contains(ip, ">") or Text.Length(ip) = 0 then "0.0.0.0" else ip,

        // Split the IP into octets
        ListOfOctets = Text.Split(currentIP, "."),

        // Pad the list with zeros if fewer than 4 octets are provided
        PaddedOctets = List.FirstN(List.Combine({ListOfOctets, {"0", "0", "0", "0"}}), 4),

        ListOfIndexItems = {0..3},

        // Calculate the numeric value of the IP address
        IPNumber = List.Accumulate(
            ListOfIndexItems, 0, (state, current) => state +  
            Number.FromText(PaddedOctets{current}) * 
            Number.Power(256, 3 - current)
        )
    in
        IPNumber
in
    IPToNumber
