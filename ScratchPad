# Ensure you have the Az module installed and imported
# Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force
# Import-Module Az

# Define the specific user and VM details
$userUPN = "Niall.Jennings@abrdn.com"
$vmName = "M01DDEVT001"
$roleName = "Virtual Machine Administrator Login"  # Role for VM administrator access

# Get the VM ID to use as the scope for the role assignment
$scope = (Get-AzVM -Name $vmName).Id

# Check if the user already has the role assigned
$roleAssignment = Get-AzRoleAssignment -ObjectId (Get-AzADUser -UserPrincipalName $userUPN).Id -Scope $scope -ErrorAction SilentlyContinue

if ($roleAssignment) {
    Write-Output "$userUPN is already assigned the Virtual Machine Administrator role on $vmName."
}
else {
    Write-Output "Assigning Virtual Machine Administrator role to $userUPN on $vmName."
    try {
        New-AzRoleAssignment -ObjectId (Get-AzADUser -UserPrincipalName $userUPN).Id -RoleDefinitionName $roleName -Scope $scope
        Write-Output "Successfully assigned Virtual Machine Administrator role to $userUPN on $vmName."
    }
    catch {
        Write-Error "ERROR: Failed to assign Virtual Machine Administrator role to $userUPN on $vmName. $_"
    }
}





Niall.Jennings@abrdn.com
M01DDEVT001


# Ensure you have the Az module installed and imported
# Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force
# Import-Module Az

# Variables
# Assume $DesktopUser (User Principal Name of the user, e.g., user@contoso.com) and $AzureVMName are already assigned

# Define the required variables
$roleName = "Virtual Machine Administrator Login"  # Role for VM administrator access
$scope = (Get-AzVM -Name $AzureVMName).Id  # Get the VM ID to use as the scope for the role assignment

# Check if the user already has the role assigned
$roleAssignment = Get-AzRoleAssignment -ObjectId (Get-AzADUser -UserPrincipalName $DesktopUser).Id -Scope $scope -ErrorAction SilentlyContinue

if ($roleAssignment) {
    Write-Output "$DesktopUser is already assigned the Virtual Machine Administrator role on $AzureVMName."
}
else {
    Write-Output "Assigning Virtual Machine Administrator role to $DesktopUser on $AzureVMName."
    try {
        New-AzRoleAssignment -ObjectId (Get-AzADUser -UserPrincipalName $DesktopUser).Id -RoleDefinitionName $roleName -Scope $scope
        Write-Output "Successfully assigned Virtual Machine Administrator role to $DesktopUser on $AzureVMName."
    }
    catch {
        Write-Error "ERROR: Failed to assign Virtual Machine Administrator role to $DesktopUser on $AzureVMName. $_"
    }
}






Virtual Machine Administrator


#description: Adds user assigned to personal desktop to local Administrators group on session host VM based on device join type.
#execution mode: Combined
#tags: Nerdio
<#
Notes:
This script checks if the device is Hybrid Azure AD Joined or Entra ID Joined.
If Hybrid, it adds the AD user to the local Administrators group.
If Entra ID Joined, it adds the Azure AD user to the local Administrators group.
It also checks if the user is already a local admin before attempting to add them.
Ensure $DesktopUser is provided in UPN format (e.g., user@contoso.com) for Entra ID joined devices.
#>

# Output the Desktop User variable for verification
Write-Output "Desktop User: $DesktopUser"

# Check if $DesktopUser is populated
if (-not $DesktopUser) {
    Write-Error -Message 'ERROR: No Desktop User Specified. This VM may not be a personal Desktop.'
    exit
}

# Run dsregcmd /status to determine join type
$dsregStatus = dsregcmd /status

# Define a function to check if the user is already in the Administrators group
function Is-UserInLocalAdminGroup {
    param (
        [string]$userName
    )
    $admins = Get-LocalGroupMember -Group "Administrators" | Where-Object { $_.Name -eq $userName }
    return $admins -ne $null
}

if ($dsregStatus -match "DomainJoined\s*:\s*YES" -and $dsregStatus -match "AzureAdJoined\s*:\s*YES") {
    # Device is Hybrid Azure AD Joined, use standard AD format
    Write-Output "Device is Hybrid Azure AD Joined."

    if (Is-UserInLocalAdminGroup -userName "$DesktopUser") {
        Write-Output "$DesktopUser is already a member of the Administrators group."
    }
    else {
        Write-Output "Adding AD user $DesktopUser to the local Administrators group."
        try {
            Add-LocalGroupMember -Group "Administrators" -Member "$DesktopUser"
            Write-Output "Successfully added $DesktopUser to the Administrators group."
        }
        catch {
            Write-Error -Message "ERROR: Failed to add $DesktopUser to the Administrators group. $_"
        }
    }
}
elseif ($dsregStatus -match "AzureAdJoined\s*:\s*YES" -and $dsregStatus -notmatch "DomainJoined\s*:\s*YES") {
    # Device is Entra ID (Azure AD) Joined, use Azure AD format
    Write-Output "Device is Entra ID Joined."

    # Format the user for Azure AD
    $AzureADUser = "AzureAD\$DesktopUser"

    if (Is-UserInLocalAdminGroup -userName $AzureADUser) {
        Write-Output "$AzureADUser is already a member of the Administrators group."
    }
    else {
        Write-Output "Adding Azure AD user $AzureADUser to the local Administrators group."
        try {
            Add-LocalGroupMember -Group "Administrators" -Member $AzureADUser
            Write-Output "Successfully added $AzureADUser to the Administrators group."
        }
        catch {
            Write-Error -Message "ERROR: Failed to add $AzureADUser to the Administrators group. $_"
        }
    }
}
else {
    Write-Error -Message "ERROR: Device is neither Hybrid Azure AD Joined nor Entra ID Joined."
    exit
}




#description: Adds user assigned to personal desktop to local Administrators group on session host VM based on device join type.
#execution mode: Combined
#tags: Nerdio
<#
Notes:
This script checks if the device is Hybrid Azure AD Joined or Entra ID Joined.
If Hybrid, it adds the AD user to the local Administrators group.
If Entra ID Joined, it adds the Azure AD user to the local Administrators group.
It also checks if the user is already a local admin before attempting to add them.
If the addition fails, it retries once to ensure the user is added.
Ensure $DesktopUser is provided in UPN format (e.g., user@contoso.com) for Entra ID joined devices.
#>

# Output the Desktop User variable for verification
Write-Output "Desktop User: $DesktopUser"

# Check if $DesktopUser is populated
if (-not $DesktopUser) {
    Write-Error -Message 'ERROR: No Desktop User Specified. This VM may not be a personal Desktop.'
    exit
}

# Run dsregcmd /status to determine join type
$dsregStatus = dsregcmd /status

# Define a function to check if the user is in the Administrators group
function Is-UserInLocalAdminGroup {
    param (
        [string]$userName
    )
    $admins = Get-LocalGroupMember -Group "Administrators" | Where-Object { $_.Name -eq $userName }
    return $admins -ne $null
}

# Define a function to add user to the local Administrators group
function Add-UserToAdminGroup {
    param (
        [string]$userName,
        [string]$method
    )
    if ($method -eq "PowerShell") {
        Add-LocalGroupMember -Group "Administrators" -Member $userName
    }
    elseif ($method -eq "NetCommand") {
        & net localgroup administrators /add $userName
    }
}

# Attempt to add the user, checking if the device is Hybrid or Entra ID joined
if ($dsregStatus -match "DomainJoined\s*:\s*YES" -and $dsregStatus -match "AzureAdJoined\s*:\s*YES") {
    # Device is Hybrid Azure AD Joined
    Write-Output "Device is Hybrid Azure AD Joined."
    $userToAdd = "$DesktopUser"
    $method = "PowerShell"
}
elseif ($dsregStatus -match "AzureAdJoined\s*:\s*YES" -and $dsregStatus -notmatch "DomainJoined\s*:\s*YES") {
    # Device is Entra ID Joined
    Write-Output "Device is Entra ID Joined."
    $userToAdd = "AzureAD\$DesktopUser"
    $method = "NetCommand"
}
else {
    Write-Error -Message "ERROR: Device is neither Hybrid Azure AD Joined nor Entra ID Joined."
    exit
}

# Add the user if they are not already in the Administrators group
$retryCount = 0
$maxRetries = 1
while ($retryCount -le $maxRetries) {
    if (Is-UserInLocalAdminGroup -userName $userToAdd) {
        Write-Output "$userToAdd is already a member of the Administrators group."
        break
    }
    else {
        Write-Output "Attempting to add $userToAdd to the Administrators group. Attempt $($retryCount + 1)"
        try {
            Add-UserToAdminGroup -userName $userToAdd -method $method
            Write-Output "Successfully added $userToAdd to the Administrators group."
        }
        catch {
            Write-Error -Message "ERROR: Failed to add $userToAdd to the Administrators group. $_"
        }

        # Check if the addition was successful
        if (Is-UserInLocalAdminGroup -userName $userToAdd) {
            Write-Output "$userToAdd has been successfully added to the Administrators group."
            break
        }
        elseif ($retryCount -eq $maxRetries) {
            Write-Error -Message "ERROR: $userToAdd could not be added to the Administrators group after $($retryCount + 1) attempts."
        }

        # Increment retry count
        $retryCount++
    }
}


#description: Removes user assigned to personal desktop from local Administrators group on session host VM based on device join type.
#execution mode: Combined
#tags: Nerdio
<#
Notes:
This script checks if the device is Hybrid Azure AD Joined or Entra ID Joined.
If Hybrid, it removes the AD user from the local Administrators group.
If Entra ID Joined, it removes the Azure AD user from the local Administrators group.
It also checks if the user is a local admin before attempting to remove them.
If the removal fails, it retries once to ensure the user is removed.
Ensure $DesktopUser is provided in UPN format (e.g., user@contoso.com) for Entra ID joined devices.
#>

# Output the Desktop User variable for verification
Write-Output "Desktop User: $DesktopUser"

# Check if $DesktopUser is populated
if (-not $DesktopUser) {
    Write-Error -Message 'ERROR: No Desktop User Specified. This VM may not be a personal Desktop.'
    exit
}

# Run dsregcmd /status to determine join type
$dsregStatus = dsregcmd /status

# Define a function to check if the user is in the Administrators group
function Is-UserInLocalAdminGroup {
    param (
        [string]$userName
    )
    $admins = Get-LocalGroupMember -Group "Administrators" | Where-Object { $_.Name -eq $userName }
    return $admins -ne $null
}

# Define a function to remove user from the local Administrators group
function Remove-UserFromAdminGroup {
    param (
        [string]$userName,
        [string]$method
    )
    if ($method -eq "PowerShell") {
        Remove-LocalGroupMember -Group "Administrators" -Member $userName
    }
    elseif ($method -eq "NetCommand") {
        & net localgroup administrators /delete $userName
    }
}

# Determine the user format based on the device join type
if ($dsregStatus -match "DomainJoined\s*:\s*YES" -and $dsregStatus -match "AzureAdJoined\s*:\s*YES") {
    # Device is Hybrid Azure AD Joined
    Write-Output "Device is Hybrid Azure AD Joined."
    $userToRemove = "$DesktopUser"
    $method = "PowerShell"
}
elseif ($dsregStatus -match "AzureAdJoined\s*:\s*YES" -and $dsregStatus -notmatch "DomainJoined\s*:\s*YES") {
    # Device is Entra ID Joined
    Write-Output "Device is Entra ID Joined."
    $userToRemove = "AzureAD\$DesktopUser"
    $method = "NetCommand"
}
else {
    Write-Error -Message "ERROR: Device is neither Hybrid Azure AD Joined nor Entra ID Joined."
    exit
}

# Remove the user if they are in the Administrators group
$retryCount = 0
$maxRetries = 1
while ($retryCount -le $maxRetries) {
    if (-not Is-UserInLocalAdminGroup -userName $userToRemove) {
        Write-Output "$userToRemove is not a member of the Administrators group."
        break
    }
    else {
        Write-Output "Attempting to remove $userToRemove from the Administrators group. Attempt $($retryCount + 1)"
        try {
            Remove-UserFromAdminGroup -userName $userToRemove -method $method
            Write-Output "Successfully removed $userToRemove from the Administrators group."
        }
        catch {
            Write-Error -Message "ERROR: Failed to remove $userToRemove from the Administrators group. $_"
        }

        # Check if the removal was successful
        if (-not Is-UserInLocalAdminGroup -userName $userToRemove) {
            Write-Output "$userToRemove has been successfully removed from the Administrators group."
            break
        }
        elseif ($retryCount -eq $maxRetries) {
            Write-Error -Message "ERROR: $userToRemove could not be removed from the Administrators group after $($retryCount + 1) attempts."
        }

        # Increment retry count
        $retryCount++
    }
}


#description: Adds user assigned to personal desktop to local Administrators group on session host VM based on device join type.
#execution mode: Combined
#tags: Nerdio
<#
Notes:
This script checks if the device is Hybrid Azure AD Joined or Entra ID Joined.
If Hybrid, it adds the AD user to the local Administrators group.
If Entra ID Joined, it adds the Azure AD user to the local Administrators group.
It also checks if the user is already a local admin before attempting to add them.
If the addition fails, it retries once to ensure the user is added.
Ensure $DesktopUser is provided in UPN format (e.g., user@contoso.com) for Entra ID joined devices.
#>

# Output the Desktop User variable for verification
Write-Output "Desktop User: $DesktopUser"

# Check if $DesktopUser is populated
if (-not $DesktopUser) {
    Write-Error -Message 'ERROR: No Desktop User Specified. This VM may not be a personal Desktop.'
    exit
}

# Run dsregcmd /status to determine join type
$dsregStatus = dsregcmd /status

# Define a function to check if the user is in the Administrators group
function Is-UserInLocalAdminGroup {
    param (
        [string]$userName
    )
    $admins = Get-LocalGroupMember -Group "Administrators" | Where-Object { $_.Name -eq $userName }
    return $admins -ne $null
}

# Define a function to add user to the local Administrators group
function Add-UserToAdminGroup {
    param (
        [string]$userName,
        [string]$method
    )
    if ($method -eq "PowerShell") {
        Add-LocalGroupMember -Group "Administrators" -Member $userName
    }
    elseif ($method -eq "NetCommand") {
        & net localgroup administrators /add $userName
    }
}

# Attempt to add the user, checking if the device is Hybrid or Entra ID joined
if ($dsregStatus -match "DomainJoined\s*:\s*YES" -and $dsregStatus -match "AzureAdJoined\s*:\s*YES") {
    # Device is Hybrid Azure AD Joined
    Write-Output "Device is Hybrid Azure AD Joined."
    $userToAdd = "$DesktopUser"
    $method = "PowerShell"
}
elseif ($dsregStatus -match "AzureAdJoined\s*:\s*YES" -and $dsregStatus -notmatch "DomainJoined\s*:\s*YES") {
    # Device is Entra ID Joined
    Write-Output "Device is Entra ID Joined."
    $userToAdd = "aberdeen\$DesktopUser"
    $method = "NetCommand"
}
else {
    Write-Error -Message "ERROR: Device is neither Hybrid Azure AD Joined nor Entra ID Joined."
    exit
}

# Add the user if they are not already in the Administrators group
$retryCount = 0
$maxRetries = 1
while ($retryCount -le $maxRetries) {
    if (Is-UserInLocalAdminGroup -userName $userToAdd) {
        Write-Output "$userToAdd is already a member of the Administrators group."
        break
    }
    else {
        Write-Output "Attempting to add $userToAdd to the Administrators group. Attempt $($retryCount + 1)"
        try {
            Add-UserToAdminGroup -userName $userToAdd -method $method
            Write-Output "Successfully added $userToAdd to the Administrators group."
        }
        catch {
            Write-Error -Message "ERROR: Failed to add $userToAdd to the Administrators group. $_"
        }

        # Check if the addition was successful
        if (Is-UserInLocalAdminGroup -userName $userToAdd) {
            Write-Output "$userToAdd has been successfully added to the Administrators group."
            break
        }
        elseif ($retryCount -eq $maxRetries) {
            Write-Error -Message "ERROR: $userToAdd could not be added to the Administrators group after $($retryCount + 1) attempts."
        }

        # Increment retry count
        $retryCount++
    }
}



