let
    Source = AzureDataExplorer.Contents("https://ade.loganalytics.io/subscriptions/7d40b5d1-52b8-4ba2-a48f-801213f1a55e/resourcegroups/cgeunprg01-nerdio/providers/microsoft.operationalinsights/workspaces/nmw-app-law-rd7ctpmcqvm2w", "nmw-app-law-rd7ctpmcqvm2w", "#(lf)        let binSize = 15m;#(lf)        let timeRangeStart = now(-30d);#(lf)        let timeRangeEnd = now();#(lf)        let filterSubstring = ""ALL""; // Replace with the desired substring, or set to ""ALL"" for all computers#(lf)        Perf#(lf)        | where TimeGenerated between (timeRangeStart..timeRangeEnd)#(lf)        | where ObjectName == ""Processor Information"" and CounterName == ""% Processor Time""#(lf)        | where filterSubstring == ""ALL"" or tostring(Computer) contains filterSubstring#(lf)        | summarize AVG_CPU = round(avg(CounterValue), 2), #(lf)                  MAX_CPU = round(max(CounterValue), 2), #(lf)                  MIN_CPU = round(min(CounterValue), 2),#(lf)                  MED_CPU = round(percentile(CounterValue, 50), 2),#(lf)                  ItemsPerTimeBin = count() // Counting the number of entries per time bin#(lf)          by BinnedTime = bin(TimeGenerated, binSize), Computer#(lf)        | project Date = BinnedTime,#(lf)                  Time = BinnedTime,#(lf)                  Computer,#(lf)                  AVG_CPU,#(lf)                  MED_CPU,#(lf)                  MAX_CPU,#(lf)                  MIN_CPU,#(lf)                  ItemsPerTimeBin#(lf)        ", [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]),
    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Date", type date}}),
    #"Extracted Time" = Table.TransformColumns(#"Changed Type",{{"Time", DateTime.Time, type time}}),
    #"Changed Type1" = Table.TransformColumnTypes(#"Extracted Time",{{"Time", type text}}),
    #"Extracted Text Before Delimiter" = Table.TransformColumns(#"Changed Type1", {{"Time", each Text.BeforeDelimiter(_, ":00", {0, RelativePosition.FromEnd}), type text}}),
    #"Changed Type2" = Table.TransformColumnTypes(#"Extracted Text Before Delimiter",{{"Time", type time}})
in
    #"Changed Type2"


let
    // Source query from Azure Data Explorer
    Source = AzureDataExplorer.Contents(
        LAWClusterURLAVD, 
        LAWNameAVD, 
        "WVDConnectionNetworkData" &
        "#(lf)| where TimeGenerated >= ago(30d)" &
        "#(lf)| extend HostPoolName = tostring(split(_ResourceId, '/')[-1])" &  // Extract value after the last "/"
        "#(lf)| extend HostPoolName = trim(' ', tolower(HostPoolName))" &  // Trim spaces and convert to lowercase
        "#(lf)| extend Date = format_datetime(TimeGenerated, 'yyyy-MM-dd')" &  // Adds Date column
        "#(lf)| extend Time = format_datetime(TimeGenerated, 'HH:mm:ss')" &    // Adds Time column
        "#(lf)| extend Timekey = format_datetime(TimeGenerated, 'HHmm')" &    // Adds Timekey column
        "#(lf)| extend TimekeyFull = format_datetime(TimeGenerated, 'HHmmssfff')",  // Adds TimekeyFull column             
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    ),
    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Date", type date}})
in
    #"Changed Type"


let
    // Source query from Azure Data Explorer
    Source = AzureDataExplorer.Contents(
        LAWClusterURLAVD, 
        LAWNameAVD, 
        "WVDConnectionNetworkData" &
        "#(lf)| where TimeGenerated >= ago(30d)" &
        "#(lf)| extend HostPoolName = tostring(split(_ResourceId, '/')[-1])" &  // Extract value after the last "/"
        "#(lf)| extend HostPoolName = trim(' ', tolower(HostPoolName))" &  // Trim spaces and convert to lowercase
        "#(lf)| extend Date = format_datetime(TimeGenerated, 'yyyy-MM-dd')" &  // Adds Date column
        "#(lf)| extend Time = format_datetime(TimeGenerated, 'HH:mm:ss')" &    // Adds Time column
        "#(lf)| extend Timekey = format_datetime(TimeGenerated, 'HHmm')" &    // Adds Timekey column
        "#(lf)| extend TimekeyFull = format_datetime(TimeGenerated, 'HHmmssfff')",  // Adds TimekeyFull column             
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    ),
    
    // Change Date column type
    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Date", type date}}),

    // Extract only the hour and minute from TimeGenerated (removing seconds)
    #"Extracted Time" = Table.TransformColumns(#"Changed Type",{{"Time", DateTime.Time, type time}}),
    
    // Convert the extracted Time column to text
    #"Changed Type1" = Table.TransformColumnTypes(#"Extracted Time",{{"Time", type text}}),
    
    // Extract text before the delimiter (removes the ":00" part)
    #"Extracted Text Before Delimiter" = Table.TransformColumns(#"Changed Type1", {{"Time", each Text.BeforeDelimiter(_, ":00", {0, RelativePosition.FromEnd}), type text}}),

    // Change the extracted Time back to time type
    #"Changed Type2" = Table.TransformColumnTypes(#"Extracted Text Before Delimiter",{{"Time", type time}})
    
in
    #"Changed Type2"

