let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve WVDConnections data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        "
        let paramRangeStart = todatetime('" & DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss") & "');
        let paramRangeEnd = todatetime('" & DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss") & "');
        
        WVDConnections
        | where TimeGenerated between (paramRangeStart .. paramRangeEnd)
        | where State == ""Started""
        | project CorrelationId, UserName, ConnectionType, StartTime = TimeGenerated, _ResourceId
        | join (
            WVDConnections
            | where State == ""Connected""
            | project EndTime = TimeGenerated, CorrelationId, PredecessorConnectionId, SessionHostName
        ) on CorrelationId
        | extend LoginDurationSeconds = round((EndTime - StartTime) / 1s, 2) // Convert Duration to seconds and round to 2 decimal places
        | project CorrelationId, UserName, ConnectionType, StartTime, EndTime, _ResourceId, PredecessorConnectionId, SessionHostName, LoginDurationSeconds
        | join kind=leftouter (
            WVDCheckpoints
            | where Parameters contains ""StartVMOnConnect"" and Parameters contains ""VMStarting""
            | project CorrelationId, Parameters
        ) on CorrelationId
        | extend 
            HostPoolName = extract(@""/([^/]+)$"", 1, _ResourceId), // Extract the string after the last `/` in `_ResourceId`
            LoginType = case(
                isnotempty(Parameters), ""StartVMOnConnect"",
                PredecessorConnectionId != ""<>"", ""Reconnect"",
                isempty(Parameters) and PredecessorConnectionId == ""<>"", ""Standard"",
                ""Unknown"" // Default case
            )
        | extend StartTimekey = format_datetime(StartTime, 'HHmm')
        | extend ConnectedTimekey = format_datetime(EndTime, 'HHmm')
        | extend UserName = trim(' ', tolower(UserName))
        | extend SessionHostName = trim(' ', tolower(SessionHostName))
        | summarize arg_max(StartTime, *) by CorrelationId // Remove duplicate CorrelationId, keeping the row with the latest StartTime
        | project CorrelationId, StartTimeGenerated = StartTime, StartTimekey, ConnectedTimeGenerated = EndTime, ConnectedTimekey, LoginDurationSeconds, UserName, HostPoolName, SessionHostName, LoginType
        ",
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    ),
    #"Duplicated Column" = Table.DuplicateColumn(Source, "StartTimeGenerated", "StartTimeGenerated - Copy"),
    #"Duplicated Column1" = Table.DuplicateColumn(#"Duplicated Column", "StartTimeGenerated", "StartTimeGenerated - Copy.1"),
    #"Duplicated Column2" = Table.DuplicateColumn(#"Duplicated Column1", "ConnectedTimeGenerated", "ConnectedTimeGenerated - Copy"),
    #"Duplicated Column3" = Table.DuplicateColumn(#"Duplicated Column2", "ConnectedTimeGenerated", "ConnectedTimeGenerated - Copy.1"),
    #"Changed Type" = Table.TransformColumnTypes(#"Duplicated Column3",{{"StartTimeGenerated - Copy", type date}, {"ConnectedTimeGenerated - Copy", type date}, {"StartTimeGenerated - Copy.1", type text}, {"ConnectedTimeGenerated - Copy.1", type text}}),
    #"Extracted Text After Delimiter" = Table.TransformColumns(#"Changed Type", {{"StartTimeGenerated - Copy.1", each Text.AfterDelimiter(_, "T"), type text}}),
    #"Extracted Text After Delimiter1" = Table.TransformColumns(#"Extracted Text After Delimiter", {{"ConnectedTimeGenerated - Copy.1", each Text.AfterDelimiter(_, "T"), type text}}),
    #"Extracted Text Before Delimiter" = Table.TransformColumns(#"Extracted Text After Delimiter1", {{"StartTimeGenerated - Copy.1", each Text.BeforeDelimiter(_, "Z", {0, RelativePosition.FromEnd}), type text}}),
    #"Extracted Text Before Delimiter1" = Table.TransformColumns(#"Extracted Text Before Delimiter", {{"ConnectedTimeGenerated - Copy.1", each Text.BeforeDelimiter(_, "Z", {0, RelativePosition.FromEnd}), type text}}),
    #"Changed Type1" = Table.TransformColumnTypes(#"Extracted Text Before Delimiter1",{{"StartTimeGenerated - Copy.1", type time}, {"ConnectedTimeGenerated - Copy.1", type time}}),
    #"Renamed Columns" = Table.RenameColumns(#"Changed Type1",{{"StartTimeGenerated - Copy", "StartTimeGenerated - Date"}, {"StartTimeGenerated - Copy.1", "StartTimeGenerated - Time"}, {"ConnectedTimeGenerated - Copy", "ConnectedTimeGenerated - Date"}, {"ConnectedTimeGenerated - Copy.1", "ConnectedTimeGenerated - Time"}}),
    #"Reordered Columns" = Table.ReorderColumns(#"Renamed Columns",{"CorrelationId", "StartTimeGenerated", "StartTimeGenerated - Date", "StartTimeGenerated - Time", "StartTimekey", "ConnectedTimeGenerated", "ConnectedTimeGenerated - Date", "ConnectedTimeGenerated - Time", "ConnectedTimekey", "LoginDurationSeconds", "UserName", "HostPoolName", "SessionHostName", "LoginType"})
in
    #"Reordered Columns"




Working Version:

let newSessions = true;
let checkpoints =  WVDCheckpoints
    | summarize arg_min(TimeGenerated, *) by CorrelationId, Name;
let Checkpoints = (name: string) {
    checkpoints
    | where Name == name 
    | project CorrelationId, bag = pack(name, TimeGenerated)
    | evaluate bag_unpack(bag)
};
let ChartInfo = datatable (Stage: string, label: string, stageOrder: int) [
    "UserRoute", "User Route", 1,
    "TransportConnected", "Stack Connected", 3,
    "OnCredentialsAcquisitionCompleted", "creds", 4,
    "RdpStackConnectionEstablished", "Stack Connected", 5,
    "LogonDelay", "Logon", 6,
    "ShellStart", "Shell Start", 7,
    "ProductiveTime", "Shell Ready", 8
];
WVDConnections
| where State == "Started"
| where ("no_host_selected" == "no_host_selected" or trim_end("[.].*", SessionHostName) == "no_host_selected")
| distinct TimeGenerated, CorrelationId, UserName, PredecessorConnectionId
| join kind = leftsemi
    (
    // Only include connections that actually reached the host to prevent short (failed) attempts from skewing the data
    checkpoints
    | where Source == "RDStack"
        and Name == "RdpStackConnectionEstablished"
    )
    on CorrelationId
| project CorrelationId, TimeGenerated, UserName, PredecessorConnectionId
| join kind = inner // UserRoute
    (
    checkpoints
    | where Name == "LoadBalancedNewConnection"
    | extend LoadBalanceOutcome=Parameters.LoadBalanceOutcome
    | where (newSessions and LoadBalanceOutcome == "NewSession") or (not(newSessions) and LoadBalanceOutcome in ('Disconnected', 'Active'))
    | project CorrelationId, UserRoute=TimeGenerated
    | distinct CorrelationId, UserRoute
    )
    on CorrelationId
| project-away CorrelationId1
| join kind=innerunique Checkpoints("RdpStackConnectionEstablished") on CorrelationId
| project-away CorrelationId1
| join kind=leftouter 
    (
    checkpoints
    | where Name =~ "OnCredentialsAcquisitionCompleted"
    | project CorrelationId, credaquire = tolong(Parameters.DurationMS)
    )
    on CorrelationId
| project-away CorrelationId1
| join kind=leftouter //SSO token
    (
    checkpoints
    | where Name =~ "SSOTokenRetrieval"
    | project CorrelationId, ssotoken = tolong(Parameters.DurationMS)
    )
    on CorrelationId
| project-away CorrelationId1
| join kind=innerunique // Logon Delay
    (checkpoints
    | where Name == "LogonDelay"
    | extend LogonType = tostring(Parameters.LogonType)
    | where (newSessions and LogonType == "DirectSession") or (not(newSessions) and LogonType == "TemporarySession")
    | project LogonDelay=TimeGenerated, CorrelationId, UserName
    )
    on CorrelationId
| project-away CorrelationId1
| join kind=leftouter Checkpoints("ShellStart") on CorrelationId
| project-away CorrelationId1
| join kind = leftouter
    (
    checkpoints // new session
    | where newSessions
    | where Name =~ "ShellReady" or
        (Name =~ "LaunchExecutable" and Parameters.connectionStage == "RdpShellAppExecuted" or Name =~ "RdpShellAppExecuted")
    | project ProductiveTime=TimeGenerated, CorrelationId
    )
    on CorrelationId
| project-away CorrelationId1
| where not(newSessions) or isnotnull(ProductiveTime)
| where (datetime_diff("millisecond", UserRoute, TimeGenerated) - coalesce(ssotoken, 0)) >= 0

//| where UserName contains "niall.jennings"
