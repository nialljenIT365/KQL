let binSize = 24h;
let timeRangeStart = now(-1d);
let timeRangeEnd = now();
Perf
| where TimeGenerated between (timeRangeStart..timeRangeEnd)
| extend 
    LocalTime = case(
        Computer startswith "M01" or Computer startswith "M04", datetime_add('hour', 0, TimeGenerated), // EMEA (UTC+0)
        Computer startswith "M13" or Computer startswith "M14", datetime_add('hour', 8, TimeGenerated), // APAC (UTC+8)
        Computer startswith "M06" or Computer startswith "M09", datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)
        datetime_add('hour', 0, TimeGenerated) // Default fallback
    ),
    Region = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    )
| where Region in ("EMEA", "APAC", "AMRS") // Filter for relevant regions
| where ObjectName == "Processor Information" and CounterName == "% Processor Time"
| extend 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        "Other"
    ),
    Management = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        "Other"
    )
| summarize 
    AVG_CPU = round(avg(CounterValue), 2), 
    MAX_CPU = round(max(CounterValue), 2), 
    MIN_CPU = round(min(CounterValue), 2),
    MED_CPU = round(percentile(CounterValue, 50), 2),
    ItemsPerTimeBin = count() 
  by bin(LocalTime, binSize), Computer, Region, Environment, SessionHostPoolType, Management
| extend Computer = trim(' ', tolower(Computer))
| project 
    TimeGenerated = bin(LocalTime, binSize),
    SessionHostName = Computer,
    Region,
    Environment,
    SessionHostPoolType,
    Management,
    AVG_CPU,
    MED_CPU,
    MAX_CPU,
    MIN_CPU,
    ItemsPerTimeBin





let binSize = 24h;
let timeRangeStart = now(-1d);
let timeRangeEnd = now();
Perf
| where TimeGenerated between (timeRangeStart..timeRangeEnd)
| extend 
    LocalTime = case(
        Computer startswith "M01" or Computer startswith "M04", datetime_add('hour', 0, TimeGenerated), // EMEA (UTC+0)
        Computer startswith "M13" or Computer startswith "M14", datetime_add('hour', 8, TimeGenerated), // APAC (UTC+8)
        Computer startswith "M06" or Computer startswith "M09", datetime_add('hour', -5, TimeGenerated), // AMRS (UTC-5)
        datetime_add('hour', 0, TimeGenerated) // Default fallback
    ),
    Region = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    )
| where Region in ("EMEA", "APAC", "AMRS") // Filter for relevant regions
| where dayofweek(LocalTime) between (1 .. 5) // Monday to Friday in LocalTime
| extend hour = datetime_part("hour", LocalTime)
| where hour between (8 .. 17) // Core hours: 8 AM to 5 PM in LocalTime
| where ObjectName == "Processor Information" and CounterName == "% Processor Time"
| extend 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        "Other"
    ),
    Management = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        "Other"
    )
| summarize 
    AVG_CPU = round(avg(CounterValue), 2), 
    MAX_CPU = round(max(CounterValue), 2), 
    MIN_CPU = round(min(CounterValue), 2),
    MED_CPU = round(percentile(CounterValue, 50), 2),
    ItemsPerTimeBin = count() 
  by bin(LocalTime, binSize), Computer, Region, Environment, SessionHostPoolType, Management
| extend Computer = trim(' ', tolower(Computer))
| project 
    TimeGenerated = bin(LocalTime, binSize),
    SessionHostName = Computer,
    Region,
    Environment,
    SessionHostPoolType,
    Management,
    AVG_CPU,
    MED_CPU,
    MAX_CPU,
    MIN_CPU,
    ItemsPerTimeBin















let binSize = 24h;
let timeRangeStart = now(-1d);
let timeRangeEnd = now();
Perf
| where TimeGenerated between (timeRangeStart..timeRangeEnd)
| extend 
    Region = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    )
| where Region in ("EMEA", "APAC", "AMRS") // Filter for specified regions
| extend 
    TimezoneOffsetHours = case(
        Region == "EMEA", 0,    // UTC+0
        Region == "APAC", 8,    // UTC+8
        Region == "AMRS", -5,   // UTC-5
        0
    ),
    LocalTime = datetime_add('hour', TimezoneOffsetHours, TimeGenerated) // Adjust to local time based on region
| where dayofweek(LocalTime) between (1 .. 5) // Monday to Friday in LocalTime
| extend hour = datetime_part("hour", LocalTime)
| where hour between (8 .. 17) // Core hours: 8 AM to 5 PM in local time
| where ObjectName == "Processor Information" and CounterName == "% Processor Time"
| extend 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        "Other"
    ),
    Management = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        "Other"
    )
| summarize 
    AVG_CPU = round(avg(CounterValue), 2), 
    MAX_CPU = round(max(CounterValue), 2), 
    MIN_CPU = round(min(CounterValue), 2),
    MED_CPU = round(percentile(CounterValue, 50), 2),
    ItemsPerTimeBin = count() 
  by bin(LocalTime, binSize), Computer, Region, Environment, SessionHostPoolType, Management
| extend Computer = trim(' ', tolower(Computer))
| project 
    TimeGenerated = bin(LocalTime, binSize),
    SessionHostName = Computer,
    Region,
    Environment,
    SessionHostPoolType,
    Management,
    AVG_CPU,
    MED_CPU,
    MAX_CPU,
    MIN_CPU,
    ItemsPerTimeBin







let binSize = 24h;
let timeRangeStart = now(-1d);
let timeRangeEnd = now();
Perf
| where TimeGenerated between (timeRangeStart..timeRangeEnd)
| extend 
    Region = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    )
| extend 
    TimezoneOffsetHours = case(
        Region == "EMEA", 0,    // UTC+0
        Region == "APAC", 8,    // UTC+8
        Region == "AMRS", -5,   // Example offset for AMRS (adjust as needed)
        0
    )
| extend LocalTime = datetime_add('second', TimezoneOffsetHours * 3600, TimeGenerated) // Convert hours to seconds for timespan
| where dayofweek(LocalTime) between (1 .. 5) // Monday to Friday in LocalTime
| extend hour = datetime_part("hour", LocalTime)
| where hour between (8 .. 17) // Core hours: 8 AM to 5 PM in LocalTime
| where ObjectName == "Processor Information" and CounterName == "% Processor Time"
| where "ALL" in ("ALL", tostring(Computer) contains "M01", tostring(Computer) contains "M14") // Filter by substrings
| extend 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        "Other"
    ),
    Management = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        "Other"
    )
| summarize 
    AVG_CPU = round(avg(CounterValue), 2), 
    MAX_CPU = round(max(CounterValue), 2), 
    MIN_CPU = round(min(CounterValue), 2),
    MED_CPU = round(percentile(CounterValue, 50), 2),
    ItemsPerTimeBin = count() 
  by bin(LocalTime, binSize), Computer, Region, Environment, SessionHostPoolType, Management
| extend Computer = trim(' ', tolower(Computer))
| project 
    TimeGenerated = bin(LocalTime, binSize),
    SessionHostName = Computer,
    Region,
    Environment,
    SessionHostPoolType,
    Management,
    AVG_CPU,
    MED_CPU,
    MAX_CPU,
    MIN_CPU,
    ItemsPerTimeBin





let binSize = 24h;
let timeRangeStart = now(-1d);
let timeRangeEnd = now();
Perf
| where TimeGenerated between (timeRangeStart..timeRangeEnd)
| extend 
    Region = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    )
| extend 
    TimezoneOffsetHours = case(
        Region == "EMEA", 0,   // UTC+0
        Region == "APAC", 8,   // UTC+8
        Region == "AMRS", -5,  // Example offset for AMRS (adjust as needed)
        0
    )
| extend LocalTime = datetime_add('hour', TimezoneOffsetHours, TimeGenerated)
| where dayofweek(LocalTime) between (1 .. 5) // Monday to Friday in LocalTime
| extend hour = datetime_part("hour", LocalTime)
| where hour between (8 .. 17) // Core hours: 8 AM to 5 PM in LocalTime
| where ObjectName == "Processor Information" and CounterName == "% Processor Time"
| where "ALL" in ("ALL", tostring(Computer) contains "M01", tostring(Computer) contains "M14") // Filter by substrings
| extend 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        "Other"
    ),
    Management = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        "Other"
    )
| summarize 
    AVG_CPU = round(avg(CounterValue), 2), 
    MAX_CPU = round(max(CounterValue), 2), 
    MIN_CPU = round(min(CounterValue), 2),
    MED_CPU = round(percentile(CounterValue, 50), 2),
    ItemsPerTimeBin = count() 
  by bin(LocalTime, binSize), Computer, Region, Environment, SessionHostPoolType, Management
| extend Computer = trim(' ', tolower(Computer))
| project 
    TimeGenerated = bin(LocalTime, binSize),
    SessionHostName = Computer,
    Region,
    Environment,
    SessionHostPoolType,
    Management,
    AVG_CPU,
    MED_CPU,
    MAX_CPU,
    MIN_CPU,
    ItemsPerTimeBin



let binSize = 24h;
let timeRangeStart = now(-1d);
let timeRangeEnd = now();
Perf
| where TimeGenerated between (timeRangeStart..timeRangeEnd)
| extend 
    Region = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    )
| extend 
    TimezoneOffsetHours = case(
        Region == "EMEA", 0,    // UTC+0
        Region == "APAC", 8,    // UTC+8
        Region == "AMRS", -5,   // Example offset for AMRS (adjust as needed)
        0
    )
| extend LocalTime = datetime_add('hour', TimezoneOffsetHours, TimeGenerated)
| where dayofweek(LocalTime) between (1d .. 5d) // Monday to Friday in LocalTime
| extend hour = datetime_part("hour", LocalTime)
| where hour between (8 .. 17) // Core hours: 8 AM to 5 PM in LocalTime
| where ObjectName == "Processor Information" and CounterName == "% Processor Time"
| where "ALL" in ("ALL", tostring(Computer) contains "M01", tostring(Computer) contains "M14") // Include both filters
| extend 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        "Other"
    ),
    Management = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        "Other"
    )
| summarize 
    AVG_CPU = round(avg(CounterValue), 2), 
    MAX_CPU = round(max(CounterValue), 2), 
    MIN_CPU = round(min(CounterValue), 2),
    MED_CPU = round(percentile(CounterValue, 50), 2),
    ItemsPerTimeBin = count() 
  by bin(LocalTime, binSize), Computer, Region, Environment, SessionHostPoolType, Management
| extend Computer = trim(' ', tolower(Computer))
| project 
    TimeGenerated = bin(LocalTime, binSize),
    SessionHostName = Computer,
    Region,
    Environment,
    SessionHostPoolType,
    Management,
    AVG_CPU,
    MED_CPU,
    MAX_CPU,
    MIN_CPU,
    ItemsPerTimeBin



'extend' operator: Failed to resolve scalar expression named 'TimezoneOffsetHours'
Request id: 11be4789-1b8b-4ce2-8c13-8eaefdc52fe9


let binSize = 24h;
let timeRangeStart = now(-1d);
let timeRangeEnd = now();
Perf
| where TimeGenerated between (timeRangeStart..timeRangeEnd)
| extend 
    Region = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    )
| extend 
    TimezoneOffsetHours = case(
        Region == "EMEA", 0,    // UTC+0
        Region == "APAC", 8,    // UTC+8
        Region == "AMRS", -5,   // Example offset for AMRS (adjust as needed)
        0
    ),
    LocalTime = datetime_add('hour', TimezoneOffsetHours, TimeGenerated)
| where dayofweek(LocalTime) between (1d .. 5d) // Monday to Friday in LocalTime
| extend hour = datetime_part("hour", LocalTime)
| where hour between (8 .. 17) // Core hours: 8 AM to 5 PM in LocalTime
| where ObjectName == "Processor Information" and CounterName == "% Processor Time"
| where "ALL" in ("ALL", tostring(Computer) contains "M01", tostring(Computer) contains "M14") // Include both filters
| extend 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        "Other"
    ),
    Management = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        "Other"
    )
| summarize 
    AVG_CPU = round(avg(CounterValue), 2), 
    MAX_CPU = round(max(CounterValue), 2), 
    MIN_CPU = round(min(CounterValue), 2),
    MED_CPU = round(percentile(CounterValue, 50), 2),
    ItemsPerTimeBin = count() 
  by bin(LocalTime, binSize), Computer, Region, Environment, SessionHostPoolType, Management
| extend Computer = trim(' ', tolower(Computer))
| project 
    TimeGenerated = bin(LocalTime, binSize),
    SessionHostName = Computer,
    Region,
    Environment,
    SessionHostPoolType,
    Management,
    AVG_CPU,
    MED_CPU,
    MAX_CPU,
    MIN_CPU,
    ItemsPerTimeBin






'extend' operator: Failed to resolve column or scalar expression named 'Region'
Request id: 10deac76-12a2-48fc-aa28-6bed88518266

let binSize = 24h;
let timeRangeStart = now(-1d);
let timeRangeEnd = now();
Perf
| where TimeGenerated between (timeRangeStart..timeRangeEnd)
| extend 
    Region = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    ),
    TimezoneOffsetHours = case(
        Region == "EMEA", 0,    // UTC+0
        Region == "APAC", 8,    // UTC+8
        Region == "AMRS", -5,   // Example offset for AMRS (adjust as needed)
        0
    ),
    LocalTime = datetime_add('hour', TimezoneOffsetHours, TimeGenerated)
| where dayofweek(LocalTime) between (1d .. 5d) // Monday to Friday in LocalTime
| extend hour = datetime_part("hour", LocalTime)
| where hour between (8 .. 17) // Core hours: 8 AM to 5 PM in LocalTime
| where ObjectName == "Processor Information" and CounterName == "% Processor Time"
| where "ALL" in ("ALL", tostring(Computer) contains "M01", tostring(Computer) contains "M14") // Include both filters
| extend 
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", 
        substring(Computer, 3, 1) == "U", "UAT", 
        substring(Computer, 3, 1) == "D", "DEV", 
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", 
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        "Other"
    ),
    Management = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        "Other"
    )
| summarize 
    AVG_CPU = round(avg(CounterValue), 2), 
    MAX_CPU = round(max(CounterValue), 2), 
    MIN_CPU = round(min(CounterValue), 2),
    MED_CPU = round(percentile(CounterValue, 50), 2),
    ItemsPerTimeBin = count() 
  by bin(LocalTime, binSize), Computer, Region, Environment, SessionHostPoolType, Management
| extend Computer = trim(' ', tolower(Computer))
| project 
    TimeGenerated = bin(LocalTime, binSize),
    SessionHostName = Computer,
    Region,
    Environment,
    SessionHostPoolType,
    Management,
    AVG_CPU,
    MED_CPU,
    MAX_CPU,
    MIN_CPU,
    ItemsPerTimeBin












let binSize = 24h;
let timeRangeStart = now(-1d);
let timeRangeEnd = now();
let filterSubstring = "M01"; // Replace with the desired substring, or set to "ALL" for all computers
let timezoneOffsetHours = 0; // Offset for UTC+0
Perf
| where TimeGenerated between (timeRangeStart..timeRangeEnd)
| extend LocalTime = datetime_add('hour', timezoneOffsetHours, TimeGenerated) // Adjust to UTC+8
| where dayofweek(LocalTime) between (1d .. 5d) // Monday to Friday in LocalTime
| extend hour = datetime_part("hour", LocalTime)
| where hour between (8 .. 17) // Core hours: 8 AM to 5 PM in UTC+0
| where ObjectName == "Processor Information" and CounterName == "% Processor Time"
| where filterSubstring == "ALL" or tostring(Computer) contains filterSubstring
| extend 
    Region = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    ),
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", // 4th character indicates TST
        substring(Computer, 3, 1) == "U", "UAT", // 4th character indicates UAT
        substring(Computer, 3, 1) == "D", "DEV", // 4th character indicates DEV
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", // 4th character indicates PROD
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        "Other"
    ),
    Management = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        "Other"
    )
| summarize AVG_CPU = round(avg(CounterValue), 2), 
            MAX_CPU = round(max(CounterValue), 2), 
            MIN_CPU = round(min(CounterValue), 2),
            MED_CPU = round(percentile(CounterValue, 50), 2),
            ItemsPerTimeBin = count() // Counting the number of entries per time bin
  by BinnedTime = bin(LocalTime, binSize), Computer, Region, Environment, SessionHostPoolType, Management
| extend Computer = trim(' ', tolower(Computer))
| project 
    TimeGenerated = BinnedTime,
    SessionHostName = Computer,
    Region,
    Environment,
    SessionHostPoolType,
    Management,
    AVG_CPU,
    MED_CPU,
    MAX_CPU,
    MIN_CPU,
    ItemsPerTimeBin

both of these queries are identical except the local time adjustment and the filterSubstring to return computer names and core working times from different regions. they both pull from data in same LAW.
Is it possible to combine them in a single KQL query by a join or other method?

let binSize = 24h;
let timeRangeStart = now(-1d);
let timeRangeEnd = now();
let filterSubstring = "M14"; // Replace with the desired substring, or set to "ALL" for all computers
let timezoneOffsetHours = 8; // Offset for UTC+8
Perf
| where TimeGenerated between (timeRangeStart..timeRangeEnd)
| extend LocalTime = datetime_add('hour', timezoneOffsetHours, TimeGenerated) // Adjust to UTC+8
| where dayofweek(LocalTime) between (1d .. 5d) // Monday to Friday in LocalTime
| extend hour = datetime_part("hour", LocalTime)
| where hour between (8 .. 17) // Core hours: 8 AM to 5 PM in UTC+8
| where ObjectName == "Processor Information" and CounterName == "% Processor Time"
| where filterSubstring == "ALL" or tostring(Computer) contains filterSubstring
| extend 
    Region = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    ),
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", // 4th character indicates TST
        substring(Computer, 3, 1) == "U", "UAT", // 4th character indicates UAT
        substring(Computer, 3, 1) == "D", "DEV", // 4th character indicates DEV
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", // 4th character indicates PROD
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        "Other"
    ),
    Management = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        "Other"
    )
| summarize AVG_CPU = round(avg(CounterValue), 2), 
            MAX_CPU = round(max(CounterValue), 2), 
            MIN_CPU = round(min(CounterValue), 2),
            MED_CPU = round(percentile(CounterValue, 50), 2),
            ItemsPerTimeBin = count() // Counting the number of entries per time bin
  by BinnedTime = bin(LocalTime, binSize), Computer, Region, Environment, SessionHostPoolType, Management
| extend Computer = trim(' ', tolower(Computer))
| project 
    TimeGenerated = BinnedTime,
    SessionHostName = Computer,
    Region,
    Environment,
    SessionHostPoolType,
    Management,
    AVG_CPU,
    MED_CPU,
    MAX_CPU,
    MIN_CPU,
    ItemsPerTimeBin




























let binSize = 24h;
let timeRangeStart = now(-30d);
let timeRangeEnd = now();
let filterSubstring = "M14"; // Replace with the desired substring, or set to "ALL" for all computers
let timezoneOffsetHours = 8; // Offset for UTC+8
Perf
| where TimeGenerated between (timeRangeStart..timeRangeEnd)
| extend LocalTime = datetime_add('hour', timezoneOffsetHours, TimeGenerated) // Adjust to UTC+8
| where dayofweek(LocalTime) between (1d .. 5d) // Monday to Friday in LocalTime
| extend hour = datetime_part("hour", LocalTime)
| where hour between (8 .. 17) // Core hours: 8 AM to 5 PM in UTC+8
| where ObjectName == "Processor Information" and CounterName == "% Processor Time"
| where filterSubstring == "ALL" or tostring(Computer) contains filterSubstring
| extend 
    Region = case(
        Computer startswith "M01" or Computer startswith "M04", "EMEA",
        Computer startswith "M13" or Computer startswith "M14", "APAC",
        Computer startswith "M06" or Computer startswith "M09", "AMRS",
        "Other"
    ),
    Environment = case(
        substring(Computer, 3, 1) == "T", "TST", // 4th character indicates TST
        substring(Computer, 3, 1) == "U", "UAT", // 4th character indicates UAT
        substring(Computer, 3, 1) == "D", "DEV", // 4th character indicates DEV
        Computer contains "NACR", "CRIMS NonProdA",
        Computer contains "NBCR", "CRIMS NonProdB",
        Computer contains "OHCR", "OAT CRIMS High",
        Computer contains "OMCR", "OAT CRIMS Medium",
        Computer contains "OLCR", "OAT CRIMS Low",
        Computer contains "PHCR", "PRD CRIMS High",
        Computer contains "PMCR", "PRD CRIMS High",
        Computer contains "PLCR", "PRD CRIMS Low",
        substring(Computer, 3, 1) == "P", "PRD", // 4th character indicates PROD
        "Other"
    ),
    SessionHostPoolType = case(
        Computer contains "MSN", "MultiSession",
        Computer contains "SSP", "Personal",
        Computer contains "NACR", "MultiSession",
        Computer contains "NBCR", "MultiSession",
        Computer contains "OHCR", "MultiSession",
        Computer contains "OMCR", "MultiSession",
        Computer contains "OLCR", "MultiSession",
        Computer contains "PHCR", "MultiSession",
        Computer contains "PMCR", "MultiSession",
        Computer contains "PLCR", "MultiSession",
        "Other"
    ),
    Management = case(
        substring(Computer, 7, 1) == "I", "Intune",
        substring(Computer, 7, 1) == "G", "GPO",
        "Other"
    )
| summarize AVG_CPU = round(avg(CounterValue), 2), 
            MAX_CPU = round(max(CounterValue), 2), 
            MIN_CPU = round(min(CounterValue), 2),
            MED_CPU = round(percentile(CounterValue, 50), 2),
            ItemsPerTimeBin = count() // Counting the number of entries per time bin
  by BinnedTime = bin(TimeGenerated, binSize), Computer, Region, Environment, SessionHostPoolType, Management
| extend Computer = trim(' ', tolower(Computer))
| project 
    TimeGenerated = BinnedTime,
    SessionHostName = Computer,
    Region,
    Environment,
    SessionHostPoolType,
    Management,
    AVG_CPU,
    MED_CPU,
    MAX_CPU,
    MIN_CPU,
    ItemsPerTimeBin
