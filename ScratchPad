let
    // Convert Power BI parameters to text in the desired format
    RangeStartText = DateTime.ToText(RangeStart, "d/M/yyyy HH:mm:ss"),
    RangeEndText = DateTime.ToText(RangeEnd, "d/M/yyyy HH:mm:ss"),

    // Step 1: Connect to Azure Data Explorer, injecting the text values of RangeStart and RangeEnd
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg", 
        "nmw-app-law-fwjv4wn75m4qg", 
        "
            let RangeStart = '" & RangeStartText & "';
            let RangeEnd = '" & RangeEndText & "';
            
            Heartbeat
            | extend DayStart = substring(RangeStart, 0, indexof(RangeStart, '/')),
                     MonthStart = substring(RangeStart, indexof(RangeStart, '/') + 1, indexof(RangeStart, '/', indexof(RangeStart, '/') + 1) - indexof(RangeStart, '/') - 1),
                     YearStart = substring(RangeStart, indexof(RangeStart, '/', indexof(RangeStart, '/') + 1) + 1, 4),
                     TimeStart = substring(RangeStart, indexof(RangeStart, ' ') + 1)
            | extend ParsedRangeStart = todatetime(strcat(YearStart, '-', MonthStart, '-', DayStart, ' ', TimeStart))
            | extend DayEnd = substring(RangeEnd, 0, indexof(RangeEnd, '/')),
                     MonthEnd = substring(RangeEnd, indexof(RangeEnd, '/') + 1, indexof(RangeEnd, '/', indexof(RangeEnd, '/') + 1) - indexof(RangeEnd, '/') - 1),
                     YearEnd = substring(RangeEnd, indexof(RangeEnd, '/', indexof(RangeEnd, '/') + 1) + 1, 4),
                     TimeEnd = substring(RangeEnd, indexof(RangeEnd, ' ') + 1)
            | extend ParsedRangeEnd = todatetime(strcat(YearEnd, '-', MonthEnd, '-', DayEnd, ' ', TimeEnd))
            | where TimeGenerated between (ParsedRangeStart .. ParsedRangeEnd)
            | project-away DayStart, MonthStart, YearStart, TimeStart, ParsedRangeStart, DayEnd, MonthEnd, YearEnd, TimeEnd, ParsedRangeEnd
        ",
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    ),

    // Step 2: Retrieve the current UTC date and time
    CurrentDateTime = DateTimeZone.FixedUtcNow(),

    // Step 3: Add a custom column for the data load date
    AddLoadDate = Table.AddColumn(Source, "UTC Data Load Date", each CurrentDateTime, type datetimezone),
    #"Duplicated Column" = Table.DuplicateColumn(AddLoadDate, "TimeGenerated", "TimeGenerated - Copy"),
    #"Changed Type" = Table.TransformColumnTypes(#"Duplicated Column",{{"TimeGenerated - Copy", type text}}),
    #"Extracted Text After Delimiter" = Table.TransformColumns(#"Changed Type", {{"TimeGenerated - Copy", each Text.AfterDelimiter(_, "T"), type text}}),
    #"Extracted Text Before Delimiter" = Table.TransformColumns(#"Extracted Text After Delimiter", {{"TimeGenerated - Copy", each Text.BeforeDelimiter(_, "Z", {0, RelativePosition.FromEnd}), type text}}),
    #"Changed Type1" = Table.TransformColumnTypes(#"Extracted Text Before Delimiter",{{"TimeGenerated - Copy", type time}}),
    #"Renamed Columns" = Table.RenameColumns(#"Changed Type1",{{"TimeGenerated - Copy", "Time"}}),
    #"Reordered Columns" = Table.ReorderColumns(#"Renamed Columns",{"TenantId", "SourceSystem", "TimeGenerated", "Time", "MG", "ManagementGroupName", "SourceComputerId", "ComputerIP", "Computer", "Category", "OSType", "OSName", "OSMajorVersion", "OSMinorVersion", "Version", "SCAgentChannel", "IsGatewayInstalled", "RemoteIPLongitude", "RemoteIPLatitude", "RemoteIPCountry", "SubscriptionId", "ResourceGroup", "ResourceProvider", "Resource", "ResourceId", "ResourceType", "ComputerEnvironment", "Solutions", "VMUUID", "ComputerPrivateIPs", "Type", "_ResourceId", "UTC Data Load Date"})
in
    #"Reordered Columns"
