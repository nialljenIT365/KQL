WVDCheckpoints
| where CorrelationId == "3b6a7c12-5b24-43b3-bdc7-70b113bd3600"
| top 1 by TimeGenerated desc
| project Name, Source, Parameters


WVDCheckpoints
| where CorrelationId == "3b6a7c12-5b24-43b3-bdc7-70b113bd3600"




let newSessions=true;
let checkpoints=WVDCheckpoints
| summarize arg_min(TimeGenerated,*) by CorrelationId,Name;
let Checkpoints=(name:string){
    checkpoints
    | where Name==name
    | project CorrelationId,bag=pack(name,TimeGenerated),Parameters
    | evaluate bag_unpack(bag)
};
let ChartInfo=datatable(Stage:string,label:string,stageOrder:int)[
    "UserRoute","User Route",1,
    "TransportConnected","Stack Connected",3,
    "OnCredentialsAcquisitionCompleted","creds",4,
    "RdpStackConnectionEstablished","Stack Connected",5,
    "LogonDelay","Logon",6,
    "ShellStart","Shell Start",7,
    "ProductiveTime","Shell Ready",8
];
let GetDurations=WVDCheckpoints
| summarize EarliestTime=min(TimeGenerated),LatestTime=max(TimeGenerated) by CorrelationId
| extend DurationInSeconds=datetime_diff('second',LatestTime,EarliestTime)
| project CorrelationId,DurationInSeconds;
let ProcessedConnections=WVDConnections
| where TimeGenerated>=ago(1d)
| where State=="Started"
| where ("no_host_selected"=="no_host_selected" or trim_end("[.].*",SessionHostName)=="no_host_selected")
| join kind=leftouter(
    WVDCheckpoints
    | where Parameters contains "StartVMOnConnect" and Parameters contains "VMStarting"
) on CorrelationId
| extend PowerOnConnect=tostring(Parameters)
| project CorrelationId,TimeGenerated,UserName,PredecessorConnectionId,SessionHostName,_ResourceId,PowerOnConnect;
let RowsWithPowerOnConnect=ProcessedConnections
| where isnotempty(PowerOnConnect)
| project CorrelationId,PowerOnConnectTime=TimeGenerated;
ProcessedConnections
| join kind=leftouter(RowsWithPowerOnConnect) on $left.PredecessorConnectionId==$right.CorrelationId
| project CorrelationId,PredecessorConnectionId,PowerOnConnectTime,TimeGenerated,UserName,SessionHostName,_ResourceId,PowerOnConnect
| join kind=leftsemi(
    checkpoints
    | where Source=="RDStack" and Name=="RdpStackConnectionEstablished"
) on CorrelationId
| join kind=inner(
    checkpoints
    | where Name=="LoadBalancedNewConnection"
    | extend LoadBalanceOutcome=Parameters.LoadBalanceOutcome
    | project CorrelationId,UserRoute=TimeGenerated
    | distinct CorrelationId,UserRoute
) on CorrelationId
| join kind=leftouter(GetDurations) on CorrelationId
| where  DurationInSeconds >= 145
| project-away CorrelationId1
//| where UserName contains "max";







let newSessions=true;
let checkpoints=WVDCheckpoints
| summarize arg_min(TimeGenerated,*) by CorrelationId,Name;
let Checkpoints=(name:string){
    checkpoints
    | where Name==name
    | project CorrelationId,bag=pack(name,TimeGenerated),Parameters
    | evaluate bag_unpack(bag)
};
let ChartInfo=datatable(Stage:string,label:string,stageOrder:int)[
    "UserRoute","User Route",1,
    "TransportConnected","Stack Connected",3,
    "OnCredentialsAcquisitionCompleted","creds",4,
    "RdpStackConnectionEstablished","Stack Connected",5,
    "LogonDelay","Logon",6,
    "ShellStart","Shell Start",7,
    "ProductiveTime","Shell Ready",8
];
let GetDurations=WVDCheckpoints
| summarize EarliestTime=min(TimeGenerated),LatestTime=max(TimeGenerated) by CorrelationId
| extend DurationInSeconds=datetime_diff('second',LatestTime,EarliestTime)
| project CorrelationId,DurationInSeconds;
let ProcessedConnections=WVDConnections
| where TimeGenerated>=ago(1d)
| where State=="Started"
| where ("no_host_selected"=="no_host_selected" or trim_end("[.].*",SessionHostName)=="no_host_selected")
| join kind=leftouter(
    WVDCheckpoints
    | where Parameters contains "StartVMOnConnect" and Parameters contains "VMStarting"
) on CorrelationId
| extend PowerOnConnect=tostring(Parameters)
| project CorrelationId,TimeGenerated,UserName,PredecessorConnectionId,SessionHostName,_ResourceId,PowerOnConnect;
let RowsWithPowerOnConnect=ProcessedConnections
| where isnotempty(PowerOnConnect)
| project CorrelationId,PowerOnConnectTime=TimeGenerated;
ProcessedConnections
| join kind=leftouter(RowsWithPowerOnConnect) on $left.PredecessorConnectionId==$right.CorrelationId
| project CorrelationId,PredecessorConnectionId,PowerOnConnectTime,TimeGenerated,UserName,SessionHostName,_ResourceId,PowerOnConnect
| join kind=leftsemi(
    checkpoints
    | where Source=="RDStack" and Name=="RdpStackConnectionEstablished"
) on CorrelationId
| join kind=inner(
    checkpoints
    | where Name=="LoadBalancedNewConnection"
    | extend LoadBalanceOutcome=Parameters.LoadBalanceOutcome
    | project CorrelationId,UserRoute=TimeGenerated
    | distinct CorrelationId,UserRoute
) on CorrelationId
| join kind=leftouter(GetDurations) on CorrelationId
| project-away CorrelationId1
| where UserName contains "niall.jennings";




'toscalar' operator: Failed to resolve table or scalar expression named 'CorrelationId'
Request id: 101a2d4a-1158-469a-8211-58ca91f010d7


let newSessions=true;
let checkpoints=WVDCheckpoints
| summarize arg_min(TimeGenerated,*) by CorrelationId,Name;
let Checkpoints=(name:string){
    checkpoints
    | where Name==name
    | project CorrelationId,bag=pack(name,TimeGenerated),Parameters
    | evaluate bag_unpack(bag)
};
let ChartInfo=datatable(Stage:string,label:string,stageOrder:int)[
    "UserRoute","User Route",1,
    "TransportConnected","Stack Connected",3,
    "OnCredentialsAcquisitionCompleted","creds",4,
    "RdpStackConnectionEstablished","Stack Connected",5,
    "LogonDelay","Logon",6,
    "ShellStart","Shell Start",7,
    "ProductiveTime","Shell Ready",8
];
let GetDurationForCorrelationId=(cid:string){
    WVDCheckpoints
    | where CorrelationId==cid
    | summarize EarliestTime=min(TimeGenerated),LatestTime=max(TimeGenerated) by CorrelationId
    | extend DurationInSeconds=datetime_diff('second',LatestTime,EarliestTime)
    | project DurationInSeconds
};
let ProcessedConnections=WVDConnections
| where TimeGenerated>=ago(1d)
| where State=="Started"
| where ("no_host_selected"=="no_host_selected" or trim_end("[.].*",SessionHostName)=="no_host_selected")
| join kind=leftouter(
    WVDCheckpoints
    | where Parameters contains "StartVMOnConnect" and Parameters contains "VMStarting"
) on CorrelationId
| extend PowerOnConnect=tostring(Parameters)
| project CorrelationId,TimeGenerated,UserName,PredecessorConnectionId,SessionHostName,_ResourceId,PowerOnConnect;
let RowsWithPowerOnConnect=ProcessedConnections
| where isnotempty(PowerOnConnect)
| project CorrelationId,PowerOnConnectTime=TimeGenerated;
ProcessedConnections
| join kind=leftouter(RowsWithPowerOnConnect) on $left.PredecessorConnectionId==$right.CorrelationId
| project CorrelationId,PredecessorConnectionId,PowerOnConnectTime,TimeGenerated,UserName,SessionHostName,_ResourceId,PowerOnConnect
| join kind=leftsemi(
    checkpoints
    | where Source=="RDStack" and Name=="RdpStackConnectionEstablished"
) on CorrelationId
| join kind=inner(
    checkpoints
    | where Name=="LoadBalancedNewConnection"
    | extend LoadBalanceOutcome=Parameters.LoadBalanceOutcome
    | project CorrelationId,UserRoute=TimeGenerated
    | distinct CorrelationId,UserRoute
) on CorrelationId
| extend DurationInSeconds=toscalar(GetDurationForCorrelationId(CorrelationId))
| project-away CorrelationId1
| where UserName contains "niall.jennings"




let newSessions = true;
let checkpoints = WVDCheckpoints
    | summarize arg_min(TimeGenerated, *) by CorrelationId, Name;
let Checkpoints = (name: string) {
    checkpoints
    | where Name == name 
    | project CorrelationId, bag = pack(name, TimeGenerated), Parameters
    | evaluate bag_unpack(bag)
};
let ChartInfo = datatable (Stage: string, label: string, stageOrder: int) [
    "UserRoute", "User Route", 1,
    "TransportConnected", "Stack Connected", 3,
    "OnCredentialsAcquisitionCompleted", "creds", 4,
    "RdpStackConnectionEstablished", "Stack Connected", 5,
    "LogonDelay", "Logon", 6,
    "ShellStart", "Shell Start", 7,
    "ProductiveTime", "Shell Ready", 8
];
let ProcessedConnections = WVDConnections
| where TimeGenerated >= ago(1d)
| where State == "Started"
| where ("no_host_selected" == "no_host_selected" or trim_end("[.].*", SessionHostName) == "no_host_selected")
| join kind=leftouter (
    WVDCheckpoints
    | where Parameters contains "StartVMOnConnect" and Parameters contains "VMStarting"
) on CorrelationId
| extend PowerOnConnect = tostring(Parameters)
| project CorrelationId, TimeGenerated, UserName, PredecessorConnectionId, SessionHostName, _ResourceId, PowerOnConnect;
let RowsWithPowerOnConnect = ProcessedConnections
| where isnotempty(PowerOnConnect)
| project CorrelationId, PowerOnConnectTime = TimeGenerated;
ProcessedConnections
| join kind=leftouter (RowsWithPowerOnConnect) on $left.PredecessorConnectionId == $right.CorrelationId
| project CorrelationId,PredecessorConnectionId, PowerOnConnectTime, TimeGenerated, UserName, SessionHostName, _ResourceId, PowerOnConnect
| join kind=leftsemi (
    checkpoints
    | where Source == "RDStack" and Name == "RdpStackConnectionEstablished"
) on CorrelationId
| join kind=inner (
    checkpoints
    | where Name == "LoadBalancedNewConnection"
    | extend LoadBalanceOutcome=Parameters.LoadBalanceOutcome
    | project CorrelationId, UserRoute=TimeGenerated
    | distinct CorrelationId, UserRoute
) on CorrelationId
| summarize EarliestTime = min(TimeGenerated), LatestTime = max(TimeGenerated) by CorrelationId, UserName, PredecessorConnectionId, SessionHostName, _ResourceId, PowerOnConnect, UserRoute
| extend Duration = datetime_diff('second', LatestTime, EarliestTime)
| where UserName contains "niall.jennings"




let newSessions = true;
let checkpoints =  WVDCheckpoints
    | summarize arg_min(TimeGenerated, *) by CorrelationId, Name;
let Checkpoints = (name: string) {
    checkpoints
    | where Name == name 
    | project CorrelationId, bag = pack(name, TimeGenerated), Parameters
    | evaluate bag_unpack(bag)
};
let ChartInfo = datatable (Stage: string, label: string, stageOrder: int) [
    "UserRoute", "User Route", 1,
    "TransportConnected", "Stack Connected", 3,
    "OnCredentialsAcquisitionCompleted", "creds", 4,
    "RdpStackConnectionEstablished", "Stack Connected", 5,
    "LogonDelay", "Logon", 6,
    "ShellStart", "Shell Start", 7,
    "ProductiveTime", "Shell Ready", 8
];
let ProcessedConnections = WVDConnections
| where TimeGenerated >= ago(1d)
| where State == "Started"
| where ("no_host_selected" == "no_host_selected" or trim_end("[.].*", SessionHostName) == "no_host_selected")
| join kind=leftouter (
    WVDCheckpoints
    | where Parameters contains "StartVMOnConnect" and Parameters contains "VMStarting"
) on CorrelationId
| extend PowerOnConnect = tostring(Parameters)
| project CorrelationId, TimeGenerated, UserName, PredecessorConnectionId, SessionHostName, _ResourceId, PowerOnConnect;
let RowsWithPowerOnConnect = ProcessedConnections
| where isnotempty(PowerOnConnect)
| project CorrelationId, PowerOnConnectTime = TimeGenerated;
ProcessedConnections
| join kind=leftouter (RowsWithPowerOnConnect) on $left.PredecessorConnectionId == $right.CorrelationId
| project CorrelationId,PredecessorConnectionId, PowerOnConnectTime, TimeGenerated, UserName, SessionHostName, _ResourceId, PowerOnConnect
| join kind = leftsemi
    (
    // Only include connections that actually reached the host to prevent short (failed) attempts from skewing the data
    checkpoints
    | where Source == "RDStack"
        and Name == "RdpStackConnectionEstablished"
    )
    on CorrelationId
| join kind = inner // UserRoute
    (
    checkpoints
    | where Name == "LoadBalancedNewConnection"
    | extend LoadBalanceOutcome=Parameters.LoadBalanceOutcome
    //| where (newSessions and LoadBalanceOutcome == "NewSession") or (not(newSessions) and LoadBalanceOutcome in ('Disconnected', 'Active'))
    //| where (newSessions and LoadBalanceOutcome == "NewSession")
    | project CorrelationId, UserRoute=TimeGenerated
    | distinct CorrelationId, UserRoute
    )
    on CorrelationId
| project-away CorrelationId1
| where UserName contains "niall.jennings"





let newSessions = true;

let checkpoints = WVDCheckpoints
    | summarize arg_min(TimeGenerated, *) by CorrelationId, Name;

let Checkpoints = (name: string) {
    checkpoints
    | where Name == name 
    | project CorrelationId, bag = pack(name, TimeGenerated), Parameters
    | evaluate bag_unpack(bag)
};

let ChartInfo = datatable (Stage: string, label: string, stageOrder: int) [
    "UserRoute", "User Route", 1,
    "TransportConnected", "Stack Connected", 3,
    "OnCredentialsAcquisitionCompleted", "creds", 4,
    "RdpStackConnectionEstablished", "Stack Connected", 5,
    "LogonDelay", "Logon", 6,
    "ShellStart", "Shell Start", 7,
    "ProductiveTime", "Shell Ready", 8
];

// Function to calculate Duration for a CorrelationId
let GetDurationForCorrelationId = (cid: string) {
    WVDCheckpoints
    | where CorrelationId == cid
    | summarize EarliestTime = min(TimeGenerated), LatestTime = max(TimeGenerated) by CorrelationId
    | extend DurationInSeconds = datetime_diff('second', LatestTime, EarliestTime)
    | project DurationInSeconds
};

let ProcessedConnections = WVDConnections
| where TimeGenerated >= ago(1d)
| where State == "Started"
| where ("no_host_selected" == "no_host_selected" or trim_end("[.].*", SessionHostName) == "no_host_selected")
| join kind=leftouter (
    WVDCheckpoints
    | where Parameters contains "StartVMOnConnect" and Parameters contains "VMStarting"
) on CorrelationId
| extend PowerOnConnect = tostring(Parameters)
| project CorrelationId, TimeGenerated, UserName, PredecessorConnectionId, SessionHostName, _ResourceId, PowerOnConnect;

let RowsWithPowerOnConnect = ProcessedConnections
| where isnotempty(PowerOnConnect)
| project CorrelationId, PowerOnConnectTime = TimeGenerated;

let FinalResult = ProcessedConnections
| join kind=leftouter (RowsWithPowerOnConnect) on $left.PredecessorConnectionId == $right.CorrelationId
| project CorrelationId, PredecessorConnectionId, PowerOnConnectTime, TimeGenerated, UserName, SessionHostName, _ResourceId, PowerOnConnect
| join kind = leftsemi
    (
    // Only include connections that actually reached the host to prevent short (failed) attempts from skewing the data
    checkpoints
    | where Source == "RDStack"
        and Name == "RdpStackConnectionEstablished"
    )
    on CorrelationId
| join kind = inner // UserRoute
    (
    checkpoints
    | where Name == "LoadBalancedNewConnection"
    | extend LoadBalanceOutcome = Parameters.LoadBalanceOutcome
    | project CorrelationId, UserRoute=TimeGenerated
    | distinct CorrelationId, UserRoute
    )
    on CorrelationId
| extend Duration = GetDurationForCorrelationId(CorrelationId) // Add Duration column
| project-away CorrelationId1
| where UserName contains "niall.jennings";

// Explicitly output the final result
FinalResult




'table' operator: Failed to resolve table expression named 'FinalResult'
Request id: 15653c07-26ef-46f2-a77f-4993e0141868


let newSessions = true;

let checkpoints = WVDCheckpoints
    | summarize arg_min(TimeGenerated, *) by CorrelationId, Name;

let Checkpoints = (name: string) {
    checkpoints
    | where Name == name 
    | project CorrelationId, bag = pack(name, TimeGenerated), Parameters
    | evaluate bag_unpack(bag)
};

let ChartInfo = datatable (Stage: string, label: string, stageOrder: int) [
    "UserRoute", "User Route", 1,
    "TransportConnected", "Stack Connected", 3,
    "OnCredentialsAcquisitionCompleted", "creds", 4,
    "RdpStackConnectionEstablished", "Stack Connected", 5,
    "LogonDelay", "Logon", 6,
    "ShellStart", "Shell Start", 7,
    "ProductiveTime", "Shell Ready", 8
];

// Function to calculate Duration for a CorrelationId
let GetDurationForCorrelationId = (cid: string) {
    WVDCheckpoints
    | where CorrelationId == cid
    | summarize EarliestTime = min(TimeGenerated), LatestTime = max(TimeGenerated) by CorrelationId
    | extend DurationInSeconds = datetime_diff('second', LatestTime, EarliestTime)
    | project DurationInSeconds
};

let ProcessedConnections = WVDConnections
| where TimeGenerated >= ago(1d)
| where State == "Started"
| where ("no_host_selected" == "no_host_selected" or trim_end("[.].*", SessionHostName) == "no_host_selected")
| join kind=leftouter (
    WVDCheckpoints
    | where Parameters contains "StartVMOnConnect" and Parameters contains "VMStarting"
) on CorrelationId
| extend PowerOnConnect = tostring(Parameters)
| project CorrelationId, TimeGenerated, UserName, PredecessorConnectionId, SessionHostName, _ResourceId, PowerOnConnect;

let RowsWithPowerOnConnect = ProcessedConnections
| where isnotempty(PowerOnConnect)
| project CorrelationId, PowerOnConnectTime = TimeGenerated;

let FinalResult = ProcessedConnections
| join kind=leftouter (RowsWithPowerOnConnect) on $left.PredecessorConnectionId == $right.CorrelationId
| project CorrelationId, PredecessorConnectionId, PowerOnConnectTime, TimeGenerated, UserName, SessionHostName, _ResourceId, PowerOnConnect
| join kind = leftsemi
    (
    // Only include connections that actually reached the host to prevent short (failed) attempts from skewing the data
    checkpoints
    | where Source == "RDStack"
        and Name == "RdpStackConnectionEstablished"
    )
    on CorrelationId
| join kind = inner // UserRoute
    (
    checkpoints
    | where Name == "LoadBalancedNewConnection"
    | extend LoadBalanceOutcome = Parameters.LoadBalanceOutcome
    | project CorrelationId, UserRoute=TimeGenerated
    | distinct CorrelationId, UserRoute
    )
    on CorrelationId
| extend Duration = GetDurationForCorrelationId(CorrelationId) // Add Duration column
| project-away CorrelationId1
| where UserName contains "niall.jennings";

// Ensure the query ends with a tabular expression
FinalResult






No tabular expression statement found
Request id: 1ed921fb-b450-480a-98c0-17ab7111a71c

let newSessions = true;

let checkpoints = WVDCheckpoints
    | summarize arg_min(TimeGenerated, *) by CorrelationId, Name;

let Checkpoints = (name: string) {
    checkpoints
    | where Name == name 
    | project CorrelationId, bag = pack(name, TimeGenerated), Parameters
    | evaluate bag_unpack(bag)
};

let ChartInfo = datatable (Stage: string, label: string, stageOrder: int) [
    "UserRoute", "User Route", 1,
    "TransportConnected", "Stack Connected", 3,
    "OnCredentialsAcquisitionCompleted", "creds", 4,
    "RdpStackConnectionEstablished", "Stack Connected", 5,
    "LogonDelay", "Logon", 6,
    "ShellStart", "Shell Start", 7,
    "ProductiveTime", "Shell Ready", 8
];

// Function to calculate Duration for a CorrelationId
let GetDurationForCorrelationId = (cid: string) {
    WVDCheckpoints
    | where CorrelationId == cid
    | summarize EarliestTime = min(TimeGenerated), LatestTime = max(TimeGenerated) by CorrelationId
    | extend DurationInSeconds = datetime_diff('second', LatestTime, EarliestTime)
    | project DurationInSeconds
};

let ProcessedConnections = WVDConnections
| where TimeGenerated >= ago(1d)
| where State == "Started"
| where ("no_host_selected" == "no_host_selected" or trim_end("[.].*", SessionHostName) == "no_host_selected")
| join kind=leftouter (
    WVDCheckpoints
    | where Parameters contains "StartVMOnConnect" and Parameters contains "VMStarting"
) on CorrelationId
| extend PowerOnConnect = tostring(Parameters)
| project CorrelationId, TimeGenerated, UserName, PredecessorConnectionId, SessionHostName, _ResourceId, PowerOnConnect;

let RowsWithPowerOnConnect = ProcessedConnections
| where isnotempty(PowerOnConnect)
| project CorrelationId, PowerOnConnectTime = TimeGenerated;

ProcessedConnections
| join kind=leftouter (RowsWithPowerOnConnect) on $left.PredecessorConnectionId == $right.CorrelationId
| project CorrelationId, PredecessorConnectionId, PowerOnConnectTime, TimeGenerated, UserName, SessionHostName, _ResourceId, PowerOnConnect
| join kind = leftsemi
    (
    // Only include connections that actually reached the host to prevent short (failed) attempts from skewing the data
    checkpoints
    | where Source == "RDStack"
        and Name == "RdpStackConnectionEstablished"
    )
    on CorrelationId
| join kind = inner // UserRoute
    (
    checkpoints
    | where Name == "LoadBalancedNewConnection"
    | extend LoadBalanceOutcome=Parameters.LoadBalanceOutcome
    //| where (newSessions and LoadBalanceOutcome == "NewSession") or (not(newSessions) and LoadBalanceOutcome in ('Disconnected', 'Active'))
    //| where (newSessions and LoadBalanceOutcome == "NewSession")
    | project CorrelationId, UserRoute=TimeGenerated
    | distinct CorrelationId, UserRoute
    )
    on CorrelationId
| extend Duration = GetDurationForCorrelationId(CorrelationId) // Add Duration column
| project-away CorrelationId1
| where UserName contains "niall.jennings"




















let newSessions = true;
let checkpoints =  WVDCheckpoints
    | summarize arg_min(TimeGenerated, *) by CorrelationId, Name;
let Checkpoints = (name: string) {
    checkpoints
    | where Name == name 
    | project CorrelationId, bag = pack(name, TimeGenerated), Parameters
    | evaluate bag_unpack(bag)
};
let ChartInfo = datatable (Stage: string, label: string, stageOrder: int) [
    "UserRoute", "User Route", 1,
    "TransportConnected", "Stack Connected", 3,
    "OnCredentialsAcquisitionCompleted", "creds", 4,
    "RdpStackConnectionEstablished", "Stack Connected", 5,
    "LogonDelay", "Logon", 6,
    "ShellStart", "Shell Start", 7,
    "ProductiveTime", "Shell Ready", 8
];
let ProcessedConnections = WVDConnections
| where TimeGenerated >= ago(1d)
| where State == "Started"
| where ("no_host_selected" == "no_host_selected" or trim_end("[.].*", SessionHostName) == "no_host_selected")
| join kind=leftouter (
    WVDCheckpoints
    | where Parameters contains "StartVMOnConnect" and Parameters contains "VMStarting"
) on CorrelationId
| extend PowerOnConnect = tostring(Parameters)
| project CorrelationId, TimeGenerated, UserName, PredecessorConnectionId, SessionHostName, _ResourceId, PowerOnConnect;
let RowsWithPowerOnConnect = ProcessedConnections
| where isnotempty(PowerOnConnect)
| project CorrelationId, PowerOnConnectTime = TimeGenerated;
ProcessedConnections
| join kind=leftouter (RowsWithPowerOnConnect) on $left.PredecessorConnectionId == $right.CorrelationId
| project CorrelationId,PredecessorConnectionId, PowerOnConnectTime, TimeGenerated, UserName, SessionHostName, _ResourceId, PowerOnConnect
| join kind = leftsemi
    (
    // Only include connections that actually reached the host to prevent short (failed) attempts from skewing the data
    checkpoints
    | where Source == "RDStack"
        and Name == "RdpStackConnectionEstablished"
    )
    on CorrelationId
| join kind = inner // UserRoute
    (
    checkpoints
    | where Name == "LoadBalancedNewConnection"
    | extend LoadBalanceOutcome=Parameters.LoadBalanceOutcome
    //| where (newSessions and LoadBalanceOutcome == "NewSession") or (not(newSessions) and LoadBalanceOutcome in ('Disconnected', 'Active'))
    //| where (newSessions and LoadBalanceOutcome == "NewSession")
    | project CorrelationId, UserRoute=TimeGenerated
    | distinct CorrelationId, UserRoute
    )
    on CorrelationId
| project-away CorrelationId1
| where UserName contains "niall.jennings"




let GetDurationForCorrelationId = (cid: string) {
    WVDCheckpoints
    | where CorrelationId == cid
    | summarize EarliestTime = min(TimeGenerated), LatestTime = max(TimeGenerated) by CorrelationId
    | extend DurationInSeconds = datetime_diff('second', LatestTime, EarliestTime)
    | project DurationInSeconds
};

ProcessedConnections
| extend Duration = GetDurationForCorrelationId(CorrelationId)
| project CorrelationId, UserName, SessionHostName, Duration





WVDCheckpoints
| where CorrelationId == "be0fa42e-4f2b-4c0d-ae09-3b226dcd0600"
| summarize EarliestTime = min(TimeGenerated), LatestTime = max(TimeGenerated) by CorrelationId
| extend DurationInSeconds = datetime_diff('second', LatestTime, EarliestTime)





WVDCheckpoints
| where CorrelationId == "be0fa42e-4f2b-4c0d-ae09-3b226dcd0600"

returns

TenantId	TimeGenerated [UTC]	ActivityType	CorrelationId	UserName	Name	Source	Parameters	SourceSystem	Type	_ResourceId
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	23/11/2024, 05:23:31.861	Connection	be0fa42e-4f2b-4c0d-ae09-3b226dcd0600	Niall.Jennings@abrdn.com	StartOrchestration::WVDOrchestrationLauncher::LaunchOrchestration with gatewayUrl: https://afdfp-rdgateway-r1.wvd.microsoft.com/api/arm/v2/connections	Client	{}	Azure	WVDCheckpoints	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	23/11/2024, 05:23:33.278	Connection	be0fa42e-4f2b-4c0d-ae09-3b226dcd0600	Niall.Jennings@abrdn.com	LoadBalancedNewConnection	RDBroker	{"LoadBalanceOutcome":"Disconnected"}	Azure	WVDCheckpoints	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	23/11/2024, 05:23:34.066	Connection	be0fa42e-4f2b-4c0d-ae09-3b226dcd0600	Niall.Jennings@abrdn.com	OrchestrationCompleted	Client	{}	Azure	WVDCheckpoints	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	23/11/2024, 05:23:34.487	Connection	be0fa42e-4f2b-4c0d-ae09-3b226dcd0600	Niall.Jennings@abrdn.com	TransportConnecting	RDStack	{}	Azure	WVDCheckpoints	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	23/11/2024, 05:23:34.487	Connection	be0fa42e-4f2b-4c0d-ae09-3b226dcd0600	Niall.Jennings@abrdn.com	TransportConnected	RDStack	{}	Azure	WVDCheckpoints	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	23/11/2024, 05:23:34.487	Connection	be0fa42e-4f2b-4c0d-ae09-3b226dcd0600	Niall.Jennings@abrdn.com	ShortpathPublicConfigurationReceived	RDStack	{"json":"{ \"addressFamily\": \"both\", \"options\": [ ], \"stun\": [ ], \"turn\": [ \"20.202.248.2\"], \"msCandidatePacing\": 50, \"msInitialRTO\": 100, \"maxRetries\": 3"}	Azure	WVDCheckpoints	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	23/11/2024, 05:23:34.487	Connection	be0fa42e-4f2b-4c0d-ae09-3b226dcd0600	Niall.Jennings@abrdn.com	ShortpathPublicLocalCandidatesReady	RDStack	{"json":"{ \"interfaces\": { \"10.110.88.105:52407\": { \"stun\": [ \"52.169.10.218:24215\"], \"coneShapedNat\": true, \"turn\": [ \"20.202.1.87:52000\"], \"estimate\": \"UDP OK. NAT indeterminate. Cannot predict success.\", \"estimateCode\": \"SUXT\"}, \"172.18.224.1:52408\": { \"estimate\": \"UDP FAIL. Very likely FAIL.\", \"estimateCode\": \"FXXX\"}}, \"hasStun\": true, \"hasTurn\": true, \"hasManual\": false, \"estimateSuccess\": false}"}	Azure	WVDCheckpoints	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	23/11/2024, 05:23:34.829	Connection	be0fa42e-4f2b-4c0d-ae09-3b226dcd0600	Niall.Jennings@abrdn.com	OnWebSocketConnectionCompletion	Client	{}	Azure	WVDCheckpoints	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	23/11/2024, 05:23:35.021	Connection	be0fa42e-4f2b-4c0d-ae09-3b226dcd0600	Niall.Jennings@abrdn.com	OnSecurityProviderNegotiated	Client	{"SecurityProtocol":"CREDSSP-EX"}	Azure	WVDCheckpoints	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	23/11/2024, 05:23:36.225	Connection	be0fa42e-4f2b-4c0d-ae09-3b226dcd0600	Niall.Jennings@abrdn.com	OnSecurityHandshakeCompleted	Client	{"CredSSPSecurityProtocol":"NTLM"}	Azure	WVDCheckpoints	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	23/11/2024, 05:23:36.511	Connection	be0fa42e-4f2b-4c0d-ae09-3b226dcd0600	Niall.Jennings@abrdn.com	RdpStackAuthenticaticatedUser	RDStack	{}	Azure	WVDCheckpoints	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	23/11/2024, 05:23:36.511	Connection	be0fa42e-4f2b-4c0d-ae09-3b226dcd0600	Niall.Jennings@abrdn.com	RdpStackAuthorization	RDStack	{}	Azure	WVDCheckpoints	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	23/11/2024, 05:23:36.780	Connection	be0fa42e-4f2b-4c0d-ae09-3b226dcd0600	Niall.Jennings@abrdn.com	RdpStackLicenseChecked	RDStack	{}	Azure	WVDCheckpoints	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	23/11/2024, 05:23:36.795	Connection	be0fa42e-4f2b-4c0d-ae09-3b226dcd0600	Niall.Jennings@abrdn.com	ShortpathFallbackToGatewayTransport	RDStack	{"FallbackReason":"NotSupported"}	Azure	WVDCheckpoints	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	23/11/2024, 05:23:37.358	Connection	be0fa42e-4f2b-4c0d-ae09-3b226dcd0600	Niall.Jennings@abrdn.com	RdpStackConnectionEstablished	RDStack	{}	Azure	WVDCheckpoints	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	23/11/2024, 05:23:39.521	Connection	be0fa42e-4f2b-4c0d-ae09-3b226dcd0600	Niall.Jennings@abrdn.com	OnServerSupportsDynamicResolution	Client	{}	Azure	WVDCheckpoints	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	23/11/2024, 05:23:40.501	Connection	be0fa42e-4f2b-4c0d-ae09-3b226dcd0600	Niall.Jennings@abrdn.com	OnCoreApiLoginComplete	Client	{}	Azure	WVDCheckpoints	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	23/11/2024, 05:23:41.500	Connection	be0fa42e-4f2b-4c0d-ae09-3b226dcd0600	Niall.Jennings@abrdn.com	FirstGraphicsFramePresented	Client	{}	Azure	WVDCheckpoints	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	23/11/2024, 05:23:41.207	Connection	be0fa42e-4f2b-4c0d-ae09-3b226dcd0600	Niall.Jennings@abrdn.com	RdpStackLogon	RDStack	{}	Azure	WVDCheckpoints	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent
ce4e1e84-3765-4cfe-ac40-5de8d7633df4	23/11/2024, 05:23:41.695	Connection	be0fa42e-4f2b-4c0d-ae09-3b226dcd0600	Niall.Jennings@abrdn.com	FirstGraphicsFrame	RDStack	{}	Azure	WVDCheckpoints	/subscriptions/01f03a19-5500-482a-b480-3bb664e0ebc2/resourcegroups/rg-eus-remotedesktopdevices-workspaceandstorage-neu-prd/providers/microsoft.desktopvirtualization/hostpools/neu_prd_sspersistent
