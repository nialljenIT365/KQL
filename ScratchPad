let binSize = 5m;
let paramRangeStart = todatetime('<ReplaceWithStartDateTime>'); // Replace with actual start time
let paramRangeEnd = todatetime('<ReplaceWithEndDateTime>');     // Replace with actual end time
Perf
| where TimeGenerated between (paramRangeStart .. paramRangeEnd)
| where ObjectName == 'Processor Information' and CounterName == '% Processor Time'
| summarize 
    AVG_CPU = round(avg(CounterValue), 2),
    MAX_CPU = round(max(CounterValue), 2),
    MIN_CPU = round(min(CounterValue), 2),
    MED_CPU = round(percentile(CounterValue, 50), 2),
    ItemsPerTimeBin = count()
    by BinnedTime = bin(TimeGenerated, binSize), Computer
| extend Computer = trim(' ', tolower(Computer))
| extend Timekey = format_datetime(BinnedTime, 'HHmm')
| project 
    TimeGenerated = BinnedTime,
    Timekey,
    SessionHostName = Computer,
    AVG_CPU,
    MED_CPU,
    MAX_CPU,
    MIN_CPU,
    ItemsPerTimeBin







let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        Text.Combine({
            "let binSize = 5m;",
            "let paramRangeStart = todatetime('", DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss"), "');",
            "let paramRangeEnd = todatetime('", DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss"), "');",
            "Perf",
            "| where TimeGenerated between (paramRangeStart .. paramRangeEnd)",
            "| where ObjectName == 'Processor Information' and CounterName == '% Processor Time'",
            "| summarize AVG_CPU = round(avg(CounterValue), 2),",
            "          MAX_CPU = round(max(CounterValue), 2),",
            "          MIN_CPU = round(min(CounterValue), 2),",
            "          MED_CPU = round(percentile(CounterValue, 50), 2),",
            "          ItemsPerTimeBin = count()",
            "by BinnedTime = bin(TimeGenerated, binSize), Computer",
            "| extend Computer = trim(' ', tolower(Computer))",
            "| extend Timekey = format_datetime(BinnedTime, 'HHmm')",
            "| project TimeGenerated = BinnedTime,",
            "         Timekey,",
            "         SessionHostName = Computer,",
            "         AVG_CPU,",
            "         MED_CPU,",
            "         MAX_CPU,",
            "         MIN_CPU,",
            "         ItemsPerTimeBin"
        }),
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    ),
    #"Duplicated Column" = Table.DuplicateColumn(Source, "TimeGenerated", "TimeGenerated - Copy"),
    #"Duplicated Column1" = Table.DuplicateColumn(#"Duplicated Column", "TimeGenerated", "TimeGenerated - Copy.1"),
    #"Changed Type" = Table.TransformColumnTypes(#"Duplicated Column1",{{"TimeGenerated - Copy", type date}}),
    #"Renamed Columns" = Table.RenameColumns(#"Changed Type",{{"TimeGenerated - Copy", "Date"}, {"TimeGenerated - Copy.1", "Time"}}),
    #"Changed Type1" = Table.TransformColumnTypes(#"Renamed Columns",{{"Time", type text}}),
    #"Extracted Text After Delimiter" = Table.TransformColumns(#"Changed Type1", {{"Time", each Text.AfterDelimiter(_, "T"), type text}}),
    #"Extracted Text Before Delimiter" = Table.TransformColumns(#"Extracted Text After Delimiter", {{"Time", each Text.BeforeDelimiter(_, "Z", {0, RelativePosition.FromEnd}), type text}}),
    #"Changed Type2" = Table.TransformColumnTypes(#"Extracted Text Before Delimiter",{{"Time", type time}}),
    #"Reordered Columns" = Table.ReorderColumns(#"Changed Type2",{"TimeGenerated", "Date", "Time", "Timekey", "SessionHostName", "AVG_CPU", "MED_CPU", "MAX_CPU", "MIN_CPU", "ItemsPerTimeBin"})
in
    #"Reordered Columns"





Install-Module -Name Az -AllowClobber -Scope CurrentUser -Force





IF(
    'PERF-CPU-Utilization-5MinBin'[Timekey] > 1700,
    2,
    IF(
        'PERF-CPU-Utilization-5MinBin'[Timekey] >= 0900,
        1,
        0
    )
)



# Check installed modules
Get-Module -ListAvailable Az.*

# Import modules explicitly (optional)
Import-Module Az.Accounts
Import-Module Az.Compute
Import-Module Az.Resources
Import-Module Az.Disk




function Enable-VMHibernation {
    param (
        [Parameter(Mandatory=$true)]
        [string]$Subscription,

        [Parameter(Mandatory=$true)]
        [string]$ResourceGroupName,

        [string]$NameMatch = "SS|DV", # Default match string

        [switch]$ExcludePoweredOnVMs # Switch to exclude powered-on VMs
    )

    # Connect to the Azure subscription
    Connect-AzAccount -Subscription $Subscription

    # Retrieve VMs in the specified resource group and filter based on Name match
    $VMs = Get-AzVM -ResourceGroupName $ResourceGroupName | Where-Object { $_.Name -match $NameMatch }

    foreach ($VM in $VMs) {
        $RG = $ResourceGroupName
        $VM = $VM.Name

        try {
            # Check the current hibernation status
            Write-Output "Checking hibernation status for VM: $VM"
            $hibernationStatus = (Get-AzVM -ResourceGroupName $RG -Name $VM).AdditionalCapabilities

            if ($hibernationStatus.HibernationEnabled -eq $True) {
                Write-Output "Hibernation is already enabled on VM: $VM. Skipping..."
                continue
            } elseif ($hibernationStatus.HibernationEnabled) {
                Write-Output "Hibernation is not enabled on VM: $VM. Proceeding to enable..."
            } else {
                Write-Output "Hibernation status is unknown for VM: $VM. Proceeding to enable..."
            }

            # Check the power state of the VM
            Write-Output "Checking power state for VM: $VM"
            $powerState = (Get-AzVM -ResourceGroupName $RG -Name $VM -Status).Statuses | Where-Object { $_.Code -like 'PowerState/*' } | Select-Object -ExpandProperty Code

            if ($ExcludePoweredOnVMs) {
                if ($powerState -ne "PowerState/deallocated" -and $powerState -ne "PowerState/stopped") {
                    Write-Output "VM: $VM is powered on. Skipping due to ExcludePoweredOnVMs switch..."
                    continue
                }
            }

            if ($powerState -eq "PowerState/running") {
                # Stop the VM if it's running
                Write-Output "Stopping VM: $VM in Resource Group: $RG"
                Stop-AzVM -ResourceGroupName $RG -Name $VM -Force
            } else {
                Write-Output "VM: $VM is already stopped or deallocated. Proceeding with hibernation setup..."
            }

            # Get VM details and disk name
            Write-Output "Fetching VM details for: $VM"
            $vmdetails = Get-AzVM -Name $VM -ResourceGroupName $RG
            $diskname = $vmdetails.StorageProfile.OsDisk.Name
            $diskname=$vmdetails.StorageProfile.OsDisk.name

            # Enable hibernation on the OS disk
            Write-Output "Enabling hibernation on disk: $diskname"
            $disk = Get-AzDisk -ResourceGroupName $RG -DiskName $diskname
            $disk.SupportsHibernation = $True
            Update-AzDisk -ResourceGroupName $RG -DiskName $diskname -Disk $disk

            # Enable hibernation on the VM
            Write-Output "Enabling hibernation on VM: $VM"
            $VM = Get-AzVM -ResourceGroupName $RG -Name $VM
            $VM.AdditionalCapabilities.HibernationEnabled = $True
            Update-AzVM -ResourceGroupName $RG -VM $VM -HibernationEnabled

            Write-Output "Hibernation enabled successfully for VM: $VM"
        }
        catch {
            Write-Error "An error occurred while processing VM: $VM. Error: $_"
        }
    }
}

#NOTE ALL VMS in the Targeted Resource Group should be powered off gracefully in advance of the activity below

#Phase 1 Test - Validate Script works as expected. 
#Uncomment the relevent Enable-VMHibernation command

#NEU_DEV_SSPersistent
#Enable-VMHibernation -Subscription "RemoteDesktopDeveloperDevices-EMEA-NEU-PRD" -ResourceGroupName "rg-EUS-RemoteDesktopDeveloperDevices-WorkspaceAndStorage-NEU-PRD" -ExcludePoweredOnVMs

#Phase 2 UAT Rollout- Push to UAT Pools in NEU, EUS2 and SEA
#Uncomment the relevent Enable-VMHibernation command
#NEU_UAT_SSPersistent
#Enable-VMHibernation -Subscription "RemoteDesktopDevices-EMEA-NEU-PRD" -ResourceGroupName "rg-EUS-RemoteDesktopDevices-UATVirtualDesktop-NEU-PRD" -ExcludePoweredOnVMs
#EUS2_UAT_SSPersistent
#Enable-VMHibernation -Subscription "RemoteDesktopDevices-AMRS-EUS2-PRD" -ResourceGroupName "rg-EUS-RemoteDesktopDevices-UATVirtualDesktop-EUS2-PRD" -ExcludePoweredOnVMs
#SEA_UAT_SSPersistent
#Enable-VMHibernation -Subscription "RemoteDesktopDevices-APAC-SEA-PRD" -ResourceGroupName "rg-EUS-RemoteDesktopDevices-UATVirtualDesktop-SEA-PRD" -ExcludePoweredOnVMs

#Phase 3 PROD Rollout
#Uncomment the relevent Enable-VMHibernation command
#CUS_PRD_SSPersistent
#Enable-VMHibernation -Subscription "RemoteDesktopDevices-AMRS-CUS-PRD" -ResourceGroupName "rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-CUS-PRD" -ExcludePoweredOnVMs
#EUS2_PRD_SSPersistent
#Enable-VMHibernation -Subscription "RemoteDesktopDevices-AMRS-EUS2-PRD" -ResourceGroupName "rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-EUS2-PRD" -ExcludePoweredOnVMs
#NEU_PRD_SSPersistent
#Enable-VMHibernation -Subscription "RemoteDesktopDevices-EMEA-NEU-PRD" -ResourceGroupName "rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-NEU-PRD" -ExcludePoweredOnVMs
#SEA_PRD_SSPersistent  
#Enable-VMHibernation -Subscription "RemoteDesktopDevices-APAC-SEA-PRD" -ResourceGroupName "rg-EUS-RemoteDesktopDevices-PersistentVirtualDesktop-SEA-PRD" -ExcludePoweredOnVMs
