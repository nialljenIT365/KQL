let
    // Define start and end date/time parameters
    strRangeStart = RangeStart,
    strRangeEnd = RangeEnd,

    // Connect to Azure Data Explorer and retrieve WVDConnections data with dynamic date range
    Source = AzureDataExplorer.Contents(
        "https://ade.loganalytics.io/subscriptions/58cb357e-51af-4f62-8982-a8c2b9059362/resourcegroups/rg-eus-desktopmanagement-nerdio-weu-prd/providers/microsoft.operationalinsights/workspaces/nmw-app-law-fwjv4wn75m4qg",
        "nmw-app-law-fwjv4wn75m4qg",
        "
        let paramRangeStart = todatetime('" & DateTime.ToText(strRangeStart, "yyyy-MM-ddTHH:mm:ss") & "');
        let paramRangeEnd = todatetime('" & DateTime.ToText(strRangeEnd, "yyyy-MM-ddTHH:mm:ss") & "');
        
        WVDConnections
        | where TimeGenerated between (paramRangeStart .. paramRangeEnd)
        | where State == ""Started""
        | project CorrelationId, UserName, ConnectionType, StartTime = TimeGenerated, _ResourceId
        | join (
            WVDConnections
            | where State == ""Connected""
            | project EndTime = TimeGenerated, CorrelationId, PredecessorConnectionId, SessionHostName
        ) on CorrelationId
        | extend LoginDurationSeconds = round((EndTime - StartTime) / 1s, 2) // Convert Duration to seconds and round to 2 decimal places
        | project CorrelationId, UserName, ConnectionType, StartTime, EndTime, _ResourceId, PredecessorConnectionId, SessionHostName, LoginDurationSeconds
        | join kind=leftouter (
            WVDCheckpoints
            | where Parameters contains ""StartVMOnConnect"" and Parameters contains ""VMStarting""
            | project CorrelationId, Parameters
        ) on CorrelationId
        | extend 
            HostPoolName = extract(@""/([^/]+)$"", 1, _ResourceId), // Extract the string after the last `/` in `_ResourceId`
            LoginType = case(
                isnotempty(Parameters), ""StartVMOnConnect"",
                PredecessorConnectionId != ""<>"", ""Reconnect"",
                isempty(Parameters) and PredecessorConnectionId == ""<>"", ""Standard"",
                ""Unknown"" // Default case
            )
        | extend StartTimekey = format_datetime(StartTime, 'HHmm')
        | extend ConnectedTimekey = format_datetime(EndTime, 'HHmm')
        | extend UserName = trim(' ', tolower(UserName))
        | extend SessionHostName = trim(' ', tolower(SessionHostName))
        | project CorrelationId, StartTimeGenerated = StartTime, StartTimekey, ConnectedTimeGenerated = EndTime, ConnectedTimekey, LoginDurationSeconds, UserName, HostPoolName, SessionHostName, LoginType
        ",
        [MaxRows=null, MaxSize=null, NoTruncate=null, AdditionalSetStatements=null]
    ),
    #"Duplicated Column" = Table.DuplicateColumn(Source, "StartTimeGenerated", "StartTimeGenerated - Copy"),
    #"Duplicated Column1" = Table.DuplicateColumn(#"Duplicated Column", "StartTimeGenerated", "StartTimeGenerated - Copy.1"),
    #"Duplicated Column2" = Table.DuplicateColumn(#"Duplicated Column1", "ConnectedTimeGenerated", "ConnectedTimeGenerated - Copy"),
    #"Duplicated Column3" = Table.DuplicateColumn(#"Duplicated Column2", "ConnectedTimeGenerated", "ConnectedTimeGenerated - Copy.1"),
    #"Changed Type" = Table.TransformColumnTypes(#"Duplicated Column3",{{"StartTimeGenerated - Copy", type date}, {"ConnectedTimeGenerated - Copy", type date}, {"StartTimeGenerated - Copy.1", type text}, {"ConnectedTimeGenerated - Copy.1", type text}}),
    #"Extracted Text After Delimiter" = Table.TransformColumns(#"Changed Type", {{"StartTimeGenerated - Copy.1", each Text.AfterDelimiter(_, "T"), type text}}),
    #"Extracted Text After Delimiter1" = Table.TransformColumns(#"Extracted Text After Delimiter", {{"ConnectedTimeGenerated - Copy.1", each Text.AfterDelimiter(_, "T"), type text}}),
    #"Extracted Text Before Delimiter" = Table.TransformColumns(#"Extracted Text After Delimiter1", {{"StartTimeGenerated - Copy.1", each Text.BeforeDelimiter(_, "Z", {0, RelativePosition.FromEnd}), type text}}),
    #"Extracted Text Before Delimiter1" = Table.TransformColumns(#"Extracted Text Before Delimiter", {{"ConnectedTimeGenerated - Copy.1", each Text.BeforeDelimiter(_, "Z", {0, RelativePosition.FromEnd}), type text}}),
    #"Changed Type1" = Table.TransformColumnTypes(#"Extracted Text Before Delimiter1",{{"StartTimeGenerated - Copy.1", type time}, {"ConnectedTimeGenerated - Copy.1", type time}}),
    #"Renamed Columns" = Table.RenameColumns(#"Changed Type1",{{"StartTimeGenerated - Copy", "StartTimeGenerated - Date"}, {"StartTimeGenerated - Copy.1", "StartTimeGenerated - Time"}, {"ConnectedTimeGenerated - Copy", "ConnectedTimeGenerated - Date"}, {"ConnectedTimeGenerated - Copy.1", "ConnectedTimeGenerated - Time"}}),
    #"Reordered Columns" = Table.ReorderColumns(#"Renamed Columns",{"CorrelationId", "StartTimeGenerated", "StartTimeGenerated - Date", "StartTimeGenerated - Time", "StartTimekey", "ConnectedTimeGenerated", "ConnectedTimeGenerated - Date", "ConnectedTimeGenerated - Time", "ConnectedTimekey", "LoginDurationSeconds", "UserName", "HostPoolName", "SessionHostName", "LoginType"})
in
    #"Reordered Columns"
